{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://template-feo-react-babel/./src/App.ts","webpack://template-feo-react-babel/./src/app/AppTypes.ts","webpack://template-feo-react-babel/./src/app/Controller.ts","webpack://template-feo-react-babel/./src/app/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/framework/model/BasicFieldOperations.ts","webpack://template-feo-react-babel/./src/framework/model/BasicObjectDefinitionFactory.ts","webpack://template-feo-react-babel/./src/framework/model/DataObjectTypeDefs.ts","webpack://template-feo-react-babel/./src/framework/model/ObjectDefinitionRegistry.ts","webpack://template-feo-react-babel/./src/framework/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/framework/network/CallbackRegistry.ts","webpack://template-feo-react-babel/./src/framework/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/framework/network/OfflineManager.ts","webpack://template-feo-react-babel/./src/framework/network/Poller.ts","webpack://template-feo-react-babel/./src/framework/network/Types.ts","webpack://template-feo-react-babel/./src/framework/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/framework/notification/Notification.ts","webpack://template-feo-react-babel/./src/framework/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/framework/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/framework/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/framework/state/IndexedDBStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/RESTApiStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/framework/state/StateManager.ts","webpack://template-feo-react-babel/./src/framework/ui/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/framework/ui/alert/AlertListener.ts","webpack://template-feo-react-babel/./src/framework/ui/alert/AlertManager.ts","webpack://template-feo-react-babel/./src/framework/ui/context/ContextualInformationHelper.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/SimpleValueDataSource.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewEventHandlerDelegate.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractCollectionView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractView.ts","webpack://template-feo-react-babel/./src/framework/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/framework/util/EqualityFunctions.ts","webpack://template-feo-react-babel//Users/jimsharples/Development/pwa-budget-tracker/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/make namespace object","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/before-startup","webpack://template-feo-react-babel/webpack/startup","webpack://template-feo-react-babel/webpack/after-startup"],"sourcesContent":["//localStorage.debug = 'linked-controller api-ts exercise-types-view app controller-ts controller-ts-detail api-ts socket-ts user-search user-search-detail list-view-renderer';\n//localStorage.debug = 'collection-view-ts collection-view-ts-detail form-detail-view-renderer linked-controller linked-controller-detail exercise-types-view app validation-manager-rule-failure validation-manager';\n//localStorage.debug = 'validation-manager validation-manager-rule-failure abstract-form-detail-validation';\nimport {ContextualInformationHelper} from \"./framework/ui/context/ContextualInformationHelper\";\nimport debug from 'debug';\nimport Controller from './app/Controller';\nimport {API_Config, NAVIGATION, STATE_NAMES} from \"./app/AppTypes\";\nimport {ExerciseTypesCompositeView} from \"./app/view/ExerciseTypesCompositeView\";\nimport WorkoutSummarySidebar from \"./app/sidebar/WorkoutSummarySidebar\";\nimport {WorkoutSummaryView} from \"./app/view/WorkoutSummaryView\";\nimport CurrentWorkoutSidebar from \"./app/sidebar/CurrentWorkoutSidebar\";\nimport {CurrentWorkoutCompositeView} from \"./app/view/CurrentWorkoutCompositeView\";\nimport {WorkoutsViewUsingContext} from \"./app/view/WorkoutsViewUsingContext\";\n\n\nlocalStorage.debug = 'context-helper';\n\ndebug.log = console.info.bind(console);\n\n\nconst logger = debug('app');\n\nexport default class App  {\n\n    private static _instance: App;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n\n\n    private constructor() {\n        // event handlers\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    public static getInstance(): App {\n        if (!(App._instance)) {\n            App._instance = new App();\n        }\n        return App._instance;\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    onDocumentLoad() {\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        Controller.getInstance().onDocumentLoaded();\n\n    }\n\n\n\n}\n\n\n$(function () {\n    App.getInstance().onDocumentLoad();\n});","export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    exerciseTypes: 'exerciseType',\n    workouts: 'workout',\n    recentUserSearches: 'recentUserSearch'\n}\n\nexport const API_Config = {\n    login: '/login',\n    users: '/api/users',\n    exerciseTypes: '/api/exercise-types',\n    workouts: '/api/workouts'\n};\n\nexport const NAVIGATION = {\n    showMyWorkouts: 'navigationItemMyWorkouts',\n    userSearchId: 'navigationItemUserSearch',\n    exerciseTypesId: 'navigationItemExerciseTypes',\n    chatId: 'navigationItemChat',\n    workoutSummary: 'navigationItemWorkoutSummary',\n    currentWorkout: 'navigationItemCurrentWorkout',\n    logout: 'navigationItemLogout'\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    typeExerciseType: 'exerciseType',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n    fromExerciseTypes: 'exerciseTypes',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    exerciseTypes: 'exerciseTypes',\n    userSearch: 'userSearch',\n    workouts: 'workouts',\n    workoutSummary: 'workoutSummary',\n    exercises: 'exercises'\n}\n\nexport const VIEW_CONTAINER = {\n    exerciseTypeDetail: \"exerciseTypeDetail\",\n    currentWorkoutDetail: 'workoutDetail',\n    exerciseDropZone: 'exerciseDropZone'\n}\n\nexport const BUTTON = {\n    createNewExerciseType: 'addNewExerciseType',\n    completeWorkout: 'completeWorkout'\n}\n\nexport const INPUT = {\n    workoutName: 'workoutName'\n}\n\n\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"../framework/state/MemoryBufferStateManager\";\nimport StateChangeListener from \"../framework/state/StateChangeListener\";\nimport {StateManager} from \"../framework/state/StateManager\";\nimport SocketManager from \"../framework/socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"../framework/state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"../framework/state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"../framework/socket/ChatManager\";\nimport {NotificationController} from \"../framework/socket/NotificationController\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {RESTApiStateManager} from \"../framework/state/RESTApiStateManager\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"../framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../framework/model/ObjectDefinitionRegistry\";\nimport {BasicObjectDefinitionFactory} from \"../framework/model/BasicObjectDefinitionFactory\";\nimport {SimpleValueDataSource} from \"../framework/ui/helper/SimpleValueDataSource\";\nimport {KeyType} from \"../framework/ui/ConfigurationTypes\";\nimport {DataObjectListener} from \"../framework/model/DataObjectListener\";\nimport {DataObjectController} from \"../framework/model/DataObjectController\";\nimport {isSameMongo} from \"../framework/util/EqualityFunctions\";\nimport {v4} from \"uuid\";\nimport DownloadManager from \"../framework/network/DownloadManager\";\nimport {EncryptedIndexedDBStateManager} from \"../framework/state/EncryptedIndexedDBStateManager\";\n\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nexport default class Controller implements StateChangeListener, DataObjectListener {\n    private static _instance: Controller;\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName: STATE_NAMES.users,\n                serverURL: '',\n                api: API_Config.users,\n                isActive: true\n            },\n            {\n                stateName: STATE_NAMES.exerciseTypes,\n                serverURL: '',\n                api: API_Config.exerciseTypes,\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.workouts,\n                serverURL: '',\n                api: API_Config.workouts,\n                isActive: true,\n                idField: '_id'\n            }\n        ]);\n\n        // let indexSM = new EncryptedIndexedDBStateManager();\n        // indexSM.initialise('fitness-tracker',[\n        //     {\n        //         name: STATE_NAMES.exerciseTypes,\n        //         keyField: \"_id\"\n        //     },\n        //     {\n        //         name: STATE_NAMES.workouts,\n        //         keyField: \"_id\"\n        //     },\n        // ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, restSM);\n        // let asyncIndexSM = new AsyncStateManagerWrapper(aggregateSM, indexSM);\n        //\n        //\n        aggregateSM.addStateManager(memorySM, [], false);\n        // aggregateSM.addStateManager(asyncIndexSM, [STATE_NAMES.users], false);\n        // aggregateSM.addStateManager(asyncSM, [STATE_NAMES.exerciseTypes,STATE_NAMES.workouts], false);\n        aggregateSM.addStateManager(asyncSM, [], false);\n\n        this.stateManager = aggregateSM;\n        //this.stateManager = EncryptedBrowserStorageStateManager.getInstance(true);\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.exerciseTypes);\n            this.getStateManager().getStateByName(STATE_NAMES.workouts);\n\n            // apply any queued changes from being offline\n            DownloadManager.getInstance().processOfflineItems();\n        }\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n    }\n\n    handleShowChat(roomName: string | null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling create new exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling delete exercise type - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling update exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName, dataObj, isSameMongo, false);\n                break;\n            }\n        }\n    }\n\n    addExerciseToCurrentWorkout(exerciseType: any): void {\n        let copyOfExercise = {...exerciseType};\n        copyOfExercise._id = v4(); // update the id to be unique for the workout\n        this.applicationView.addingExerciseToCurrentWorkout(copyOfExercise);\n    }\n\n    addWorkoutExercisesToCurrentWorkout(workout: any): void {\n        if (workout.exercises) {\n            workout.exercises.forEach((exercise: any) => {\n                this.addExerciseToCurrentWorkout(exercise);\n            });\n        }\n    }\n\n    private setupDataObjectDefinitions() {\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.exerciseTypes, 'Exercise', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true, \"Exercise name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose cardio or strength\",\n            new SimpleValueDataSource([\n                {name: 'Cardio', value: 'cardio'},\n                {name: 'Strength', value: 'strength'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"duration\", \"Duration\", FieldType.duration, true, \"Exercise time\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"sets\", \"Sets\", FieldType.integer, false, \"Number of sets\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"reps\", \"Repetitions\", FieldType.integer, false, \"Number of reps\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"weight\", \"Weight\", FieldType.float, false, \"Weight used\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"distance\", \"Distance\", FieldType.float, false, \"Distance travelled\");\n\n        cLogger(`Exercise type data object definition`);\n        cLogger(exerciseTypeDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('exerciseType'));\n\n        let workoutDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.workouts, 'Workout', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"name\", \"Name\", FieldType.text, false, \"Give the workout a name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"completed\", \"Completed\", FieldType.boolean, true, \"Have completed the workout\");\n        let exercisesFieldDefinition: FieldDefinition = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"exercises\", \"Exercises\", FieldType.collection, true, \"Exercises in this workout\");\n        exercisesFieldDefinition.idType = KeyType.collection;\n        exercisesFieldDefinition.collectionOfDataObjectId = exerciseTypeDefinition.id;\n\n        cLogger(`Workout data object definition`);\n        cLogger(workoutDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('workout'));\n\n\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n}\n\n\n","import SocketListener from \"../framework/socket/SocketListener\";\nimport debug from 'debug';\n\nimport NotificationManager, {NotificationType} from \"../framework/notification/NotificationManager\";\nimport Controller from \"./Controller\";\nimport {isSameMongo} from \"../framework/util/EqualityFunctions\";\nimport {STATE_NAMES} from \"./AppTypes\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {\n    }\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {_id: message.user}, isSameMongo);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, NotificationType.info);\n                            break;\n                        }\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.exerciseTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.exerciseTypes, stateObj, isSameMongo, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.exerciseTypes, stateObj, isSameMongo, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../../app/Controller\";\nimport {FieldFormatter, FieldRenderer, FieldValidator, ValidationResponse} from \"../ui/form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"./DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ui/ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class BasicFieldOperations implements FieldFormatter, FieldRenderer, FieldValidator, FieldValueGenerator {\n    private static dateRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))$/;\n    private static emailRegex: RegExp = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+([^<>()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/;\n    private static shortTimeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n    private static timeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static dateTimeRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))\\s([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static basicPasswordRegex: RegExp = /^[a-zA-Z0-9]{8,15}$/;\n    private static integerRegex: RegExp = /^[+-]?\\d+$/;\n    private static floatRegexp: RegExp = /^[+-]?\\d+(\\.\\d+)?$/;\n    private static booleanRegexp: RegExp = /^true|false$/;\n    private static durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n    private previousFieldValues: FieldNameValue[];\n\n    public constructor() {\n        this.previousFieldValues = [];\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n    }\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue}`);\n        let result: any = currentValue;\n        switch (field.type) { // only need to change dates\n            case (FieldType.date): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY').format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.datetime): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY HH:mm:ss').format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.boolean): {\n                result = (currentValue.toLowerCase() === 'true');\n                break;\n            }\n            case (FieldType.id): {\n                if (field.idType === KeyType.number) {\n                    result = parseInt(currentValue);\n                }\n                break;\n            }\n            case (FieldType.float): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.integer): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n\n        }\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: true,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            // do we have any content?\n            if ((!currentValue) || (currentValue.trim().length === 0)) {\n                response.isValid = false;\n                response.message = `${field.displayName} is required. Please enter a valid value.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n            // boolean is a special case, and must be true\n            if (field.type === FieldType.boolean) {\n                if (currentValue.trim().toLowerCase() !== 'true') {\n                    response.isValid = false;\n                    response.message = `${field.displayName} is required and must be selected.`;\n                    vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                    return response;\n                }\n            }\n        }\n\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        if (currentValue) {\n            switch (field.type) {\n                case (FieldType.datetime): {\n                    response.isValid = BasicFieldOperations.dateTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY hh:mm`;\n\n                    }\n                    break;\n                }\n                case (FieldType.date): {\n                    response.isValid = BasicFieldOperations.dateRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY`;\n\n                    }\n                    break;\n                }\n                case (FieldType.float): {\n                    response.isValid = BasicFieldOperations.floatRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 00.00`;\n                    }\n                    break;\n                }\n                case (FieldType.id): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.email): {\n                    response.isValid = BasicFieldOperations.emailRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an email address`;\n                    }\n                    break;\n                }\n                case (FieldType.integer): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.text): {\n                    break;\n                }\n                case (FieldType.password): {\n                    response.isValid = BasicFieldOperations.basicPasswordRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 8 to 15 letters and digits only`;\n                    }\n                    break;\n                }\n                case (FieldType.time): {\n                    response.isValid = BasicFieldOperations.timeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.shortTime): {\n                    response.isValid = BasicFieldOperations.shortTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM`;\n                    }\n                    break;\n                }\n                case (FieldType.duration): {\n                    response.isValid = BasicFieldOperations.durationRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be in the format MM:SS or 999:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.boolean): {\n                    response.isValid = BasicFieldOperations.booleanRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be true or false`;\n                    }\n                    break;\n                }\n            }\n        }\n\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        // ensure we don't end up in an endless loop\n        // if the value hasn't changed return null\n        // let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        // if (index >= 0) {\n        //     //we have a previous value\n        //     let fieldValue: FieldNameValue = this.previousFieldValues[index];\n        //     rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - previous value ${fieldValue.value}`);\n        //     if (fieldValue.value === currentValue) return null;\n        // }\n        // either not yet seen or value has changed from previous\n        if (currentValue) { // only attempt to render non-empty dates\n            let newValue: string = currentValue;\n\n            switch (field.type) {\n                case (FieldType.date): {\n                    newValue = moment(currentValue, 'YYYYMMDD').format('DD/MM/YYYY');\n                    break;\n                }\n                case (FieldType.datetime): {\n                    newValue = moment(currentValue, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm:ss');\n                    break;\n                }\n            }\n\n            // store the previous value\n            this.setPreviousValue(field, newValue);\n            rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - rendered to ${newValue}`);\n            return newValue;\n        } else {\n            // empty value, no rendering required\n            rlogger(`Rendering value for field ${field.displayName} with new value is empty - no rendering required`);\n\n            return null;\n        }\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        // are we generating the field?\n        if (field.generator) {\n            // are we only generating on create\n            if (field.generator.onCreation && isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on creation ${result}`);\n            }\n            // or if we are modifying and should also be modifying the value\n            if (field.generator.onModify && !isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on modify ${result}`);\n            }\n        }\n        return result;\n    }\n\n    private setPreviousValue(field: FieldDefinition, newValue: string) {\n        rlogger(`Storing previous value for field ${field.displayName} with  new value ${newValue}`);\n        let fieldValue: FieldNameValue;\n\n        let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        if (index >= 0) {\n            //we have a previous value\n            fieldValue = this.previousFieldValues[index];\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - old value was ${fieldValue}`);\n            fieldValue.value = newValue;\n        } else {\n            // create a new record of the value\n            fieldValue = {\n                id: field.id,\n                value: newValue\n            }\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - NO previous`);\n            this.previousFieldValues.push(fieldValue);\n        }\n    }\n\n    private generateValue(field: FieldDefinition): string {\n        let result = '';\n        switch (field.type) {\n            case (FieldType.datetime): {\n                result = moment().format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.date): {\n                result = moment().format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.float): {\n                result = '0.0';\n                break;\n            }\n            case (FieldType.id): {\n                result = '-1';\n                break;\n            }\n            case (FieldType.email): {\n                result = 'me@me.com';\n                break;\n            }\n            case (FieldType.integer): {\n                result = '0';\n                break;\n            }\n            case (FieldType.text): {\n                result = '';\n                break;\n            }\n            case (FieldType.password): {\n                result = '';\n                break;\n            }\n            case (FieldType.time): {\n                result = '00:00:00';\n                break;\n            }\n            case (FieldType.shortTime): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.duration): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.boolean): {\n                result = 'false';\n                break;\n            }\n            case (FieldType.uuid): {\n                result = v4();\n                break;\n            }\n            case (FieldType.userId): {\n                result = `${Controller.getInstance().getLoggedInUsername()}`;\n                break;\n            }\n        }\n        return result;\n    }\n\n}","import {KeyType} from \"../ui/ConfigurationTypes\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {DisplayOrder} from \"../ui/form/FormUITypeDefs\";\n\nexport const FIELD_ID: string = 'id';\nexport const FIELD_CreatedBy: string = 'createdBy';\nexport const FIELD_ModifiedBy: string = 'modifiedBy';\nexport const FIELD_CreatedOn: string = 'createdOn';\nexport const FIELD_ModifiedOn: string = 'modifiedOn';\n\nexport const FIELD_CreatedBy_Desc: string = 'Created By';\nexport const FIELD_ModifiedBy_Desc: string = 'Last Modified By';\nexport const FIELD_CreatedOn_Desc: string = 'Created On';\nexport const FIELD_ModifiedOn_Desc: string = 'Last Modified On';\n\nexport class BasicObjectDefinitionFactory {\n\n    private static _instance: BasicObjectDefinitionFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): BasicObjectDefinitionFactory {\n        if (!(BasicObjectDefinitionFactory._instance)) {\n            BasicObjectDefinitionFactory._instance = new BasicObjectDefinitionFactory();\n        }\n        return BasicObjectDefinitionFactory._instance;\n    }\n\n    public generateStartingDisplayOrder(dataObjDef: DataObjectDefinition): DisplayOrder[] {\n        let result: DisplayOrder[] = [];\n\n        dataObjDef.fields.forEach((fieldDef, index) => {\n            let order: DisplayOrder = {\n                fieldId: fieldDef.id,\n                displayOrder: index\n            }\n            // is this the created or modified date\n            if (fieldDef.id === FIELD_CreatedOn) {\n                order.displayOrder += 100;\n            }\n            if (fieldDef.id === FIELD_ModifiedOn) {\n                order.displayOrder += 101;\n            }\n            if (fieldDef.type === FieldType.userId) {\n                order.displayOrder += 100;\n            }\n            result.push(order);\n        });\n        return result;\n    }\n\n    public createBasicObjectDefinition(id: string, displayName: string, hasDataId: boolean, dataIdIsUUID: boolean, createModifierFields: boolean = true, idFieldName: string = FIELD_ID): DataObjectDefinition {\n        let objDef: DataObjectDefinition = {\n            id: id,\n            displayName: displayName,\n            fields: []\n        }\n        let ops = new BasicFieldOperations();\n\n        // do we need an id field?\n        if (hasDataId) {\n            let fieldType = FieldType.id;\n            if (dataIdIsUUID) {\n                fieldType = FieldType.uuid;\n            }\n            let fieldDef: FieldDefinition = {\n                id: idFieldName,\n                isKey: true,\n                idType: KeyType.number,\n                type: fieldType,\n                displayName: 'Id',\n                mandatory: true,\n                generator: {\n                    generator: ops,\n                    onModify: false,\n                    onCreation: true\n                }\n            }\n            objDef.fields.push(fieldDef);\n        }\n\n        // add fields for created and modified\n        if (createModifierFields) {\n            this.addCreatedDateToArray(objDef.fields);\n            this.addCreatedByToArray(objDef.fields);\n            this.addModifiedByToArray(objDef.fields);\n            this.addModifiedDateToArray(objDef.fields);\n        }\n\n        return objDef;\n    }\n\n    public addStringFieldToObjDefinition(objDef: DataObjectDefinition, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addStringFieldToArray(objDef.fields, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    public addNumericFieldToObjDefinition(objDef: DataObjectDefinition, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addNumericFieldToArray(objDef.fields, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    private addCreatedDateToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_CreatedOn, FIELD_CreatedOn_Desc, FieldType.datetime, true, FIELD_CreatedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: false\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addModifiedDateToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_ModifiedOn, FIELD_ModifiedOn_Desc, FieldType.datetime, true, FIELD_ModifiedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addCreatedByToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addNumericFieldToArray(fields, FIELD_CreatedBy, FIELD_CreatedBy_Desc, FieldType.userId, true, FIELD_CreatedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: false\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addModifiedByToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_ModifiedBy, FIELD_ModifiedBy_Desc, FieldType.userId, true, FIELD_ModifiedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addFieldToArray(fields: FieldDefinition[], keyType: KeyType, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        let fieldDef: FieldDefinition = {\n            id: id,\n            isKey: false,\n            idType: keyType,\n            type: type,\n            displayName: displayName,\n            mandatory: isMandatory,\n            displayOnly: false,\n        }\n\n        if (isMandatory) {\n            // add generator\n            fieldDef.generator = {\n                generator: new BasicFieldOperations(),\n                onCreation: true,\n                onModify: false\n            }\n        }\n\n\n        if (description) fieldDef.description = description;\n        if (datasource) fieldDef.dataSource = datasource;\n\n        fields.push(fieldDef);\n        return fieldDef;\n    }\n\n    private addStringFieldToArray(fields: FieldDefinition[], id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addFieldToArray(fields, KeyType.string, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    private addNumericFieldToArray(fields: FieldDefinition[], id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addFieldToArray(fields, KeyType.string, id, displayName, type, isMandatory, description, datasource);\n    }\n\n}","import {KeyType} from \"../ui/ConfigurationTypes\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {ValidationRule} from \"../ui/form/validation/ValidationTypeDefs\";\n\nexport enum FieldType {\n    id = 'Id',\n    uuid = 'UUID',\n    text = 'Text',\n    integer = 'Integer',\n    float = 'Number',\n    date = 'Date',\n    time = 'Time',\n    shortTime = 'Short Time',\n    datetime = 'Datetime',\n    email = 'Email',\n    password = 'Password',\n    boolean = 'True/False',\n    userId = 'User',\n    choice = 'Choice',\n    limitedChoice = 'Limited Choice',\n    largeText = 'TextArea',\n    collection = 'Collection',\n    duration = 'Duration'\n}\n\nexport interface FieldValueGenerator {\n    generate(field: FieldDefinition, isCreate: boolean): string;\n}\n\n\nexport type FieldDefinition = {\n    id: string,\n    isKey: boolean,\n    idType: KeyType,\n    type: FieldType,\n    displayName: string,\n    mandatory: boolean,\n    displayOnly?: boolean,\n    description?: string,\n    collectionOfDataObjectId?: string,\n    generator?: {\n        onCreation: boolean,\n        onModify: boolean,\n        generator: FieldValueGenerator\n    },\n    dataSource?: FieldValueOptions\n}\n\nexport type DataObjectDefinition = {\n    id: string,\n    displayName: string,\n    fields: FieldDefinition[],\n    rules?: ValidationRule\n}\n\n\n\n","import {DataObjectDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {BasicObjectDefinitionFactory, FIELD_ID} from \"./BasicObjectDefinitionFactory\";\nimport debug from \"debug\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\n\nconst logger = debug('object-definition-registry');\n\nexport class ObjectDefinitionRegistry {\n    private static _instance: ObjectDefinitionRegistry;\n    protected definitions: DataObjectDefinition[];\n\n    private constructor() {\n        this.definitions = [];\n    }\n\n    public static getInstance(): ObjectDefinitionRegistry {\n        if (!(ObjectDefinitionRegistry._instance)) {\n            ObjectDefinitionRegistry._instance = new ObjectDefinitionRegistry();\n        }\n        return ObjectDefinitionRegistry._instance;\n    }\n\n    public findDefinition(id: string): DataObjectDefinition | null {\n        let result: DataObjectDefinition | null = null;\n        const index = this.definitions.findIndex((definition) => definition.id === id);\n        if (index >= 0) {\n            result = this.definitions[index];\n        }\n        return result;\n    }\n\n    public addDefinition(id: string, displayName: string, hasDataId: boolean, dataIdIsUUID: boolean, createModifierFields: boolean = true, idFieldName: string = FIELD_ID): DataObjectDefinition {\n        logger(`Adding definition for ${id} with name ${displayName}`);\n        let result: DataObjectDefinition | null = this.findDefinition(id);\n        if (result) {\n            return result;\n        } else {\n            let definition = BasicObjectDefinitionFactory.getInstance().createBasicObjectDefinition(id, displayName, hasDataId, dataIdIsUUID, createModifierFields, idFieldName);\n            this.definitions.push(definition);\n            return definition;\n        }\n    }\n\n    public createInstanceFromDef(definition: DataObjectDefinition): any {\n        logger(`Creating instance for definition ${definition.displayName}`);\n        let result: any = {};\n        const fieldOps = new BasicFieldOperations();\n\n        definition.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n\n                switch (fieldDef.type) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        break;\n                    }\n                    default: {\n                        fieldValue = fieldOps.formatValue(fieldDef, fieldValue);\n                        break;\n                    }\n                }\n\n                logger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                result[fieldDef.id] = fieldValue;\n            }\n            if (fieldDef.type === FieldType.collection) {\n                result[fieldDef.id] = [];\n            }\n        });\n        return result;\n    }\n\n\n    public createInstance(id: string): any {\n        logger(`Creating instance for definition ${id}`);\n        let result: any = {};\n\n        const definition: DataObjectDefinition | null = this.findDefinition(id);\n\n        if (definition) {\n            result = this.createInstanceFromDef(definition);\n        }\n        return result;\n    }\n}","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import {RequestCallBackFunction} from \"./Types\";\nimport debug from \"debug\";\n\nconst logger = debug('callback-registry');\n\ntype CallBack = {\n    id: string,\n    fn: RequestCallBackFunction\n}\n\nexport class CallbackRegistry {\n    private static _instance: CallbackRegistry;\n    private callbacks: CallBack[] = [];\n\n    private constructor() {\n    }\n\n    public static getInstance(): CallbackRegistry {\n        if (!(CallbackRegistry._instance)) {\n            CallbackRegistry._instance = new CallbackRegistry();\n        }\n        return CallbackRegistry._instance;\n    }\n\n    public addRegisterCallback(id: string, fn: RequestCallBackFunction): void {\n        logger(`Adding callback function with id ${id}`);\n        this.callbacks.push({id: id, fn: fn});\n    }\n\n    public getCallbackById(id: string): RequestCallBackFunction {\n        const defaultFn = function (data: any, status: number, associatedStateName: string): void {\n            console.error(`Callback received with status ${status}, state name ${associatedStateName} where the callback was never registered`);\n        }\n\n        const foundIndex = this.callbacks.findIndex((callback) => callback.id === id);\n        if (foundIndex >= 0) {\n            return this.callbacks[foundIndex].fn;\n        }\n        return defaultFn;\n    }\n}","import apiUtil from './ApiUtil';\nimport {v4} from 'uuid';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestType} from \"./Types\";\n\nimport debug from 'debug';\nimport {CallbackRegistry} from \"./CallbackRegistry\";\nimport {OfflineManager} from \"./OfflineManager\";\n\nconst logger = debug('api-ts');\n\nclass DownloadManager {\n    private static _instance: DownloadManager;\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n\n    public processOfflineItems() {\n        logger(`Checking for offline items`);\n        OfflineManager.getInstance().processQueuedResults();\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callbackId: string, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callbackId: callbackId,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callbackId: string, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callbackId: callbackId,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public async addApiRequest(jsonRequest: jsonRequest, isPriority = false, wasOffline: boolean = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = v4();\n        logger(`Adding Queue Request ${requestId}`);\n        logger(jsonRequest);\n\n        // are we currently offline?\n        if (OfflineManager.getInstance().areWeOffline()) {\n            logger(`We are offline, queueing request for when server back online.`);\n            OfflineManager.getInstance().addOfflineRequest(jsonRequest);\n            // let the callback function know, with a custom code to let the receiver know there was a problem\n            CallbackRegistry.getInstance().getCallbackById(jsonRequest.callbackId)(jsonRequest.params, 500, jsonRequest.associatedStateName, false);\n            return;\n        }\n\n        // we are online (hopefully), continue for now, we will catch offline errors later\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n                wasOffline: wasOffline\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n                wasOffline: wasOffline\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            logger(`processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        logger(`received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            logger(queueItem);\n\n            // are we offline http status of 500\n            if (httpStatus === 500) {\n                logger(`queue item ${queueItem.requestId} - server offline, queueing for later`);\n                OfflineManager.getInstance().addOfflineRequest(queueItem.originalRequest);\n                // let the callback function know, with a custom code to let the receiver know there was a problem\n                CallbackRegistry.getInstance().getCallbackById(queueItem.originalRequest.callbackId)(queueItem.originalRequest.params, httpStatus, queueItem.originalRequest.associatedStateName, queueItem.wasOffline);\n            } else {\n                logger(`finished for queue item ${queueItem.requestId} with possible offline id of ${queueItem.originalRequest._id}`);\n                // let the callback function know\n                CallbackRegistry.getInstance().getCallbackById(queueItem.originalRequest.callbackId)(jsonData, httpStatus, queueItem.originalRequest.associatedStateName, queueItem.wasOffline);\n            }\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        logger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        logger(item);\n        switch (item.originalRequest.type) {\n            case RequestType.POST: {\n                apiUtil.apiFetchJSONWithPost(item);\n                break;\n            }\n            case RequestType.GET: {\n                apiUtil.apiFetchJSONWithGet(item);\n                break;\n            }\n            case RequestType.DELETE: {\n                apiUtil.apiFetchJSONWithDelete(item);\n                break;\n            }\n            case RequestType.PUT: {\n                apiUtil.apiFetchJSONWithPut(item);\n                break;\n            }\n        }\n    }\n}\n\nexport default DownloadManager;\n","import {jsonRequest} from \"./Types\";\nimport {Poller} from \"./Poller\";\nimport IndexedDBStateManager from \"../state/IndexedDBStateManager\";\nimport {v4} from \"uuid\";\nimport DownloadManager from \"./DownloadManager\";\nimport {isSameMongo} from \"../util/EqualityFunctions\";\nimport NotificationManager, {NotificationType} from \"../notification/NotificationManager\";\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport AsynchronousStateManager from \"../state/AsynchronousStateManager\";\nimport debug from \"debug\";\n\nconst logger = debug('offline-manager');\n\nexport class OfflineManager implements StateChangeListener {\n    private static _instance: OfflineManager;\n    private static DB_NAME = 'offline.manager.db';\n    private static OBJECT_STORE = 'offline.manager.db.requests';\n    private persistence: AsynchronousStateManager;\n\n    constructor() {\n        this.serverBackOnline = this.serverBackOnline.bind(this);\n        const indexedDB = new IndexedDBStateManager();\n        indexedDB.initialise(OfflineManager.DB_NAME, [{name: OfflineManager.OBJECT_STORE, keyField: '_id'}]);\n        this.persistence = indexedDB;\n        this.persistence.addChangeListenerForName(OfflineManager.OBJECT_STORE, this);\n    }\n\n    public static getInstance(): OfflineManager {\n        if (!(OfflineManager._instance)) {\n            OfflineManager._instance = new OfflineManager();\n        }\n        return OfflineManager._instance;\n    }\n\n    public processQueuedResults() {\n        // find any requests in the persistence\n        this.persistence.getStateByName(OfflineManager.OBJECT_STORE);\n    }\n\n    public serverBackOnline() {\n        NotificationManager.getInstance().show('Server', 'Server is back online.');\n        this.processQueuedResults();\n    }\n\n    public areWeOffline(): boolean {\n        return Poller.getInstance().isPolling();\n    }\n\n    public addOfflineRequest(jsonRequest: jsonRequest) {\n        if (!Poller.getInstance().isPolling()) {\n            Poller.getInstance().startPolling(this.serverBackOnline);\n            NotificationManager.getInstance().show('Server', 'Server is offline, queueing local changes for when server is available', NotificationType.warning);\n        }\n        // save the request with an id\n        jsonRequest._id = v4();\n        logger('Adding offline request');\n        logger(jsonRequest);\n\n        this.persistence.addNewItemToState(OfflineManager.OBJECT_STORE, jsonRequest, false);\n    }\n\n    getListenerName(): string {\n        return \"Offline manager\";\n    }\n\n    stateChanged(managerName: string, name: string, offlineResults: any): void {\n        if (offlineResults && offlineResults.length > 0) {\n            NotificationManager.getInstance().show('Queued Changes', `There are ${offlineResults.length} queued changes, sending to server.`, NotificationType.warning);\n            offlineResults.forEach((request: jsonRequest) => {\n                this.persistence.removeItemFromState(OfflineManager.OBJECT_STORE, request, isSameMongo, false);\n                logger(`Processing offline request with priority and from offline`);\n                logger(request);\n                DownloadManager.getInstance().addApiRequest(request, true, true);\n            });\n        }\n        this.persistence.forceResetForGet(OfflineManager.OBJECT_STORE);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n\n}","import debug from \"debug\";\n\nconst logger = debug('poller');\n\nexport type serverAvailable = () => void;\n\nexport class Poller {\n    private static _instance: Poller;\n    private static INTERVAL_DEFAULT = 10000; // 30 seconds\n    private static URL_CALL = '/ping';\n    private interval: any | null = null;\n    private isPollingBool: boolean = false;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Poller {\n        if (!(Poller._instance)) {\n            Poller._instance = new Poller();\n        }\n        return Poller._instance;\n    }\n\n    startPolling(callback: serverAvailable, delay: number = Poller.INTERVAL_DEFAULT): void {\n        this.isPollingBool = true;\n        this.interval = setInterval(() => {\n            logger(`Checking for server availability`)\n            fetch(Poller.URL_CALL, {method: 'GET'}).then((response) => {\n                logger(`Response code was ${response.status} - server is now available`);\n                this.stopPolling();\n                callback();\n            }).catch((error) => {\n                logger(error);\n            });\n        }, delay);\n    }\n\n    isPolling(): boolean {\n        return this.isPollingBool;\n    }\n\n    stopPolling() {\n        if (this.interval) clearInterval(this.interval);\n        this.interval = null;\n        this.isPollingBool = false;\n    }\n\n\n}","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callbackId: string,\n    associatedStateName: string,\n    _id?: string\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType,\n    wasOffline: boolean\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string, wasOffline?: boolean) => void;","import Notification from './Notification';\nimport {NotificationManager, NotificationType} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: NotificationType, duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case NotificationType.info: {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case NotificationType.warning: {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case NotificationType.message: {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case NotificationType.priority: {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager, NotificationType} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: NotificationType, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport enum NotificationType {\n    info,\n    warning,\n    message,\n    priority\n}\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: NotificationType = NotificationType.info, duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nexport default NotificationManager;\n","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n\n    protected constructor(managerName: string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: stateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: stateValue): void;\n\n    public abstract _getState(name: string): stateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item, testForEqualityFunction);\n        // remove the item from the state\n        smLogger(`State Manager: Found item - removing, is persisted ${isPersisted}`);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item, testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {StateManager, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private static _instance: AggregateStateManager;\n    private stateManagers: managerWithFilters[];\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","import {stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name} is persisted ${isPersisted}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n    getListenerName(): string {\n        return \"Async Manager\";\n    }\n\n}","import debug from 'debug';\nimport {IDBPDatabase, IDBPObjectStore, IDBPTransaction, openDB} from \"idb\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateEventType, stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nconst logger = debug('indexeddb-ts');\n\nexport type collection = {\n    name: string,\n    keyField: string\n};\n\nclass IndexedDBStateManager implements AsynchronousStateManager {\n    private static instance: IndexedDBStateManager;\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n    protected dbName: string;\n    protected collections: collection[];\n\n    public constructor() {\n        this.dbName = 'default';\n        this.delegate = new StateChangedDelegate('indexeddb');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n        this.collections = [];\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n\n    }\n\n    public static getInstance(): IndexedDBStateManager {\n        if (!IndexedDBStateManager.instance) {\n            IndexedDBStateManager.instance = new IndexedDBStateManager();\n        }\n        return IndexedDBStateManager.instance;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public async initialise(dbName: string, collections: collection[]) {\n        logger(`opening database for ${dbName} with collections`);\n        logger(collections);\n        this.dbName = dbName;\n        this.collections = collections;\n\n        let runsComplete: boolean[] = [];\n        this.collections.forEach((collection) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n\n\n        await openDB(dbName, 1, {\n            upgrade(db, oldVersion, newVersion, transaction) {\n                collections.forEach((collection) => {\n                    logger(`creating collection for ${collection.name} with key ${collection.keyField}`)\n                    db.createObjectStore(collection.name, {keyPath: collection.keyField, autoIncrement: false});\n                });\n            },\n            blocked() {\n                // …\n            },\n            blocking() {\n                // …\n            },\n            terminated() {\n                // …\n            },\n        });\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n    }\n\n    public _getState(name: string): stateValue {\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            logger(`getting state ${name}`);\n            this.getWithCollectionKey(name, this.getKeyFieldForKey(name));\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n    } // should be present with initialise\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let fn = async () => {\n            logger(`replacing item in storage ${state.name}`);\n            logger(state.value);\n            await this.removeAllItemsFromCollectionKey(state.name, this.getKeyFieldForKey(state.name));\n            await this.saveWithCollectionKey(state.name, state.value, this.getKeyFieldForKey(state.name));\n        }\n        fn();\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return;\n        this.addNewItemToCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return;\n        this.removeItemFromCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return;\n        this.updateItemInCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        let fn = async () => {\n            logger(`saving state ${name}`);\n            await this.removeAllItemsFromCollectionKey(name, this.getKeyFieldForKey(name));\n            await this.saveWithCollectionKey(name, stateObj, this.getKeyFieldForKey(name));\n        }\n        fn();\n    }\n\n    public async saveWithCollectionKey(key: string, saveData: any[], keyField: string = 'id') {\n        logger(`Saving array with key ${key}`);\n        logger(saveData);\n        let db: IDBPDatabase = await openDB(this.dbName, 1,);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key], \"readwrite\");\n        transaction.oncomplete = function (ev) {\n            logger('Success');\n            logger(ev);\n        };\n        transaction.onerror = function (ev) {\n            logger('Error');\n            logger(ev);\n        };\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await this.saveItemsToCollection(objectStore, saveData, keyField);\n    }\n\n    /* add a new item to the local storage if not already there */\n    public async addNewItemToCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            logger(`Adding with key ${key}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).add(item);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            this.callbackForAddItem(item, key);\n        }\n    }\n\n    public async removeItemFromCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            logger(`Removing with key ${key} item ${item[keyField]}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).delete(item[keyField]);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            await transaction.done;\n            this.callbackForRemoveItem(item, key);\n\n        }\n    }\n\n    public async updateItemInCollection(key: string, item: any, keyField: string = 'id') {\n        if (item) {\n            logger(`Updating item in storage ${key}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).put(item);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            // @ts-ignore\n            await transaction.done;\n            this.callbackForUpdateItem(item, key);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        logger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        logger(item);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n        this._replaceNamedStateInStorage({name: name, value: stateObjectForName});\n        if (informListeners) this.delegate.informChangeListenersForStateWithName(name, stateObjectForName, stateEventType.StateChanged, null);\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    public async getWithCollectionKey(key: string, keyField: string = 'id') {\n        let savedResults: any[] = [];\n        logger(`Loading with key ${key}`);\n        let db: IDBPDatabase = await openDB(this.dbName, 1);\n        await this.checkForObjectStore(db, key, keyField);\n\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key]);\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        let cursor: IDBPCursor = await objectStore.openCursor();\n\n        while (cursor) {\n            // @ts-ignore\n            savedResults.push(cursor.value);\n            // @ts-ignore\n            cursor = await cursor.continue();\n        }\n\n        logger(savedResults);\n        this.callbackForGetItems(savedResults, key);\n\n    }\n\n    getConfiguredStateNames(): string[] {\n        let result: string[] = [];\n        this.collections.forEach((collection) => {\n            result.push(collection.name);\n        })\n        return result;\n    }\n\n    protected getKeyFieldForKey(key: string): string {\n        let result = '_id';\n        const foundIndex = this.collections.findIndex((collection) => collection.name === key);\n        if (foundIndex >= 0) {\n            result = this.collections[foundIndex].keyField;\n        }\n        return result;\n    }\n\n    protected async checkForObjectStore(db: IDBPDatabase, key: string, keyField: string) {\n        logger(`Checking for collection ${key}`);\n        if (!db.objectStoreNames.contains(key)) {\n            // @ts-ignore\n            logger(`Checking for collection ${key} - NOT found, creating`);\n            await db.createObjectStore(key, {keyPath: keyField, autoIncrement: false});\n        }\n    }\n\n    protected async saveItemsToCollection(objectStore: IDBPObjectStore, saveData: any[], keyField: string = 'id') {\n        logger(`Saving items to collection`);\n        saveData.forEach((data) => {\n            // @ts-ignore\n            objectStore.add(data);\n        });\n    }\n\n    protected async removeAllItemsFromCollectionKey(key: string, keyField: string = 'id') {\n        logger(`Clearing collection ${key}`);\n        let db: IDBPDatabase = await openDB(this.dbName, 1,);\n        await this.checkForObjectStore(db, key, keyField);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key], \"readwrite\");\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await objectStore.clear();\n    }\n\n    protected async callbackForRemoveItem(data: any, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName}  - not forwarded`);\n        logger(data);\n    }\n\n    protected async callbackForUpdateItem(data: any, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName}  - not forwarded`);\n        logger(data);\n    }\n\n    protected callbackForGetItems(data: any, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} - FORWARDING`);\n        logger(data);\n        this.setCompletedRun(associatedStateName);\n        this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged, null);\n    }\n\n    protected async callbackForAddItem(data: any, associatedStateName: string) {\n        logger(`callback for add item for state ${associatedStateName}  - FORWARDING`);\n        logger(data);\n        this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n    }\n\n\n}\n\nexport default IndexedDBStateManager;","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: stateValue[];\n\n    public constructor() {\n        super('memory');\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public static getInstance() {\n        if (!(MemoryBufferStateManager._instance)) {\n            MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n        }\n        return MemoryBufferStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: stateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): stateValue {\n        // @ts-ignore\n        let state: stateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport DownloadManager from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {CallbackRegistry} from \"../network/CallbackRegistry\";\n\n\nconst logger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean,\n    idField?: string\n\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n    private static FUNCTION_ID_ADD_ITEM = 'rest.api.state.manager.add.item';\n    private static FUNCTION_ID_REMOVE_ITEM = 'rest.api.state.manager.remove.item';\n    private static FUNCTION_ID_UPDATE_ITEM = 'rest.api.state.manager.update.item';\n    private static FUNCTION_ID_GET_ITEMS = 'rest.api.state.manager.get.items';\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_ADD_ITEM, this.callbackForAddItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_REMOVE_ITEM, this.callbackForRemoveItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_UPDATE_ITEM, this.callbackForUpdateItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_GET_ITEMS, this.callbackForGetItems);\n\n    }\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        logger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callbackId: RESTApiStateManager.FUNCTION_ID_GET_ITEMS,\n                    associatedStateName: name\n                };\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                logger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        logger(`Adding item to ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callbackId: RESTApiStateManager.FUNCTION_ID_ADD_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        logger(`Removing item from ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        let identifier = stateObj.id;\n        if (config.idField) {\n            identifier = stateObj[config.idField];\n        }\n\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: identifier\n                },\n                callbackId: RESTApiStateManager.FUNCTION_ID_REMOVE_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        logger(`Updating item in ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callbackId: RESTApiStateManager.FUNCTION_ID_UPDATE_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        logger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        logger(item);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string, wasOffline?: boolean) {\n        logger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            if (!wasOffline) {\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n            } else {\n                logger('Item was added offline, update the current data');\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemUpdated, null);\n            }\n\n        }\n        // did the call fail? (server loss)\n        if (status === 500) {\n            logger(`Item adding - offline, but will be queued later`);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.forEach((listener) => {\n                smLogger(`State Manager: Found state listener of ${name} with name ${listener.getListenerName()} - informing`);\n                try {\n                    switch (eventType) {\n                        case (stateEventType.StateChanged): {\n                            listener.stateChanged(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemAdded): {\n                            listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemUpdated): {\n                            listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemDeleted): {\n                            listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                    }\n                } catch (err) {\n                    console.log(err);\n                }\n\n            });\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()} with index ${foundIndex}`);\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: stateValue): void;\n\n    _getState(name: string): stateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: stateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n}","export type Attribute = {\n    name: string,\n    value: string\n}\n\nexport type ModifierClasses = {\n    normal: string,\n    inactive: string,\n    active: string,\n    warning: string\n}\n\nexport type IconClasses = {\n    normal: string,\n    inactive?: string,\n    active?: string,\n    warning?: string,\n}\n\nexport type BasicButtonElement = {\n    buttonClasses: string,\n    buttonText?: string,\n    iconClasses?: string,\n    attributes?: Attribute[]\n\n}\n\nexport type BasicElement = {\n    elementType: string,\n    elementAttributes?: Attribute[],\n    elementClasses: string,\n    innerHTML?: string\n}\n\nexport const DRAGGABLE_KEY_ID: string = 'text/plain';\nexport const DRAGGABLE_TYPE: string = 'draggedType';\nexport const DRAGGABLE_FROM: string = 'draggedFrom';\n\nexport type Draggable = {\n    type: string,\n    from: string\n}\n\nexport type Droppable = {\n    acceptTypes: string[];\n    acceptFrom?: string[];\n}\n\nexport type getIcons = (name: string, item: any) => string[];\n\nexport type ContentDetail = {\n    containerClasses: string,\n    textElementType: string,\n    textElementClasses: string,\n    select: boolean,\n    quickDelete?: boolean,\n    icons?: getIcons,\n    badge?: BasicElement,\n    delete?: BasicButtonElement,\n    drag?: Draggable,\n    background?: BasicElement,\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME: string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name: string,\n    buttonClasses: string,\n    buttonText?: string,\n    iconClasses: string,\n    attributes?: Attribute[]\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport enum KeyType {\n    number,\n    string,\n    boolean,\n    collection\n}\n\nexport type ViewDOMConfig = {\n    resultsContainerId: string,\n    dataSourceId: string,\n    drop?: Droppable\n}\n\nexport type CollectionViewDOMConfig = {\n    viewConfig: ViewDOMConfig,\n    resultsElementType: string,\n    resultsElementAttributes?: [Attribute],\n    resultsClasses: string,\n    keyId: string,\n    keyType: KeyType,\n    modifiers?: ModifierClasses,\n    icons?: IconClasses,\n    detail: ContentDetail,\n    extraActions?: ExtraAction[],\n}\n\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\n\nexport type SidebarPrefs = {\n    id: string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId: string\n}\n\nexport type ViewPrefs = {\n    sidebar?: SidebarPrefs\n}\n\nexport enum RowPosition {\n    first,\n    last\n}\n\nexport type CarouselDOMConfig = {\n    itemsPerRow: {\n        small: number,\n        medium: number,\n        large: number,\n        xlarge: number,\n    },\n    rowContainer: BasicElement,\n    activeRow: BasicElement,\n    activeRowPosition: RowPosition,\n    row: BasicElement,\n    multipleItemsPerRowContainer?: BasicElement,\n    actionContainer: BasicElement,\n    collectionConfig: CollectionViewDOMConfig\n}\n\nexport const SCREEN_WIDTH_LARGE = 992;\nexport const SCREEN_WIDTH_MEDIUM = 769;\nexport const SCREEN_WIDTH_SMALL = 415;\n\n\n","export enum AlertType {\n    cancelled,\n    confirmed\n}\n\nexport type AlertEvent = {\n    outcome: AlertType,\n    context?: any\n}\n\nexport interface AlertListener {\n    completed(event: AlertEvent): void;\n}","import {AlertListener, AlertType} from \"./AlertListener\";\nimport debug from 'debug';\n\nconst ALERT_MODAL_ID = 'alert';\nconst ALERT_TITLE = 'alert-title';\nconst ALERT_CONTENT = 'alert-content';\nconst ALERT_CANCEL = 'alert-cancel';\nconst ALERT_CONFRIM = 'alert-confirm';\n\nconst ALERT_hideClass = \"d-none\";\nconst ALERT_showClass = \"d-block\";\n\nconst logger = debug('alert');\n\nexport class AlertManager {\n    private static _instance: AlertManager;\n    private alertDiv: HTMLDivElement;\n    private alertTitle: HTMLHeadingElement;\n    private alertContent: HTMLParagraphElement;\n    private cancelButton: HTMLButtonElement;\n    private confirmButton: HTMLButtonElement;\n\n    private constructor() {\n        this.alertDiv = <HTMLDivElement>document.getElementById(ALERT_MODAL_ID);\n        this.alertTitle = <HTMLHeadingElement>document.getElementById(ALERT_TITLE);\n        this.alertContent = <HTMLParagraphElement>document.getElementById(ALERT_CONTENT);\n        this.cancelButton = <HTMLButtonElement>document.getElementById(ALERT_CANCEL);\n        this.confirmButton = <HTMLButtonElement>document.getElementById(ALERT_CONFRIM);\n    }\n\n    public static getInstance(): AlertManager {\n        if (!(AlertManager._instance)) {\n            AlertManager._instance = new AlertManager();\n        }\n        return AlertManager._instance;\n    }\n\n    public startAlert(listener: AlertListener, title: string, content: string, context?: any) {\n        this.alertTitle.innerHTML = title;\n        this.alertContent.innerHTML = content;\n        // @ts-ignore\n        this.alertDiv.classList.remove(ALERT_hideClass);\n        // @ts-ignore\n        this.alertDiv.classList.add(ALERT_showClass);\n\n        const confirmHandler = (event: MouseEvent) => {\n            logger(`Handling confirm event from alert`);\n            listener.completed({outcome: AlertType.confirmed, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click', confirmHandler);\n        }\n\n        const cancelHandler = (event: MouseEvent) => {\n            logger(`Handling cancel event from alert`);\n            listener.completed({outcome: AlertType.cancelled, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click', cancelHandler);\n        }\n\n        this.confirmButton.addEventListener('click', confirmHandler);\n        this.cancelButton.addEventListener('click', cancelHandler);\n    }\n\n}","import {View} from \"../view/interface/View\";\nimport {BasicElement, EXTRA_ACTION_ATTRIBUTE_NAME} from \"../ConfigurationTypes\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport debug from 'debug';\nimport {AbstractCollectionView} from \"../view/implementation/AbstractCollectionView\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst logger = debug('context-helper');\n\nexport type getIdentifier = (type: string, item: any) => string;\nexport type getDescription = (type: string, item: any) => string;\n\nexport type actionHandler = (event: MouseEvent) => void;\nexport type hasActionPermission = (actionName: string, type: string, item: any) => boolean;\n\nexport type ContextTypeAction = {\n    actionName: string,\n    displayName: string,\n    elementDefinition: BasicElement,\n    iconClasses?: string,\n    handler: actionHandler,\n    hasPermission?: hasActionPermission\n}\n\nexport type ContextDefinitionType = {\n    internalType: string,\n    displayName: string,\n    identifier: getIdentifier,\n    description: getDescription,\n    actions: ContextTypeAction[]\n}\n\nexport type ContextDefinition = {\n    source: string,\n    view?: View,\n    defaultType: ContextDefinitionType,\n    extraTypes?: ContextDefinitionType[]\n}\n\nexport type ContextDetails = {\n    source: string,\n    internalType: string,\n    displayName: string,\n    identifier: string,\n    description: string\n}\n\nexport enum TogglePlacement {\n    top,\n    bottom,\n    right,\n    left\n}\n\nconst defaultIdentifier = function (name: string, item: any) {\n    return '';\n}\n\n\nexport class ContextualInformationHelper {\n    private static _instance: ContextualInformationHelper;\n\n    private static SOURCE: string = 'context-source';\n    private static TYPE: string = 'context-type';\n    private static DISPLAYNAME: string = 'context-display-name';\n    private static IDENTIFIER: string = 'context-id';\n    private static DESCRIPTION: string = 'title';\n\n    private static BOOTSTRAP_TOGGLE = 'data-toggle';\n    private static BOOTSTRAP_PLACEMENT = 'data-placement'\n    private static BOOTSTRAP_TOOLTIP_VALUE = 'tooltip';\n    private static BOOTSTRAP_POPOVER_VALUE = 'popover';\n\n    private static BOOTSTRAP_TOGGLE_HTML = 'data-html';\n    private static BOOTSTRAP_TOGGLE_HTML_VALUE = 'true';\n\n\n    private static BOOTSTRAP_PLACEMENT_TOP = 'top'\n    private static BOOTSTRAP_PLACEMENT_BOTTOM = 'bottom'\n    private static BOOTSTRAP_PLACEMENT_RIGHT = 'right'\n    private static BOOTSTRAP_PLACEMENT_LEFT = 'left'\n    private registry: ContextDefinition[] = [];\n    private menuDivEl: HTMLDivElement | null = null;\n    private menuContentEl: HTMLUListElement | null = null;\n\n    private constructor() {\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        this.hideContextMenu = this.hideContextMenu.bind(this);\n    }\n\n    public static getInstance(): ContextualInformationHelper {\n        if (!(ContextualInformationHelper._instance)) {\n            ContextualInformationHelper._instance = new ContextualInformationHelper();\n        }\n        return ContextualInformationHelper._instance;\n    }\n\n    public onDocumentLoaded() {\n        // @ts-ignore\n        document.addEventListener('click', this.hideContextMenu);\n\n        this.menuDivEl = <HTMLDivElement | null>document.getElementById('contextmenu');\n        this.menuContentEl = <HTMLUListElement | null>document.getElementById('contextMenuItems');\n    }\n\n    public addContextFromView(view: View, internalType: string, displayName: string): ContextDefinition {\n        let context: ContextDefinition = this.ensureInRegistry(view.getName());\n        context.view = view;\n        context.defaultType.internalType = internalType;\n        context.defaultType.displayName = displayName;\n        context.defaultType.identifier = view.getItemId;\n        context.defaultType.description = view.getItemDescription;\n        return context;\n    }\n\n    public addContextToElement(source: string, type: string, item: any, element: HTMLElement, addTooltip: boolean = false, placement: TogglePlacement = TogglePlacement.bottom): void {\n        const context: ContextDefinition = this.ensureInRegistry(source);\n        element.setAttribute(ContextualInformationHelper.SOURCE, context.source);\n        element.setAttribute(ContextualInformationHelper.TYPE, context.defaultType.internalType);\n        element.setAttribute(ContextualInformationHelper.DISPLAYNAME, context.defaultType.displayName);\n        element.setAttribute(ContextualInformationHelper.IDENTIFIER, context.defaultType.identifier(type, item));\n        element.setAttribute(ContextualInformationHelper.DESCRIPTION, context.defaultType.description(type, item));\n        if (addTooltip) {\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE, ContextualInformationHelper.BOOTSTRAP_TOOLTIP_VALUE);\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML, ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML_VALUE);\n            switch (placement) {\n                case TogglePlacement.bottom: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_BOTTOM);\n                    break;\n                }\n                case TogglePlacement.top: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_TOP);\n                    break;\n                }\n                case TogglePlacement.left: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_LEFT);\n                    break;\n                }\n                case TogglePlacement.right: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_RIGHT);\n                    break;\n                }\n            }\n            // @ts-ignore\n            $('[data-toggle=\"tooltip\"]').tooltip({html: true});\n        }\n    }\n\n    public findContextFromEvent(event: Event): ContextDetails | null {\n        let result: ContextDetails | null = null;\n\n        if (event.target) {\n            let target = event.target;\n            // @ts-ignore\n            result = this.findContextFromElement(event.target);\n        }\n        return result;\n    }\n\n    public addActionToContext(context: ContextDefinition, actionName: string, displayName: string, handler: actionHandler, icon?: string, permissionCheck?: hasActionPermission) {\n        let action: ContextTypeAction = {\n            actionName: actionName,\n            displayName: displayName,\n            handler: handler,\n            hasPermission: permissionCheck,\n            elementDefinition: {\n                elementType: 'a',\n                elementAttributes: [{name: 'href', value: '#'}],\n                elementClasses: 'list-group-item list-group-item-action bg-dark text-white',\n            },\n            iconClasses: icon\n        };\n        this.addContextActionToContext(context, action);\n    }\n\n    public handleContextMenu(event: MouseEvent): any {\n        logger('Right click')\n        logger(event.target);\n        // are we over a context sensitive item?\n        // find a context if possible\n        // @ts-ignore\n        const context: ContextDetails | null = this.findContextFromElement(event.target);\n        logger(context);\n        if (context && this.buildContextMenu(context)) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.showContextMenu(event);\n            return false;\n        }\n\n        // otherwise let the default behaviour happen\n        return true;\n    }\n\n    private ensureInRegistry(source: string): ContextDefinition {\n        let result: ContextDefinition;\n        let foundIndex = this.registry.findIndex((context) => context.source === source);\n        if (foundIndex < 0) {\n            result = {\n                source: source,\n                defaultType: {\n                    internalType: '',\n                    displayName: '',\n                    identifier: defaultIdentifier,\n                    description: defaultIdentifier,\n                    actions: []\n                }\n            }\n            this.registry.push(result);\n        } else {\n            result = this.registry[foundIndex];\n        }\n        return result;\n    }\n\n    private findContextFromElement(element: HTMLElement): ContextDetails | null {\n        // do we have context information in this element?\n        let result: ContextDetails | null = null;\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n\n            // @ts-ignore\n            result = {source: source, internalType: type, displayName: name, identifier: id, description: desc};\n        } else {\n            const parent = element.parentElement;\n            if (parent) {\n                result = this.findContextFromElement(parent);\n            }\n        }\n        return result;\n    }\n\n    private findAllContextsFromElement(element: HTMLElement, contexts: ContextDetails[]): void {\n        // do we have context information in this element?\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n            // @ts-ignore\n            if (type && name && id && desc) {\n                let result: ContextDetails = {\n                    source: source,\n                    internalType: type,\n                    displayName: name,\n                    identifier: id,\n                    description: desc\n                };\n                contexts.push(result);\n            }\n        }\n        const parent = element.parentElement;\n        if (parent) {\n            this.findAllContextsFromElement(parent, contexts);\n        }\n    }\n\n    private addContextActionToContext(context: ContextDefinition, action: ContextTypeAction) {\n        logger(`Adding action to context ${context.source}`);\n        logger(action);\n        context.defaultType.actions.push(action);\n    }\n\n    private buildContextMenu(context: ContextDetails): boolean {\n        logger(`building context menu`);\n        let result = false;\n\n        // find the context for these details\n        const contextDef: ContextDefinition | null = this.ensureInRegistry(context.source);\n\n        let selectedItem: any | null = null;\n\n        if (contextDef && contextDef.view && (contextDef.view instanceof AbstractCollectionView)) {\n            logger(`collection view context - finding item with identifier ${context.identifier}`);\n            let collectionView = <CollectionView>(contextDef.view);\n            let compareWith = {};\n            // @ts-ignore\n            compareWith[collectionView.getCollectionUIConfig().keyId] = context.identifier;\n\n            selectedItem = collectionView.getItemInNamedCollection(context.internalType, compareWith);\n        }\n\n        logger(`found item for context menu`);\n        logger(selectedItem);\n\n        if (contextDef.defaultType.actions.length > 0) {\n            if (this.menuContentEl && this.menuContentEl) {\n                browserUtil.removeAllChildren(this.menuContentEl);\n\n                contextDef.defaultType.actions.forEach((action) => {\n                    logger('Adding action');\n                    logger(action);\n\n                    if ((selectedItem && action.hasPermission && action.hasPermission(action.actionName, contextDef.defaultType.internalType, selectedItem)) ||\n                        !(action.hasPermission)) {\n                        let itemEl = document.createElement(action.elementDefinition.elementType);\n                        if (itemEl && this.menuContentEl) {\n                            browserUtil.addAttributes(itemEl, action.elementDefinition.elementAttributes);\n                            browserUtil.addRemoveClasses(itemEl, action.elementDefinition.elementClasses);\n\n                            itemEl.setAttribute(ContextualInformationHelper.SOURCE, context.source);\n                            itemEl.setAttribute(ContextualInformationHelper.TYPE, context.internalType);\n                            itemEl.setAttribute(ContextualInformationHelper.DISPLAYNAME, context.displayName);\n                            itemEl.setAttribute(ContextualInformationHelper.IDENTIFIER, context.identifier);\n                            itemEl.setAttribute(ContextualInformationHelper.DESCRIPTION, context.description);\n                            itemEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, action.actionName);\n\n                            itemEl.addEventListener('click', (event: MouseEvent) => {\n                                this.hideContextMenu(event);\n                                action.handler(event);\n                            });\n                            itemEl.innerHTML = `${action.displayName}`;\n                            if (action.iconClasses) {\n                                itemEl.innerHTML += `&nbsp;&nbsp;<i class=\"${action.iconClasses}\"></i>`;\n                            }\n                            this.menuContentEl.appendChild(itemEl);\n                            logger('new menu element is ');\n                            logger(this.menuContentEl);\n                            result = true;\n                        }\n                    }\n\n\n                });\n            }\n        } else {\n            logger(`building context menu - no actions for ${context.source}`);\n        }\n        return result;\n    }\n\n    private hideContextMenu(event: MouseEvent): any {\n        if (this.menuDivEl) {\n            browserUtil.addRemoveClasses(this.menuDivEl, 'd-none');\n        }\n    }\n\n    private showContextMenu(event: MouseEvent) {\n        if (this.menuDivEl) {\n            logger(`Showing context menu at ${event.pageX},${event.pageY}`);\n            browserUtil.addRemoveClasses(this.menuDivEl, 'd-none', false);\n            this.menuDivEl.style.left = event.pageX + 'px';\n            this.menuDivEl.style.top = event.pageY + 'px';\n        }\n    }\n\n\n}","import {FieldValueOptions, FieldValueOptionsListener, ValueOption} from \"../../model/CommonTypes\";\n\nexport class SimpleValueDataSource implements FieldValueOptions { // static value list\n    private options: ValueOption[];\n    private listeners: FieldValueOptionsListener[];\n\n    constructor(options: ValueOption[]) {\n        this.options = options;\n        this.listeners = [];\n    }\n\n    public addValueOption(name: string, value: string) {\n        this.options.push({name, value});\n        this.listeners.forEach((listener) => listener.optionsChanged(this.options));\n    }\n\n    addListener(listener: FieldValueOptionsListener): void {\n        this.listeners.push(listener);\n    }\n\n    getOptions(): ValueOption[] {\n        return this.options;\n    }\n\n}","import {AbstractView} from \"../implementation/AbstractView\";\nimport {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType\n} from \"../../ConfigurationTypes\";\nimport {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport debug from \"debug\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {AlertEvent, AlertType} from \"../../alert/AlertListener\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\n\nconst logger = debug('collection-view-event-handler-delegate');\n\nexport type ItemContext = {\n    itemId: string,\n    dataSource: string;\n}\n\n\nexport class CollectionViewEventHandlerDelegate implements CollectionViewEventDelegate {\n    protected view: CollectionView;\n    protected selectedItem: any | null = null;\n    protected eventForwarder: CollectionViewListenerForwarder;\n\n    constructor(view: CollectionView, forwarder: CollectionViewListenerForwarder) {\n        this.view = view;\n        this.eventForwarder = forwarder;\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    getDragData(event: DragEvent): any {\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n\n        let selectedItem = {};\n\n        selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n\n        if (selectedItem) {\n            // @ts-ignore\n            selectedItem[DRAGGABLE_TYPE] = this.view.getCollectionUIConfig().detail.drag?.type;\n            // @ts-ignore\n            selectedItem[DRAGGABLE_FROM] = this.view.getCollectionUIConfig().detail.drag?.from;\n        }\n        return selectedItem;\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        logger(`view ${this.view.getName()}: drag start`);\n        logger(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        logger(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n        (<CollectionViewListenerForwarder>(this.eventForwarder)).itemDragStarted(this.view, data);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        logger(selectedItem);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting selected from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                (<CollectionViewListenerForwarder>(this.eventForwarder)).itemSelected(this.view, selectedItem);\n            }\n        }\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldDelete = this.eventForwarder.canDeleteItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource} - ${shouldDelete}`);\n            if (shouldDelete) {\n                // do we need to confirm?\n                if (this.view.getCollectionUIConfig().detail.quickDelete) {\n                    this.selectedItem = null;\n                    this.eventForwarder.itemDeleted(this.view, selectedItem);\n                } else {\n                    AlertManager.getInstance().startAlert(this, this.view.getName(), `Are you sure you want to delete this information?`, selectedItem);\n                }\n\n            }\n        }\n    }\n\n    eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                this.eventForwarder.itemAction(this.view, actionName, selectedItem);\n            }\n        }\n    }\n\n    completed(event: AlertEvent): void {\n        logger(event.context);\n        if (event.outcome === AlertType.confirmed) {\n            this.selectedItem = null;\n            this.eventForwarder.itemDeleted(this.view, event.context);\n        }\n    }\n\n    protected getItemContext(event: Event): ItemContext {\n        // @ts-ignore\n        const itemId = event.target.getAttribute(this.view.getCollectionUIConfig().keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        let context: ItemContext = {\n            itemId: itemId,\n            dataSource: dataSource\n        }\n\n        return context;\n    }\n\n}","import {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {ViewListenerForwarder} from \"./ViewListenerForwarder\";\n\nexport class CollectionViewListenerForwarder extends ViewListenerForwarder implements CollectionViewListener {\n    protected collectionViewListeners: CollectionViewListener[];\n\n\n    public constructor() {\n        super();\n        this.collectionViewListeners = [];\n    }\n\n    public addListener(listener: CollectionViewListener) {\n        super.addListener(listener);\n        this.collectionViewListeners.push(listener);\n    }\n\n\n    itemDragStarted(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDragStarted(view, selectedItem));\n        }\n    }\n\n    itemSelected(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemSelected(view, selectedItem));\n        }\n    }\n\n    itemDeselected(view: CollectionView, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDeselected(view, deselectedItem));\n        }\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => {\n                if (!(listener.canSelectItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n}","import {ViewListener} from \"../interface/ViewListener\";\nimport {View} from \"../interface/View\";\n\nexport class ViewListenerForwarder {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener: ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view, selectedItem));\n        }\n    }\n\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view, actionName, selectedItem));\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.canDeleteItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view, droppedItem));\n        }\n    }\n}\n","import {CollectionView} from \"../interface/CollectionView\";\nimport {AbstractView} from \"./AbstractView\";\nimport {CollectionViewDOMConfig, Modifier} from \"../../ConfigurationTypes\";\nimport {isSame} from \"../../../util/EqualityFunctions\";\nimport debug from \"debug\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionViewListenerForwarder} from \"../delegate/CollectionViewListenerForwarder\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionViewEventHandlerDelegate} from \"../delegate/CollectionViewEventHandlerDelegate\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\nconst avLogger = debug('collection-view-ts');\nconst avLoggerDetails = debug('collection-view-ts-detail');\n\n\nexport abstract class AbstractCollectionView extends AbstractView implements CollectionView, CollectionViewEventHandler {\n    protected collectionName: string;\n    protected renderer: CollectionViewRenderer | null;\n    protected selectedItem: any | null;\n    protected collectionUIConfig: CollectionViewDOMConfig;\n    protected eventHandlerDelegate: CollectionViewEventDelegate\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, collectionName: string) {\n        super(uiConfig.viewConfig);\n        this.collectionUIConfig = uiConfig;\n        this.collectionName = collectionName;\n        this.renderer = null;\n        let forwarder = new CollectionViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegate(this, forwarder);\n\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        this.eventHandlerDelegate.eventStartDrag(event);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventClickItem(event);\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventDeleteClickItem(event);\n    }\n\n    eventActionClicked(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventActionClicked(event);\n    }\n\n    public getCollectionName(): string {\n        return this.collectionName;\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from, item);\n    }\n\n    abstract getItemDescription(from: string, item: any): string;\n    abstract hasActionPermission(actionName:string, from:string, item:any):boolean;\n\n    getCollectionUIConfig(): CollectionViewDOMConfig {\n        return this.collectionUIConfig;\n    }\n\n    addEventCollectionListener(listener: CollectionViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        super.setContainedBy(container);\n        if (this.uiConfig.drop) {\n            avLoggerDetails(`view ${this.getName()}: Adding dragover events to ${this.uiConfig.dataSourceId}`)\n            avLoggerDetails(container);\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        if (this.renderer) this.renderer.onDocumentLoaded();\n    }\n\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n    }\n\n    abstract getIdForItemInNamedCollection(name: string, item: any): string;\n\n    abstract getItemInNamedCollection(name: string, compareWith: any): any;\n\n    abstract renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void;\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSame(item1, item2);\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    public getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        return '';\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        if (this.viewEl && this.renderer) {\n            this.renderer.setDisplayElementsForCollectionInContainer(this.viewEl, name, newState);\n        }\n    }\n\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return true;\n    }\n\n    setRenderer(renderer: CollectionViewRenderer): void {\n        this.renderer = renderer;\n    }\n\n\n}\n","import {DRAGGABLE_FROM, DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {View} from \"../interface/View\";\nimport debug from \"debug\";\nimport {ViewListenerForwarder} from \"../delegate/ViewListenerForwarder\";\nimport {ViewListener} from \"../interface/ViewListener\";\n\nconst avLogger = debug('abstract-view-ts');\nconst avLoggerDetails = debug('abstract-view-ts-detail');\n\n\nexport abstract class AbstractView implements View {\n\n    public static DATA_SOURCE = 'data-source';\n\n\n    protected uiConfig: ViewDOMConfig;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement | null = null;\n    protected viewEl: HTMLElement | null;\n\n\n    protected constructor(uiConfig: ViewDOMConfig) {\n        this.uiConfig = uiConfig;\n        this.viewEl = null;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n    }\n\n    getItemId(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getItemDescription(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        throw new Error(\"Not implemented\");\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        return this.uiConfig;\n    }\n\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        this.eventForwarder.documentLoaded(this);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n    }\n\n\n    getName(): string {\n        return this.uiConfig.dataSourceId;\n    }\n\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    getDataSourceKeyId(): string {\n        return AbstractView.DATA_SOURCE;\n    }\n\n    abstract hidden(): void\n\n    abstract show(): void;\n\n    abstract render(): void;\n\n    public handleDrop(event: Event): void {\n        avLogger(`view ${this.getName()}: drop event`);\n        avLoggerDetails(event.target);\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`view ${this.getName()}: drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.drop) {\n            const acceptType = (this.uiConfig.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`view ${this.getName()}: accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this, draggedObject);\n                }\n            }\n        }\n    }\n\n}\n","import {Attribute} from \"../ui/ConfigurationTypes\";\n\nclass BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string, isAdding: boolean = true): void {\n        const classes = classesText.split(' ');\n        classes.forEach((classValue) => {\n            if (classValue.trim().length > 0) {\n                if (isAdding) {\n                    element.classList.add(classValue);\n                } else {\n                    element.classList.remove(classValue);\n                }\n            }\n        });\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n    removeAttributes(element: HTMLElement, attributes: string[]) {\n        attributes.forEach((attribute: string) => {\n            element.removeAttribute(attribute);\n        });\n    }\n\n    allElementsFromPoint(x: number, y: number) {\n        var element, elements = [];\n        var old_visibility = [];\n        while (true) {\n            element = document.elementFromPoint(x, y);\n            if (!element || element === document.documentElement) {\n                break;\n            }\n            elements.push(element);\n            // @ts-ignore\n            old_visibility.push(element.style.visibility);\n            // @ts-ignore\n            element.style.visibility = 'hidden'; // Temporarily hide the element (without changing the layout)\n        }\n        for (var k = 0; k < elements.length; k++) {\n            // @ts-ignore\n            elements[k].style.visibility = old_visibility[k];\n        }\n        elements.reverse();\n        return elements;\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1: any, item2: any) => boolean;\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1: any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.ts\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["localStorage","debug","console","logger","App","Controller","window","getInstance","getCurrentUser","onDocumentLoad","document","ContextualInformationHelper","$","Decorator","STATE_NAMES","users","chatLogs","exerciseTypes","workouts","recentUserSearches","API_Config","login","NAVIGATION","showMyWorkouts","userSearchId","exerciseTypesId","chatId","workoutSummary","currentWorkout","logout","DRAGGABLE","typeUser","typeExerciseType","fromUserSearch","fromFavourites","fromExerciseTypes","VIEW_NAME","blockedUsers","chatLog","favouriteUsers","userSearch","exercises","VIEW_CONTAINER","exerciseTypeDetail","currentWorkoutDetail","exerciseDropZone","BUTTON","createNewExerciseType","completeWorkout","INPUT","workoutName","cLogger","cLoggerDetail","connectToApplication","restSM","RESTApiStateManager","stateName","serverURL","api","isActive","idField","aggregateSM","AggregateStateManager","memorySM","MemoryBufferStateManager","asyncSM","onDocumentLoaded","socketListerDelegate","SocketManager","chatManager","ChatManager","NotificationController","DownloadManager","getStateManager","getListenerName","isLoggedIn","getLoggedInUserId","result","loggedInUser","getLoggedInUsername","handleMessage","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","handleShowChat","create","delete","update","addExerciseToCurrentWorkout","copyOfExercise","v4","addWorkoutExercisesToCurrentWorkout","workout","setupDataObjectDefinitions","exerciseTypeDefinition","ObjectDefinitionRegistry","BasicObjectDefinitionFactory","FieldType","name","value","workoutDefinition","exercisesFieldDefinition","KeyType","getServerAPIURL","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","message","changeUser","_id","user","username","stateObj","NotificationManager","NotificationType","flogger","vlogger","glogger","rlogger","BasicFieldOperations","dateRegex","emailRegex","shortTimeRegex","timeRegex","dateTimeRegex","basicPasswordRegex","integerRegex","floatRegexp","booleanRegexp","durationRegexp","setSubElements","formatValue","field","moment","currentValue","parseInt","parsed","parseFloat","isNaN","isValidValue","response","isValid","resetOnFailure","renderValue","newValue","generate","index","fieldValue","id","FIELD_ID","FIELD_CreatedBy","FIELD_ModifiedBy","FIELD_CreatedOn","FIELD_ModifiedOn","FIELD_CreatedBy_Desc","FIELD_ModifiedBy_Desc","FIELD_CreatedOn_Desc","FIELD_ModifiedOn_Desc","dataObjDef","order","fieldId","fieldDef","displayOrder","createModifierFields","idFieldName","objDef","displayName","fields","ops","fieldType","isKey","idType","type","mandatory","generator","onModify","onCreation","isMandatory","description","datasource","displayOnly","definition","fieldOps","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","query","fetch","apiFetchJSONWithPost","request","JSON","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","fetchJSON","callback","apiUtil","CallbackRegistry","callbacks","fn","defaultFn","foundIndex","processOfflineItems","OfflineManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","url","RequestType","params","variables","callbackId","associatedStateName","state","addQLMutationRequest","mutation","addApiRequest","wasOffline","requestId","jsonRequest","managerRequest","originalRequest","queueType","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","callbackForQueueRequest","queueId","element","httpStatus","initiateFetchForQueueItem","item","DB_NAME","OBJECT_STORE","indexedDB","keyField","Poller","offlineResults","INTERVAL_DEFAULT","URL_CALL","interval","isPollingBool","startPolling","delay","setInterval","isPolling","stopPolling","clearInterval","BootstrapNotification","Notification","show","topOffset","duration","containerId","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","setTimeout","NotificationFactory","createNotification","notificationFactory","context","info","notification","notificationNode","parentEl","smLogger","AbstractStateManager","forceSaves","managerName","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","stateEventType","StateChanged","previousObjValue","addChangeListenerForName","stateObjForName","getStateByName","stateValueObj","setStateByName","informListeners","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","updateItemInState","aggLogger","filters","mWF","manager","stateManager","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","filter","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","IndexedDBStateManager","hasCompletedRun","collection","setCompletedRun","forceResetForGet","initialise","runsComplete","openDB","upgrade","collections","db","keyPath","autoIncrement","blocked","blocking","terminated","saveWithCollectionKey","transaction","objectStore","addNewItemToCollection","removeItemFromCollection","updateItemInCollection","Error","stateObjectForName","getWithCollectionKey","savedResults","cursor","getConfiguredStateNames","getKeyFieldForKey","checkForObjectStore","saveItemsToCollection","saveData","removeAllItemsFromCollectionKey","callbackForRemoveItem","callbackForUpdateItem","callbackForGetItems","callbackForAddItem","msManager","valueIndex","FUNCTION_ID_ADD_ITEM","FUNCTION_ID_REMOVE_ITEM","FUNCTION_ID_UPDATE_ITEM","FUNCTION_ID_GET_ITEMS","configuration","results","config","identifier","status","StateChangedDelegate","suppressEventEmits","changeListenersForName","listener","ensureListenerSetupForName","listenersNameArrayPair","listeners","DRAGGABLE_KEY_ID","DRAGGABLE_TYPE","DRAGGABLE_FROM","EXTRA_ACTION_ATTRIBUTE_NAME","Modifier","SidebarLocation","RowPosition","SCREEN_WIDTH_LARGE","SCREEN_WIDTH_MEDIUM","SCREEN_WIDTH_SMALL","AlertType","ALERT_MODAL_ID","ALERT_TITLE","ALERT_CONTENT","ALERT_CANCEL","ALERT_CONFRIM","ALERT_hideClass","ALERT_showClass","AlertManager","confirmHandler","outcome","event","cancelHandler","TogglePlacement","defaultIdentifier","SOURCE","TYPE","DISPLAYNAME","IDENTIFIER","DESCRIPTION","BOOTSTRAP_TOGGLE","BOOTSTRAP_PLACEMENT","BOOTSTRAP_TOOLTIP_VALUE","BOOTSTRAP_POPOVER_VALUE","BOOTSTRAP_TOGGLE_HTML","BOOTSTRAP_TOGGLE_HTML_VALUE","BOOTSTRAP_PLACEMENT_TOP","BOOTSTRAP_PLACEMENT_BOTTOM","BOOTSTRAP_PLACEMENT_RIGHT","BOOTSTRAP_PLACEMENT_LEFT","registry","menuDivEl","menuContentEl","view","addTooltip","placement","bottom","html","target","action","actionName","handler","hasPermission","elementDefinition","elementType","elementAttributes","elementClasses","iconClasses","icon","source","defaultType","internalType","actions","desc","parent","contexts","contextDef","selectedItem","collectionView","compareWith","browserUtil","itemEl","SimpleValueDataSource","addListener","getOptions","CollectionViewEventHandlerDelegate","getDragData","itemId","dataSource","eventStartDrag","data","eventClickItem","shouldSelect","eventDeleteClickItem","shouldDelete","eventActionClicked","completed","AbstractView","CollectionViewListenerForwarder","itemDragStarted","itemSelected","itemDeselected","canSelectItem","ViewListenerForwarder","itemDeleted","documentLoaded","itemAction","canDeleteItem","hideRequested","showRequested","itemDropped","avLogger","avLoggerDetails","AbstractCollectionView","uiConfig","forwarder","getItemId","getCollectionUIConfig","addEventCollectionListener","setContainedBy","container","renderBackgroundForItemInNamedCollection","compareItemsForEquality","isSame","getModifierForItemInNamedCollection","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","updateViewForNamedCollection","hasPermissionToDeleteItemInNamedCollection","hasPermissionToUpdateItemInNamedCollection","hasPermissionToActionItemInNamedCollection","setRenderer","DATA_SOURCE","getItemDescription","hasActionPermission","getUIConfig","addEventListener","getName","hasChanged","getDataSourceKeyId","draggedObjectJSON","draggedObject","droppedObjectType","droppedObjectFrom","acceptType","objectType","acceptFrom","from","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classes","classesText","classValue","addAttributes","attributes","attribute","removeAttributes","allElementsFromPoint","elements","old_visibility","k","item1","item2"],"sourceRoot":""}