{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/./src/framework/ui/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/framework/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractView.ts","webpack://template-feo-react-babel/./src/framework/util/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/alert/AlertListener.ts","webpack://template-feo-react-babel/./src/framework/ui/alert/AlertManager.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewEventHandlerDelegate.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractCollectionView.ts","webpack://template-feo-react-babel/./src/framework/ui/context/ContextualInformationHelper.ts","webpack://template-feo-react-babel/./src/framework/state/StateManager.ts","webpack://template-feo-react-babel/./src/framework/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/framework/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/framework/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/framework/network/Types.ts","webpack://template-feo-react-babel/./src/app/AppTypes.ts","webpack://template-feo-react-babel/./src/framework/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/framework/network/CallbackRegistry.ts","webpack://template-feo-react-babel/./src/framework/network/Poller.ts","webpack://template-feo-react-babel/./src/framework/state/IndexedDBStateManager.ts","webpack://template-feo-react-babel/./src/framework/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/framework/notification/Notification.ts","webpack://template-feo-react-babel/./src/framework/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/framework/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/framework/network/OfflineManager.ts","webpack://template-feo-react-babel/./src/framework/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/framework/state/RESTApiStateManager.ts","webpack://template-feo-react-babel/./src/framework/model/DataObjectTypeDefs.ts","webpack://template-feo-react-babel/./src/framework/security/SecurityManager.ts","webpack://template-feo-react-babel/./src/framework/model/BasicFieldOperations.ts","webpack://template-feo-react-babel/./src/framework/model/BasicObjectDefinitionFactory.ts","webpack://template-feo-react-babel/./src/framework/ui/form/FormUITypeDefs.ts","webpack://template-feo-react-babel/./src/framework/model/ObjectDefinitionRegistry.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/SimpleValueDataSource.ts","webpack://template-feo-react-babel/./src/framework/model/DefaultValueGenerator.ts","webpack://template-feo-react-babel/./src/app/Controller.ts","webpack://template-feo-react-babel/./src/framework/ui/form/FormListener.ts","webpack://template-feo-react-babel/./src/framework/ui/form/validation/ValidationTypeDefs.ts","webpack://template-feo-react-babel/./src/framework/ui/form/validation/ValidationManager.ts","webpack://template-feo-react-babel/./src/framework/ui/form/AbstractForm.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/RBGFieldOperations.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/BootstrapFormConfigHelper.ts","webpack://template-feo-react-babel/./src/framework/ui/form/event-handlers/ValidationEventHandler.ts","webpack://template-feo-react-babel/./src/framework/ui/form/event-handlers/EditingEventListener.ts","webpack://template-feo-react-babel/./src/framework/ui/form/factory/FieldInputElementFactory.ts","webpack://template-feo-react-babel/./src/framework/ui/form/factory/FormElementFactory.ts","webpack://template-feo-react-babel/./src/framework/ui/form/event-handlers/RenderingEventListener.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/AbstractField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/TextAreaField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/RadioButtonGroupField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/SelectField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/InputField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/BasicFormImplementation.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/FormDetailViewRenderer.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/DetailViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/DetailViewImplementation.ts","webpack://template-feo-react-babel/./src/framework/model/DataObjectController.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/LinkedCollectionDetailController.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractStatefulCollectionView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/ListViewRendererUsingContext.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewEventHandlerDelegateUsingContext.ts","webpack://template-feo-react-babel/./src/app/view/TransactionsView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/DefaultPermissionChecker.ts","webpack://template-feo-react-babel/./src/app/view/TransactionsCompositeView.ts","webpack://template-feo-react-babel/./src/app/renderer/BudgetSummaryRenderer.ts","webpack://template-feo-react-babel/./src/app/view/BudgetSummaryView.ts","webpack://template-feo-react-babel/./src/App.ts","webpack://template-feo-react-babel//Users/jimsharples/Development/pwa-budget-tracker/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","export type Attribute = {\n    name: string,\n    value: string\n}\n\nexport type ModifierClasses = {\n    normal: string,\n    inactive: string,\n    active: string,\n    warning: string\n}\n\nexport type IconClasses = {\n    normal: string,\n    inactive?: string,\n    active?: string,\n    warning?: string,\n}\n\nexport type BasicButtonElement = {\n    buttonClasses: string,\n    buttonText?: string,\n    iconClasses?: string,\n    attributes?: Attribute[]\n\n}\n\nexport type BasicElement = {\n    elementType: string,\n    elementAttributes?: Attribute[],\n    elementClasses: string,\n    innerHTML?: string\n}\n\nexport const DRAGGABLE_KEY_ID: string = 'text/plain';\nexport const DRAGGABLE_TYPE: string = 'draggedType';\nexport const DRAGGABLE_FROM: string = 'draggedFrom';\n\nexport type Draggable = {\n    type: string,\n    from: string\n}\n\nexport type Droppable = {\n    acceptTypes: string[];\n    acceptFrom?: string[];\n}\n\nexport type getIcons = (name: string, item: any) => string[];\n\nexport type ContentDetail = {\n    containerClasses: string,\n    textElementType: string,\n    textElementClasses: string,\n    select: boolean,\n    quickDelete?: boolean,\n    icons?: getIcons,\n    badge?: BasicElement,\n    delete?: BasicButtonElement,\n    drag?: Draggable,\n    background?: BasicElement,\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME: string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name: string,\n    buttonClasses: string,\n    buttonText?: string,\n    iconClasses: string,\n    attributes?: Attribute[]\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport enum KeyType {\n    number,\n    string,\n    boolean,\n    collection\n}\n\nexport type ViewDOMConfig = {\n    resultsContainerId: string,\n    dataSourceId: string,\n    drop?: Droppable\n}\n\nexport type CollectionViewDOMConfig = {\n    viewConfig: ViewDOMConfig,\n    resultsElementType: string,\n    resultsElementAttributes?: [Attribute],\n    resultsClasses: string,\n    keyId: string,\n    keyType: KeyType,\n    modifiers?: ModifierClasses,\n    icons?: IconClasses,\n    detail: ContentDetail,\n    extraActions?: ExtraAction[],\n}\n\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\n\nexport type SidebarPrefs = {\n    id: string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId: string\n}\n\nexport type ViewPrefs = {\n    sidebar?: SidebarPrefs\n}\n\nexport enum RowPosition {\n    first,\n    last\n}\n\nexport type CarouselDOMConfig = {\n    itemsPerRow: {\n        small: number,\n        medium: number,\n        large: number,\n        xlarge: number,\n    },\n    rowContainer: BasicElement,\n    activeRow: BasicElement,\n    activeRowPosition: RowPosition,\n    row: BasicElement,\n    multipleItemsPerRowContainer?: BasicElement,\n    actionContainer: BasicElement,\n    collectionConfig: CollectionViewDOMConfig\n}\n\nexport const SCREEN_WIDTH_LARGE = 992;\nexport const SCREEN_WIDTH_MEDIUM = 769;\nexport const SCREEN_WIDTH_SMALL = 415;\n\n\n","import {Attribute} from \"../ui/ConfigurationTypes\";\n\nclass BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement, offset:number = 100): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + offset;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement,offset:number = 100): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + offset;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string, isAdding: boolean = true): void {\n        const classes = classesText.split(' ');\n        classes.forEach((classValue) => {\n            if (classValue.trim().length > 0) {\n                if (isAdding) {\n                    element.classList.add(classValue);\n                } else {\n                    element.classList.remove(classValue);\n                }\n            }\n        });\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n    removeAttributes(element: HTMLElement, attributes: string[]) {\n        attributes.forEach((attribute: string) => {\n            element.removeAttribute(attribute);\n        });\n    }\n\n    allElementsFromPoint(x: number, y: number) {\n        var element, elements = [];\n        var old_visibility = [];\n        while (true) {\n            element = document.elementFromPoint(x, y);\n            if (!element || element === document.documentElement) {\n                break;\n            }\n            elements.push(element);\n            // @ts-ignore\n            old_visibility.push(element.style.visibility);\n            // @ts-ignore\n            element.style.visibility = 'hidden'; // Temporarily hide the element (without changing the layout)\n        }\n        for (var k = 0; k < elements.length; k++) {\n            // @ts-ignore\n            elements[k].style.visibility = old_visibility[k];\n        }\n        elements.reverse();\n        return elements;\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","import {ViewListener} from \"../interface/ViewListener\";\nimport {View} from \"../interface/View\";\n\nexport class ViewListenerForwarder {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener: ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view, selectedItem));\n        }\n    }\n\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view, actionName, selectedItem));\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.canDeleteItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view, droppedItem));\n        }\n    }\n}\n","import {DRAGGABLE_FROM, DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {View} from \"../interface/View\";\nimport debug from \"debug\";\nimport {ViewListenerForwarder} from \"../delegate/ViewListenerForwarder\";\nimport {ViewListener} from \"../interface/ViewListener\";\n\nconst avLogger = debug('abstract-view-ts');\nconst avLoggerDetails = debug('abstract-view-ts-detail');\n\n\nexport abstract class AbstractView implements View {\n\n    public static DATA_SOURCE = 'data-source';\n\n\n    protected uiConfig: ViewDOMConfig;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement | null = null;\n    protected viewEl: HTMLElement | null;\n\n\n    protected constructor(uiConfig: ViewDOMConfig) {\n        this.uiConfig = uiConfig;\n        this.viewEl = null;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n    }\n\n    getItemId(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getItemDescription(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        throw new Error(\"Not implemented\");\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        return this.uiConfig;\n    }\n\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        this.eventForwarder.documentLoaded(this);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n    }\n\n\n    getName(): string {\n        return this.uiConfig.dataSourceId;\n    }\n\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    getDataSourceKeyId(): string {\n        return AbstractView.DATA_SOURCE;\n    }\n\n    abstract hidden(): void\n\n    abstract show(): void;\n\n    abstract render(): void;\n\n    public handleDrop(event: Event): void {\n        avLogger(`view ${this.getName()}: drop event`);\n        avLoggerDetails(event.target);\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`view ${this.getName()}: drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.drop) {\n            const acceptType = (this.uiConfig.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`view ${this.getName()}: accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this, draggedObject);\n                }\n            }\n        }\n    }\n\n}\n","export type equalityFunction = (item1: any, item2: any) => boolean;\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1: any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","import {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {ViewListenerForwarder} from \"./ViewListenerForwarder\";\n\nexport class CollectionViewListenerForwarder extends ViewListenerForwarder implements CollectionViewListener {\n    protected collectionViewListeners: CollectionViewListener[];\n\n\n    public constructor() {\n        super();\n        this.collectionViewListeners = [];\n    }\n\n    public addListener(listener: CollectionViewListener) {\n        super.addListener(listener);\n        this.collectionViewListeners.push(listener);\n    }\n\n\n    itemDragStarted(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDragStarted(view, selectedItem));\n        }\n    }\n\n    itemSelected(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemSelected(view, selectedItem));\n        }\n    }\n\n    itemDeselected(view: CollectionView, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDeselected(view, deselectedItem));\n        }\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => {\n                if (!(listener.canSelectItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n}","export enum AlertType {\n    cancelled,\n    confirmed\n}\n\nexport type AlertEvent = {\n    outcome: AlertType,\n    context?: any\n}\n\nexport interface AlertListener {\n    completed(event: AlertEvent): void;\n}","import {AlertListener, AlertType} from \"./AlertListener\";\nimport debug from 'debug';\n\nconst ALERT_MODAL_ID = 'alert';\nconst ALERT_TITLE = 'alert-title';\nconst ALERT_CONTENT = 'alert-content';\nconst ALERT_CANCEL = 'alert-cancel';\nconst ALERT_CONFRIM = 'alert-confirm';\n\nconst ALERT_hideClass = \"d-none\";\nconst ALERT_showClass = \"d-block\";\n\nconst logger = debug('alert');\n\nexport class AlertManager {\n    private static _instance: AlertManager;\n    private alertDiv: HTMLDivElement;\n    private alertTitle: HTMLHeadingElement;\n    private alertContent: HTMLParagraphElement;\n    private cancelButton: HTMLButtonElement;\n    private confirmButton: HTMLButtonElement;\n\n    private constructor() {\n        this.alertDiv = <HTMLDivElement>document.getElementById(ALERT_MODAL_ID);\n        this.alertTitle = <HTMLHeadingElement>document.getElementById(ALERT_TITLE);\n        this.alertContent = <HTMLParagraphElement>document.getElementById(ALERT_CONTENT);\n        this.cancelButton = <HTMLButtonElement>document.getElementById(ALERT_CANCEL);\n        this.confirmButton = <HTMLButtonElement>document.getElementById(ALERT_CONFRIM);\n    }\n\n    public static getInstance(): AlertManager {\n        if (!(AlertManager._instance)) {\n            AlertManager._instance = new AlertManager();\n        }\n        return AlertManager._instance;\n    }\n\n    public startAlert(listener: AlertListener, title: string, content: string, context?: any) {\n        this.alertTitle.innerHTML = title;\n        this.alertContent.innerHTML = content;\n        // @ts-ignore\n        this.alertDiv.classList.remove(ALERT_hideClass);\n        // @ts-ignore\n        this.alertDiv.classList.add(ALERT_showClass);\n\n        const confirmHandler = (event: MouseEvent) => {\n            logger(`Handling confirm event from alert`);\n            listener.completed({outcome: AlertType.confirmed, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click', confirmHandler);\n        }\n\n        const cancelHandler = (event: MouseEvent) => {\n            logger(`Handling cancel event from alert`);\n            listener.completed({outcome: AlertType.cancelled, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click', cancelHandler);\n        }\n\n        this.confirmButton.addEventListener('click', confirmHandler);\n        this.cancelButton.addEventListener('click', cancelHandler);\n    }\n\n}","import {AbstractView} from \"../implementation/AbstractView\";\nimport {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType\n} from \"../../ConfigurationTypes\";\nimport {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport debug from \"debug\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {AlertEvent, AlertType} from \"../../alert/AlertListener\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\n\nconst logger = debug('collection-view-event-handler-delegate');\n\nexport type ItemContext = {\n    itemId: string,\n    dataSource: string;\n}\n\n\nexport class CollectionViewEventHandlerDelegate implements CollectionViewEventDelegate {\n    protected view: CollectionView;\n    protected selectedItem: any | null = null;\n    protected eventForwarder: CollectionViewListenerForwarder;\n\n    constructor(view: CollectionView, forwarder: CollectionViewListenerForwarder) {\n        this.view = view;\n        this.eventForwarder = forwarder;\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    getDragData(event: DragEvent): any {\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n\n        let selectedItem = {};\n\n        selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n\n        if (selectedItem) {\n            // @ts-ignore\n            selectedItem[DRAGGABLE_TYPE] = this.view.getCollectionUIConfig().detail.drag?.type;\n            // @ts-ignore\n            selectedItem[DRAGGABLE_FROM] = this.view.getCollectionUIConfig().detail.drag?.from;\n        }\n        return selectedItem;\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        logger(`view ${this.view.getName()}: drag start`);\n        logger(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        logger(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n        (<CollectionViewListenerForwarder>(this.eventForwarder)).itemDragStarted(this.view, data);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        logger(selectedItem);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting selected from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                (<CollectionViewListenerForwarder>(this.eventForwarder)).itemSelected(this.view, selectedItem);\n            }\n        }\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldDelete = this.eventForwarder.canDeleteItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource} - ${shouldDelete}`);\n            if (shouldDelete) {\n                // do we need to confirm?\n                if (this.view.getCollectionUIConfig().detail.quickDelete) {\n                    this.selectedItem = null;\n                    this.eventForwarder.itemDeleted(this.view, selectedItem);\n                } else {\n                    AlertManager.getInstance().startAlert(this, this.view.getName(), `Are you sure you want to delete this information?`, selectedItem);\n                }\n\n            }\n        }\n    }\n\n    eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                this.eventForwarder.itemAction(this.view, actionName, selectedItem);\n            }\n        }\n    }\n\n    completed(event: AlertEvent): void {\n        logger(event.context);\n        if (event.outcome === AlertType.confirmed) {\n            this.selectedItem = null;\n            this.eventForwarder.itemDeleted(this.view, event.context);\n        }\n    }\n\n    protected getItemContext(event: Event): ItemContext {\n        // @ts-ignore\n        const itemId = event.target.getAttribute(this.view.getCollectionUIConfig().keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        let context: ItemContext = {\n            itemId: itemId,\n            dataSource: dataSource\n        }\n\n        return context;\n    }\n\n}","import {CollectionView} from \"../interface/CollectionView\";\nimport {AbstractView} from \"./AbstractView\";\nimport {CollectionViewDOMConfig, Modifier} from \"../../ConfigurationTypes\";\nimport {isSame} from \"../../../util/EqualityFunctions\";\nimport debug from \"debug\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionViewListenerForwarder} from \"../delegate/CollectionViewListenerForwarder\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionViewEventHandlerDelegate} from \"../delegate/CollectionViewEventHandlerDelegate\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\nconst avLogger = debug('collection-view-ts');\nconst avLoggerDetails = debug('collection-view-ts-detail');\n\n\nexport abstract class AbstractCollectionView extends AbstractView implements CollectionView, CollectionViewEventHandler {\n    protected collectionName: string;\n    protected renderer: CollectionViewRenderer | null;\n    protected selectedItem: any | null;\n    protected collectionUIConfig: CollectionViewDOMConfig;\n    protected eventHandlerDelegate: CollectionViewEventDelegate\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, collectionName: string) {\n        super(uiConfig.viewConfig);\n        this.collectionUIConfig = uiConfig;\n        this.collectionName = collectionName;\n        this.renderer = null;\n        let forwarder = new CollectionViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegate(this, forwarder);\n\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        this.eventHandlerDelegate.eventStartDrag(event);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventClickItem(event);\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventDeleteClickItem(event);\n    }\n\n    eventActionClicked(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventActionClicked(event);\n    }\n\n    public getCollectionName(): string {\n        return this.collectionName;\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from, item);\n    }\n\n    abstract getItemDescription(from: string, item: any): string;\n    abstract hasActionPermission(actionName:string, from:string, item:any):boolean;\n\n    getCollectionUIConfig(): CollectionViewDOMConfig {\n        return this.collectionUIConfig;\n    }\n\n    addEventCollectionListener(listener: CollectionViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        super.setContainedBy(container);\n        if (this.uiConfig.drop) {\n            avLoggerDetails(`view ${this.getName()}: Adding dragover events to ${this.uiConfig.dataSourceId}`)\n            avLoggerDetails(container);\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        if (this.renderer) this.renderer.onDocumentLoaded();\n    }\n\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n    }\n\n    abstract getIdForItemInNamedCollection(name: string, item: any): string;\n\n    abstract getItemInNamedCollection(name: string, compareWith: any): any;\n\n    abstract renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void;\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSame(item1, item2);\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    public getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        return '';\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        if (this.viewEl && this.renderer) {\n            this.renderer.setDisplayElementsForCollectionInContainer(this.viewEl, name, newState);\n        }\n    }\n\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return true;\n    }\n\n    setRenderer(renderer: CollectionViewRenderer): void {\n        this.renderer = renderer;\n    }\n\n\n}\n","import {View} from \"../view/interface/View\";\nimport {BasicElement, EXTRA_ACTION_ATTRIBUTE_NAME} from \"../ConfigurationTypes\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport debug from 'debug';\nimport {AbstractCollectionView} from \"../view/implementation/AbstractCollectionView\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst logger = debug('context-helper');\n\nexport type getIdentifier = (type: string, item: any) => string;\nexport type getDescription = (type: string, item: any) => string;\n\nexport type actionHandler = (event: MouseEvent) => void;\nexport type hasActionPermission = (actionName: string, type: string, item: any) => boolean;\n\nexport type ContextTypeAction = {\n    actionName: string,\n    displayName: string,\n    elementDefinition: BasicElement,\n    iconClasses?: string,\n    handler: actionHandler,\n    hasPermission?: hasActionPermission\n}\n\nexport type ContextDefinitionType = {\n    internalType: string,\n    displayName: string,\n    identifier: getIdentifier,\n    description: getDescription,\n    actions: ContextTypeAction[]\n}\n\nexport type ContextDefinition = {\n    source: string,\n    view?: View,\n    defaultType: ContextDefinitionType,\n    extraTypes?: ContextDefinitionType[]\n}\n\nexport type ContextDetails = {\n    source: string,\n    internalType: string,\n    displayName: string,\n    identifier: string,\n    description: string\n}\n\nexport enum TogglePlacement {\n    top,\n    bottom,\n    right,\n    left\n}\n\nconst defaultIdentifier = function (name: string, item: any) {\n    return '';\n}\n\n\nexport class ContextualInformationHelper {\n    private static _instance: ContextualInformationHelper;\n\n    private static SOURCE: string = 'context-source';\n    private static TYPE: string = 'context-type';\n    private static DISPLAYNAME: string = 'context-display-name';\n    private static IDENTIFIER: string = 'context-id';\n    private static DESCRIPTION: string = 'title';\n\n    private static BOOTSTRAP_TOGGLE = 'data-toggle';\n    private static BOOTSTRAP_PLACEMENT = 'data-placement'\n    private static BOOTSTRAP_TOOLTIP_VALUE = 'tooltip';\n    private static BOOTSTRAP_POPOVER_VALUE = 'popover';\n\n    private static BOOTSTRAP_TOGGLE_HTML = 'data-html';\n    private static BOOTSTRAP_TOGGLE_HTML_VALUE = 'true';\n\n\n    private static BOOTSTRAP_PLACEMENT_TOP = 'top'\n    private static BOOTSTRAP_PLACEMENT_BOTTOM = 'bottom'\n    private static BOOTSTRAP_PLACEMENT_RIGHT = 'right'\n    private static BOOTSTRAP_PLACEMENT_LEFT = 'left'\n    private registry: ContextDefinition[] = [];\n    private menuDivEl: HTMLDivElement | null = null;\n    private menuContentEl: HTMLUListElement | null = null;\n\n    private constructor() {\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        this.hideContextMenu = this.hideContextMenu.bind(this);\n    }\n\n    public static getInstance(): ContextualInformationHelper {\n        if (!(ContextualInformationHelper._instance)) {\n            ContextualInformationHelper._instance = new ContextualInformationHelper();\n        }\n        return ContextualInformationHelper._instance;\n    }\n\n    public onDocumentLoaded() {\n        // @ts-ignore\n        document.addEventListener('click', this.hideContextMenu);\n\n        this.menuDivEl = <HTMLDivElement | null>document.getElementById('contextmenu');\n        this.menuContentEl = <HTMLUListElement | null>document.getElementById('contextMenuItems');\n    }\n\n    public addContextFromView(view: View, internalType: string, displayName: string): ContextDefinition {\n        let context: ContextDefinition = this.ensureInRegistry(view.getName());\n        context.view = view;\n        context.defaultType.internalType = internalType;\n        context.defaultType.displayName = displayName;\n        context.defaultType.identifier = view.getItemId;\n        context.defaultType.description = view.getItemDescription;\n        return context;\n    }\n\n    public addContextToElement(source: string, type: string, item: any, element: HTMLElement, addTooltip: boolean = false, placement: TogglePlacement = TogglePlacement.bottom): void {\n        const context: ContextDefinition = this.ensureInRegistry(source);\n        element.setAttribute(ContextualInformationHelper.SOURCE, context.source);\n        element.setAttribute(ContextualInformationHelper.TYPE, context.defaultType.internalType);\n        element.setAttribute(ContextualInformationHelper.DISPLAYNAME, context.defaultType.displayName);\n        element.setAttribute(ContextualInformationHelper.IDENTIFIER, context.defaultType.identifier(type, item));\n        element.setAttribute(ContextualInformationHelper.DESCRIPTION, context.defaultType.description(type, item));\n        if (addTooltip) {\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE, ContextualInformationHelper.BOOTSTRAP_TOOLTIP_VALUE);\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML, ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML_VALUE);\n            switch (placement) {\n                case TogglePlacement.bottom: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_BOTTOM);\n                    break;\n                }\n                case TogglePlacement.top: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_TOP);\n                    break;\n                }\n                case TogglePlacement.left: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_LEFT);\n                    break;\n                }\n                case TogglePlacement.right: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_RIGHT);\n                    break;\n                }\n            }\n            // @ts-ignore\n            $('[data-toggle=\"tooltip\"]').tooltip({html: true});\n        }\n    }\n\n    public findContextFromEvent(event: Event): ContextDetails | null {\n        let result: ContextDetails | null = null;\n\n        if (event.target) {\n            let target = event.target;\n            // @ts-ignore\n            result = this.findContextFromElement(event.target);\n        }\n        return result;\n    }\n\n    public addActionToContext(context: ContextDefinition, actionName: string, displayName: string, handler: actionHandler, icon?: string, permissionCheck?: hasActionPermission) {\n        let action: ContextTypeAction = {\n            actionName: actionName,\n            displayName: displayName,\n            handler: handler,\n            hasPermission: permissionCheck,\n            elementDefinition: {\n                elementType: 'a',\n                elementAttributes: [{name: 'href', value: '#'}],\n                elementClasses: 'list-group-item list-group-item-action bg-dark text-white',\n            },\n            iconClasses: icon\n        };\n        this.addContextActionToContext(context, action);\n    }\n\n    public handleContextMenu(event: MouseEvent): any {\n        logger('Right click')\n        logger(event.target);\n        // are we over a context sensitive item?\n        // find a context if possible\n        // @ts-ignore\n        const context: ContextDetails | null = this.findContextFromElement(event.target);\n        logger(context);\n        if (context && this.buildContextMenu(context)) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.showContextMenu(event);\n            return false;\n        }\n\n        // otherwise let the default behaviour happen\n        return true;\n    }\n\n    private ensureInRegistry(source: string): ContextDefinition {\n        let result: ContextDefinition;\n        let foundIndex = this.registry.findIndex((context) => context.source === source);\n        if (foundIndex < 0) {\n            result = {\n                source: source,\n                defaultType: {\n                    internalType: '',\n                    displayName: '',\n                    identifier: defaultIdentifier,\n                    description: defaultIdentifier,\n                    actions: []\n                }\n            }\n            this.registry.push(result);\n        } else {\n            result = this.registry[foundIndex];\n        }\n        return result;\n    }\n\n    private findContextFromElement(element: HTMLElement): ContextDetails | null {\n        // do we have context information in this element?\n        let result: ContextDetails | null = null;\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n\n            // @ts-ignore\n            result = {source: source, internalType: type, displayName: name, identifier: id, description: desc};\n        } else {\n            const parent = element.parentElement;\n            if (parent) {\n                result = this.findContextFromElement(parent);\n            }\n        }\n        return result;\n    }\n\n    private findAllContextsFromElement(element: HTMLElement, contexts: ContextDetails[]): void {\n        // do we have context information in this element?\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n            // @ts-ignore\n            if (type && name && id && desc) {\n                let result: ContextDetails = {\n                    source: source,\n                    internalType: type,\n                    displayName: name,\n                    identifier: id,\n                    description: desc\n                };\n                contexts.push(result);\n            }\n        }\n        const parent = element.parentElement;\n        if (parent) {\n            this.findAllContextsFromElement(parent, contexts);\n        }\n    }\n\n    private addContextActionToContext(context: ContextDefinition, action: ContextTypeAction) {\n        logger(`Adding action to context ${context.source}`);\n        logger(action);\n        context.defaultType.actions.push(action);\n    }\n\n    private buildContextMenu(context: ContextDetails): boolean {\n        logger(`building context menu`);\n        let result = false;\n\n        // find the context for these details\n        const contextDef: ContextDefinition | null = this.ensureInRegistry(context.source);\n\n        let selectedItem: any | null = null;\n\n        if (contextDef && contextDef.view && (contextDef.view instanceof AbstractCollectionView)) {\n            logger(`collection view context - finding item with identifier ${context.identifier}`);\n            let collectionView = <CollectionView>(contextDef.view);\n            let compareWith = {};\n            // @ts-ignore\n            compareWith[collectionView.getCollectionUIConfig().keyId] = context.identifier;\n\n            selectedItem = collectionView.getItemInNamedCollection(context.internalType, compareWith);\n        }\n\n        logger(`found item for context menu`);\n        logger(selectedItem);\n\n        if (contextDef.defaultType.actions.length > 0) {\n            if (this.menuContentEl && this.menuContentEl) {\n                browserUtil.removeAllChildren(this.menuContentEl);\n\n                contextDef.defaultType.actions.forEach((action) => {\n                    logger('Adding action');\n                    logger(action);\n\n                    if ((selectedItem && action.hasPermission && action.hasPermission(action.actionName, contextDef.defaultType.internalType, selectedItem)) ||\n                        !(action.hasPermission)) {\n                        let itemEl = document.createElement(action.elementDefinition.elementType);\n                        if (itemEl && this.menuContentEl) {\n                            browserUtil.addAttributes(itemEl, action.elementDefinition.elementAttributes);\n                            browserUtil.addRemoveClasses(itemEl, action.elementDefinition.elementClasses);\n\n                            itemEl.setAttribute(ContextualInformationHelper.SOURCE, context.source);\n                            itemEl.setAttribute(ContextualInformationHelper.TYPE, context.internalType);\n                            itemEl.setAttribute(ContextualInformationHelper.DISPLAYNAME, context.displayName);\n                            itemEl.setAttribute(ContextualInformationHelper.IDENTIFIER, context.identifier);\n                            itemEl.setAttribute(ContextualInformationHelper.DESCRIPTION, context.description);\n                            itemEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, action.actionName);\n\n                            itemEl.addEventListener('click', (event: MouseEvent) => {\n                                this.hideContextMenu(event);\n                                action.handler(event);\n                            });\n                            itemEl.innerHTML = `${action.displayName}`;\n                            if (action.iconClasses) {\n                                itemEl.innerHTML += `&nbsp;&nbsp;<i class=\"${action.iconClasses}\"></i>`;\n                            }\n                            this.menuContentEl.appendChild(itemEl);\n                            logger('new menu element is ');\n                            logger(this.menuContentEl);\n                            result = true;\n                        }\n                    }\n\n\n                });\n            }\n        } else {\n            logger(`building context menu - no actions for ${context.source}`);\n        }\n        return result;\n    }\n\n    private hideContextMenu(event: MouseEvent): any {\n        if (this.menuDivEl) {\n            browserUtil.addRemoveClasses(this.menuDivEl, 'd-none');\n        }\n    }\n\n    private showContextMenu(event: MouseEvent) {\n        if (this.menuDivEl) {\n            logger(`Showing context menu at ${event.pageX},${event.pageY}`);\n            browserUtil.addRemoveClasses(this.menuDivEl, 'd-none', false);\n            this.menuDivEl.style.left = event.pageX + 'px';\n            this.menuDivEl.style.top = event.pageY + 'px';\n        }\n    }\n\n\n}","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: stateValue): void;\n\n    _getState(name: string): stateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: stateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.forEach((listener) => {\n                smLogger(`State Manager: Found state listener of ${name} with name ${listener.getListenerName()} - informing`);\n                try {\n                    switch (eventType) {\n                        case (stateEventType.StateChanged): {\n                            listener.stateChanged(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemAdded): {\n                            listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemUpdated): {\n                            listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemDeleted): {\n                            listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                    }\n                } catch (err) {\n                    console.log(err);\n                }\n\n            });\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()} with index ${foundIndex}`);\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n\n    protected constructor(managerName: string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: stateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: stateValue): void;\n\n    public abstract _getState(name: string): stateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item, testForEqualityFunction);\n        // remove the item from the state\n        smLogger(`State Manager: Found item - removing, is persisted ${isPersisted}`);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item, testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: stateValue[];\n\n    public constructor() {\n        super('memory');\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public static getInstance() {\n        if (!(MemoryBufferStateManager._instance)) {\n            MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n        }\n        return MemoryBufferStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: stateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): stateValue {\n        // @ts-ignore\n        let state: stateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name} is persisted ${isPersisted}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n    getListenerName(): string {\n        return \"Async Manager\";\n    }\n\n}","import debug from 'debug';\n\nimport {StateManager, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private static _instance: AggregateStateManager;\n    private stateManagers: managerWithFilters[];\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callbackId: string,\n    associatedStateName: string,\n    _id?: string\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType,\n    wasOffline: boolean\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string, wasOffline?: boolean) => void;","\nexport const STATE_NAMES = {\n    transactions: 'transaction',\n}\n\nexport const API_Config = {\n    transaction: '/api/transaction'\n};\n\n\n\nexport const VIEW_NAME = {\n    transactions: 'transactions',\n    budgetSummary: 'budgetChart'\n}\n\nexport const VIEW_CONTAINER = {\n    transactionDetail: \"transactionDetail\",\n    transactionDetailsContainer: 'transactionDetailsContainer'\n}\n\nexport const BUTTON = {\n    createNew: 'addNew'\n}\n\nexport const ELEMENT = {\n    total: 'total'\n}\n\n","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import {RequestCallBackFunction} from \"./Types\";\nimport debug from \"debug\";\n\nconst logger = debug('callback-registry');\n\ntype CallBack = {\n    id: string,\n    fn: RequestCallBackFunction\n}\n\nexport class CallbackRegistry {\n    private static _instance: CallbackRegistry;\n    private callbacks: CallBack[] = [];\n\n    private constructor() {\n    }\n\n    public static getInstance(): CallbackRegistry {\n        if (!(CallbackRegistry._instance)) {\n            CallbackRegistry._instance = new CallbackRegistry();\n        }\n        return CallbackRegistry._instance;\n    }\n\n    public addRegisterCallback(id: string, fn: RequestCallBackFunction): void {\n        logger(`Adding callback function with id ${id}`);\n        this.callbacks.push({id: id, fn: fn});\n    }\n\n    public getCallbackById(id: string): RequestCallBackFunction {\n        const defaultFn = function (data: any, status: number, associatedStateName: string): void {\n            console.error(`Callback received with status ${status}, state name ${associatedStateName} where the callback was never registered`);\n        }\n\n        const foundIndex = this.callbacks.findIndex((callback) => callback.id === id);\n        if (foundIndex >= 0) {\n            return this.callbacks[foundIndex].fn;\n        }\n        return defaultFn;\n    }\n}","import debug from \"debug\";\n\nconst logger = debug('poller');\n\nexport type serverAvailable = () => void;\n\nexport class Poller {\n    private static _instance: Poller;\n    private static INTERVAL_DEFAULT = 10000; // 30 seconds\n    private static URL_CALL = '/ping';\n    private interval: any | null = null;\n    private isPollingBool: boolean = false;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Poller {\n        if (!(Poller._instance)) {\n            Poller._instance = new Poller();\n        }\n        return Poller._instance;\n    }\n\n    startPolling(callback: serverAvailable, delay: number = Poller.INTERVAL_DEFAULT): void {\n        this.isPollingBool = true;\n        this.interval = setInterval(() => {\n            logger(`Checking for server availability`)\n            fetch(Poller.URL_CALL, {method: 'GET'}).then((response) => {\n                logger(`Response code was ${response.status} - server is now available`);\n                this.stopPolling();\n                callback();\n            }).catch((error) => {\n                logger(error);\n            });\n        }, delay);\n    }\n\n    isPolling(): boolean {\n        return this.isPollingBool;\n    }\n\n    stopPolling() {\n        if (this.interval) clearInterval(this.interval);\n        this.interval = null;\n        this.isPollingBool = false;\n    }\n\n\n}","import debug from 'debug';\nimport {IDBPDatabase, IDBPObjectStore, IDBPTransaction, openDB} from \"idb\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateEventType, stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nconst logger = debug('indexeddb-ts');\n\nexport type collection = {\n    name: string,\n    keyField: string\n};\n\nclass IndexedDBStateManager implements AsynchronousStateManager {\n    private static instance: IndexedDBStateManager;\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n    protected dbName: string;\n    protected collections: collection[];\n\n    public constructor() {\n        this.dbName = 'default';\n        this.delegate = new StateChangedDelegate('indexeddb');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n        this.collections = [];\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n\n    }\n\n    public static getInstance(): IndexedDBStateManager {\n        if (!IndexedDBStateManager.instance) {\n            IndexedDBStateManager.instance = new IndexedDBStateManager();\n        }\n        return IndexedDBStateManager.instance;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public async initialise(dbName: string, collections: collection[]) {\n        logger(`opening database for ${dbName} with collections`);\n        logger(collections);\n        this.dbName = dbName;\n        this.collections = collections;\n\n        let runsComplete: boolean[] = [];\n        this.collections.forEach((collection) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n\n\n        await openDB(dbName, 1, {\n            upgrade(db, oldVersion, newVersion, transaction) {\n                collections.forEach((collection) => {\n                    logger(`creating collection for ${collection.name} with key ${collection.keyField}`)\n                    db.createObjectStore(collection.name, {keyPath: collection.keyField, autoIncrement: false});\n                });\n            },\n            blocked() {\n                // …\n            },\n            blocking() {\n                // …\n            },\n            terminated() {\n                // …\n            },\n        });\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n    }\n\n    public _getState(name: string): stateValue {\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            logger(`getting state ${name}`);\n            this.getWithCollectionKey(name, this.getKeyFieldForKey(name));\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n    } // should be present with initialise\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let fn = async () => {\n            logger(`replacing item in storage ${state.name}`);\n            logger(state.value);\n            await this.removeAllItemsFromCollectionKey(state.name, this.getKeyFieldForKey(state.name));\n            await this.saveWithCollectionKey(state.name, state.value, this.getKeyFieldForKey(state.name));\n        }\n        fn();\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return;\n        this.addNewItemToCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return;\n        this.removeItemFromCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return;\n        this.updateItemInCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        let fn = async () => {\n            logger(`saving state ${name}`);\n            await this.removeAllItemsFromCollectionKey(name, this.getKeyFieldForKey(name));\n            await this.saveWithCollectionKey(name, stateObj, this.getKeyFieldForKey(name));\n        }\n        fn();\n    }\n\n    public async saveWithCollectionKey(key: string, saveData: any[], keyField: string = 'id') {\n        logger(`Saving array with key ${key}`);\n        logger(saveData);\n        let db: IDBPDatabase = await openDB(this.dbName, 1,);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key], \"readwrite\");\n        transaction.oncomplete = function (ev) {\n            logger('Success');\n            logger(ev);\n        };\n        transaction.onerror = function (ev) {\n            logger('Error');\n            logger(ev);\n        };\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await this.saveItemsToCollection(objectStore, saveData, keyField);\n    }\n\n    /* add a new item to the local storage if not already there */\n    public async addNewItemToCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            logger(`Adding with key ${key}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).add(item);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            this.callbackForAddItem(item, key);\n        }\n    }\n\n    public async removeItemFromCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            logger(`Removing with key ${key} item ${item[keyField]}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).delete(item[keyField]);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            await transaction.done;\n            this.callbackForRemoveItem(item, key);\n\n        }\n    }\n\n    public async updateItemInCollection(key: string, item: any, keyField: string = 'id') {\n        if (item) {\n            logger(`Updating item in storage ${key}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).put(item);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            // @ts-ignore\n            await transaction.done;\n            this.callbackForUpdateItem(item, key);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        logger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        logger(item);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n        this._replaceNamedStateInStorage({name: name, value: stateObjectForName});\n        if (informListeners) this.delegate.informChangeListenersForStateWithName(name, stateObjectForName, stateEventType.StateChanged, null);\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    public async getWithCollectionKey(key: string, keyField: string = 'id') {\n        let savedResults: any[] = [];\n        logger(`Loading with key ${key}`);\n        let db: IDBPDatabase = await openDB(this.dbName, 1);\n        await this.checkForObjectStore(db, key, keyField);\n\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key]);\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        let cursor: IDBPCursor = await objectStore.openCursor();\n\n        while (cursor) {\n            // @ts-ignore\n            savedResults.push(cursor.value);\n            // @ts-ignore\n            cursor = await cursor.continue();\n        }\n\n        logger(savedResults);\n        this.callbackForGetItems(savedResults, key);\n\n    }\n\n    getConfiguredStateNames(): string[] {\n        let result: string[] = [];\n        this.collections.forEach((collection) => {\n            result.push(collection.name);\n        })\n        return result;\n    }\n\n    protected getKeyFieldForKey(key: string): string {\n        let result = '_id';\n        const foundIndex = this.collections.findIndex((collection) => collection.name === key);\n        if (foundIndex >= 0) {\n            result = this.collections[foundIndex].keyField;\n        }\n        return result;\n    }\n\n    protected async checkForObjectStore(db: IDBPDatabase, key: string, keyField: string) {\n        logger(`Checking for collection ${key}`);\n        if (!db.objectStoreNames.contains(key)) {\n            // @ts-ignore\n            logger(`Checking for collection ${key} - NOT found, creating`);\n            await db.createObjectStore(key, {keyPath: keyField, autoIncrement: false});\n        }\n    }\n\n    protected async saveItemsToCollection(objectStore: IDBPObjectStore, saveData: any[], keyField: string = 'id') {\n        logger(`Saving items to collection`);\n        saveData.forEach((data) => {\n            // @ts-ignore\n            objectStore.add(data);\n        });\n    }\n\n    protected async removeAllItemsFromCollectionKey(key: string, keyField: string = 'id') {\n        logger(`Clearing collection ${key}`);\n        let db: IDBPDatabase = await openDB(this.dbName, 1,);\n        await this.checkForObjectStore(db, key, keyField);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key], \"readwrite\");\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await objectStore.clear();\n    }\n\n    protected async callbackForRemoveItem(data: any, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName}  - not forwarded`);\n        logger(data);\n    }\n\n    protected async callbackForUpdateItem(data: any, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName}  - not forwarded`);\n        logger(data);\n    }\n\n    protected callbackForGetItems(data: any, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} - FORWARDING`);\n        logger(data);\n        this.setCompletedRun(associatedStateName);\n        this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged, null);\n    }\n\n    protected async callbackForAddItem(data: any, associatedStateName: string) {\n        logger(`callback for add item for state ${associatedStateName}  - FORWARDING`);\n        logger(data);\n        this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n    }\n\n\n}\n\nexport default IndexedDBStateManager;","import Notification from './Notification';\nimport {NotificationManager, NotificationType} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: NotificationType, duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case NotificationType.info: {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case NotificationType.warning: {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case NotificationType.message: {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case NotificationType.priority: {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager, NotificationType} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: NotificationType, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport enum NotificationType {\n    info,\n    warning,\n    message,\n    priority\n}\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: NotificationType = NotificationType.info, duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nexport default NotificationManager;\n","import {jsonRequest} from \"./Types\";\nimport {Poller} from \"./Poller\";\nimport IndexedDBStateManager from \"../state/IndexedDBStateManager\";\nimport {v4} from \"uuid\";\nimport DownloadManager from \"./DownloadManager\";\nimport {isSameMongo} from \"../util/EqualityFunctions\";\nimport NotificationManager, {NotificationType} from \"../notification/NotificationManager\";\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport AsynchronousStateManager from \"../state/AsynchronousStateManager\";\nimport debug from \"debug\";\n\nconst logger = debug('offline-manager');\n\nexport class OfflineManager implements StateChangeListener {\n    private static _instance: OfflineManager;\n    private static DB_NAME = 'offline.manager.db';\n    private static OBJECT_STORE = 'offline.manager.db.requests';\n    private persistence: AsynchronousStateManager;\n\n    constructor() {\n        this.serverBackOnline = this.serverBackOnline.bind(this);\n        const indexedDB = new IndexedDBStateManager();\n        indexedDB.initialise(OfflineManager.DB_NAME, [{name: OfflineManager.OBJECT_STORE, keyField: '_id'}]);\n        this.persistence = indexedDB;\n        this.persistence.addChangeListenerForName(OfflineManager.OBJECT_STORE, this);\n    }\n\n    public static getInstance(): OfflineManager {\n        if (!(OfflineManager._instance)) {\n            OfflineManager._instance = new OfflineManager();\n        }\n        return OfflineManager._instance;\n    }\n\n    public processQueuedResults() {\n        // find any requests in the persistence\n        this.persistence.getStateByName(OfflineManager.OBJECT_STORE);\n    }\n\n    public serverBackOnline() {\n        NotificationManager.getInstance().show('Server', 'Server is back online.');\n        this.processQueuedResults();\n    }\n\n    public areWeOffline(): boolean {\n        return Poller.getInstance().isPolling();\n    }\n\n    public addOfflineRequest(jsonRequest: jsonRequest) {\n        if (!Poller.getInstance().isPolling()) {\n            Poller.getInstance().startPolling(this.serverBackOnline);\n            NotificationManager.getInstance().show('Server', 'Server is offline, queueing local changes for when server is available', NotificationType.warning);\n        }\n        // save the request with an id\n        jsonRequest._id = v4();\n        logger('Adding offline request');\n        logger(jsonRequest);\n\n        this.persistence.addNewItemToState(OfflineManager.OBJECT_STORE, jsonRequest, false);\n    }\n\n    getListenerName(): string {\n        return \"Offline manager\";\n    }\n\n    stateChanged(managerName: string, name: string, offlineResults: any): void {\n        if (offlineResults && offlineResults.length > 0) {\n            NotificationManager.getInstance().show('Queued Changes', `There are ${offlineResults.length} queued changes, sending to server.`, NotificationType.warning);\n            offlineResults.forEach((request: jsonRequest) => {\n                this.persistence.removeItemFromState(OfflineManager.OBJECT_STORE, request, isSameMongo, false);\n                logger(`Processing offline request with priority and from offline`);\n                logger(request);\n                DownloadManager.getInstance().addApiRequest(request, true, true);\n            });\n        }\n        this.persistence.forceResetForGet(OfflineManager.OBJECT_STORE);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n\n}","import apiUtil from './ApiUtil';\nimport {v4} from 'uuid';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestType} from \"./Types\";\n\nimport debug from 'debug';\nimport {CallbackRegistry} from \"./CallbackRegistry\";\nimport {OfflineManager} from \"./OfflineManager\";\n\nconst logger = debug('api-ts');\n\nclass DownloadManager {\n    private static _instance: DownloadManager;\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n\n    public processOfflineItems() {\n        logger(`Checking for offline items`);\n        OfflineManager.getInstance().processQueuedResults();\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callbackId: string, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callbackId: callbackId,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callbackId: string, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callbackId: callbackId,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public async addApiRequest(jsonRequest: jsonRequest, isPriority = false, wasOffline: boolean = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = v4();\n        logger(`Adding Queue Request ${requestId}`);\n        logger(jsonRequest);\n\n        // are we currently offline?\n        if (OfflineManager.getInstance().areWeOffline()) {\n            logger(`We are offline, queueing request for when server back online.`);\n            OfflineManager.getInstance().addOfflineRequest(jsonRequest);\n            // let the callback function know, with a custom code to let the receiver know there was a problem\n            CallbackRegistry.getInstance().getCallbackById(jsonRequest.callbackId)(jsonRequest.params, 500, jsonRequest.associatedStateName, false);\n            return;\n        }\n\n        // we are online (hopefully), continue for now, we will catch offline errors later\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n                wasOffline: wasOffline\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n                wasOffline: wasOffline\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            logger(`processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        logger(`received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            logger(queueItem);\n\n            // are we offline http status of 500\n            if (httpStatus === 500) {\n                logger(`queue item ${queueItem.requestId} - server offline, queueing for later`);\n                OfflineManager.getInstance().addOfflineRequest(queueItem.originalRequest);\n                // let the callback function know, with a custom code to let the receiver know there was a problem\n                CallbackRegistry.getInstance().getCallbackById(queueItem.originalRequest.callbackId)(queueItem.originalRequest.params, httpStatus, queueItem.originalRequest.associatedStateName, queueItem.wasOffline);\n            } else {\n                logger(`finished for queue item ${queueItem.requestId} with possible offline id of ${queueItem.originalRequest._id}`);\n                // let the callback function know\n                CallbackRegistry.getInstance().getCallbackById(queueItem.originalRequest.callbackId)(jsonData, httpStatus, queueItem.originalRequest.associatedStateName, queueItem.wasOffline);\n            }\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        logger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        logger(item);\n        switch (item.originalRequest.type) {\n            case RequestType.POST: {\n                apiUtil.apiFetchJSONWithPost(item);\n                break;\n            }\n            case RequestType.GET: {\n                apiUtil.apiFetchJSONWithGet(item);\n                break;\n            }\n            case RequestType.DELETE: {\n                apiUtil.apiFetchJSONWithDelete(item);\n                break;\n            }\n            case RequestType.PUT: {\n                apiUtil.apiFetchJSONWithPut(item);\n                break;\n            }\n        }\n    }\n}\n\nexport default DownloadManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport DownloadManager from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {CallbackRegistry} from \"../network/CallbackRegistry\";\n\n\nconst logger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean,\n    idField?: string\n\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n    private static FUNCTION_ID_ADD_ITEM = 'rest.api.state.manager.add.item';\n    private static FUNCTION_ID_REMOVE_ITEM = 'rest.api.state.manager.remove.item';\n    private static FUNCTION_ID_UPDATE_ITEM = 'rest.api.state.manager.update.item';\n    private static FUNCTION_ID_GET_ITEMS = 'rest.api.state.manager.get.items';\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_ADD_ITEM, this.callbackForAddItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_REMOVE_ITEM, this.callbackForRemoveItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_UPDATE_ITEM, this.callbackForUpdateItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_GET_ITEMS, this.callbackForGetItems);\n\n    }\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        logger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callbackId: RESTApiStateManager.FUNCTION_ID_GET_ITEMS,\n                    associatedStateName: name\n                };\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                logger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        logger(`Adding item to ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callbackId: RESTApiStateManager.FUNCTION_ID_ADD_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        logger(`Removing item from ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        let identifier = stateObj.id;\n        if (config.idField) {\n            identifier = stateObj[config.idField];\n        }\n\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: identifier\n                },\n                callbackId: RESTApiStateManager.FUNCTION_ID_REMOVE_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        logger(`Updating item in ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callbackId: RESTApiStateManager.FUNCTION_ID_UPDATE_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        logger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        logger(item);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string, wasOffline?: boolean) {\n        logger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            if (!wasOffline) {\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n            } else {\n                logger('Item was added offline, update the current data');\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemUpdated, null);\n            }\n\n        }\n        // did the call fail? (server loss)\n        if (status === 500) {\n            logger(`Item adding - offline, but will be queued later`);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import {KeyType} from \"../ui/ConfigurationTypes\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {ValidationRule} from \"../ui/form/validation/ValidationTypeDefs\";\n\nexport enum FieldType {\n    id = 'Id',\n    uuid = 'UUID',\n    text = 'Text',\n    integer = 'Integer',\n    float = 'Number',\n    money = 'Money',\n    date = 'Date',\n    time = 'Time',\n    shortTime = 'Short Time',\n    datetime = 'Datetime',\n    email = 'Email',\n    password = 'Password',\n    boolean = 'True/False',\n    userId = 'User',\n    choice = 'Choice',\n    limitedChoice = 'Limited Choice',\n    largeText = 'TextArea',\n    collection = 'Collection',\n    duration = 'Duration'\n}\n\nexport interface FieldValueGenerator {\n    generate(field: FieldDefinition, isCreate: boolean): string;\n}\n\n\nexport type FieldDefinition = {\n    id: string,\n    isKey: boolean,\n    idType: KeyType,\n    type: FieldType,\n    displayName: string,\n    mandatory: boolean,\n    displayOnly?: boolean,\n    description?: string,\n    collectionOfDataObjectId?: string,\n    generator?: {\n        onCreation: boolean,\n        onModify: boolean,\n        generator: FieldValueGenerator\n    },\n    dataSource?: FieldValueOptions\n}\n\nexport type DataObjectDefinition = {\n    id: string,\n    displayName: string,\n    fields: FieldDefinition[],\n    rules?: ValidationRule\n}\n\n\n\n","import debug from \"debug\";\n\nconst logger = debug('security-manager');\n\nexport class SecurityManager {\n    private static _instance: SecurityManager;\n    private hash: string | null = null;\n    private logoutEl: HTMLElement | null = null;\n\n    private constructor() {\n    }\n\n    public static getInstance(): SecurityManager {\n        if (!(SecurityManager._instance)) {\n            SecurityManager._instance = new SecurityManager();\n        }\n        return SecurityManager._instance;\n    }\n\n    public onDocumentLoaded(logoutElementId: string) {\n        this.logoutEl = document.getElementById(logoutElementId);\n\n        // find the secret hash for the current user (if any)\n        const username = this.getLoggedInUsername();\n        if (username && username.trim().length > 0) {\n            logger(`found user ${username}`);\n            this.hash = localStorage.getItem(username);\n            if (this.hash) {\n                sessionStorage.setItem(username, this.hash);\n            } else {\n                this.hash = sessionStorage.getItem(username);\n            }\n            localStorage.removeItem(username);\n            logger(`found user ${username} hash ${this.hash} - removed from local storage`);\n        }\n\n        if (this.logoutEl) {\n            this.logoutEl.addEventListener('click', (event) => {\n                localStorage.removeItem(username);\n                sessionStorage.removeItem(username);\n            });\n        }\n    }\n\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        logger(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        logger(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n\n    public encryptString(value: string): string {\n        let result = value;\n        if (this.hash) {\n            // @ts-ignore\n            result = CryptoJS.AES.encrypt(value, this.hash).toString();\n        }\n        return result;\n    }\n\n    public decryptString(value: string): string {\n        let result = value;\n        if (this.hash) {\n            // @ts-ignore\n            result = CryptoJS.AES.decrypt(value, this.hash).toString(CryptoJS.enc.Utf8);\n        }\n        return result;\n    }\n\n    public encryptObject(dataObj: any): string {\n        return this.encryptString(JSON.stringify(dataObj));\n    }\n\n    public decryptObject(value: string): any {\n        return JSON.parse(this.decryptString(value));\n    }\n}","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../../app/Controller\";\nimport {FieldFormatter, FieldRenderer, FieldValidator, ValidationResponse} from \"../ui/form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"./DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ui/ConfigurationTypes\";\nimport {SecurityManager} from \"../security/SecurityManager\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class BasicFieldOperations implements FieldFormatter, FieldRenderer, FieldValidator, FieldValueGenerator {\n    private static dateRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))$/;\n    private static emailRegex: RegExp = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+([^<>()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/;\n    private static shortTimeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n    private static timeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static dateTimeRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))\\s([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static basicPasswordRegex: RegExp = /^[a-zA-Z0-9]{8,15}$/;\n    private static integerRegex: RegExp = /^[+-]?\\d+$/;\n    private static floatRegexp: RegExp = /^[+-]?\\d+(\\.\\d+)?$/;\n    private static moneyRegexp: RegExp = /^[+-]?\\d+\\.\\d{2}$/;\n    private static booleanRegexp: RegExp = /^true|false$/;\n    private static durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n    private previousFieldValues: FieldNameValue[];\n\n    public constructor() {\n        this.previousFieldValues = [];\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n    }\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue}`);\n        let result: any = currentValue;\n        switch (field.type) { // only need to change dates\n            case (FieldType.date): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY').format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.datetime): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY HH:mm:ss').format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.boolean): {\n                result = (currentValue.toLowerCase() === 'true');\n                break;\n            }\n            case (FieldType.id): {\n                if (field.idType === KeyType.number) {\n                    result = parseInt(currentValue);\n                }\n                break;\n            }\n            case (FieldType.float): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.money): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.integer): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n\n        }\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: true,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            // do we have any content?\n            if ((!currentValue) || (currentValue.trim().length === 0)) {\n                response.isValid = false;\n                response.message = `${field.displayName} is required. Please enter a valid value.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n            // boolean is a special case, and must be true\n            if (field.type === FieldType.boolean) {\n                if (currentValue.trim().toLowerCase() !== 'true') {\n                    response.isValid = false;\n                    response.message = `${field.displayName} is required and must be selected.`;\n                    vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                    return response;\n                }\n            }\n        }\n\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        if (currentValue) {\n            switch (field.type) {\n                case (FieldType.datetime): {\n                    response.isValid = BasicFieldOperations.dateTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY hh:mm`;\n\n                    }\n                    break;\n                }\n                case (FieldType.date): {\n                    response.isValid = BasicFieldOperations.dateRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY`;\n\n                    }\n                    break;\n                }\n                case (FieldType.float): {\n                    response.isValid = BasicFieldOperations.floatRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 00.00`;\n                    }\n                    break;\n                }\n                case (FieldType.money): {\n                    response.isValid = BasicFieldOperations.moneyRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 0.00`;\n                    }\n                    break;\n                }\n                case (FieldType.id): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.email): {\n                    response.isValid = BasicFieldOperations.emailRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an email address`;\n                    }\n                    break;\n                }\n                case (FieldType.integer): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.text): {\n                    break;\n                }\n                case (FieldType.password): {\n                    response.isValid = BasicFieldOperations.basicPasswordRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 8 to 15 letters and digits only`;\n                    }\n                    break;\n                }\n                case (FieldType.time): {\n                    response.isValid = BasicFieldOperations.timeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.shortTime): {\n                    response.isValid = BasicFieldOperations.shortTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM`;\n                    }\n                    break;\n                }\n                case (FieldType.duration): {\n                    response.isValid = BasicFieldOperations.durationRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be in the format MM:SS or 999:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.boolean): {\n                    response.isValid = BasicFieldOperations.booleanRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be true or false`;\n                    }\n                    break;\n                }\n            }\n        }\n\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        // ensure we don't end up in an endless loop\n        // if the value hasn't changed return null\n        // let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        // if (index >= 0) {\n        //     //we have a previous value\n        //     let fieldValue: FieldNameValue = this.previousFieldValues[index];\n        //     rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - previous value ${fieldValue.value}`);\n        //     if (fieldValue.value === currentValue) return null;\n        // }\n        // either not yet seen or value has changed from previous\n        if (currentValue) { // only attempt to render non-empty dates\n            let newValue: string = currentValue;\n\n            switch (field.type) {\n                case (FieldType.date): {\n                    newValue = moment(currentValue, 'YYYYMMDD').format('DD/MM/YYYY');\n                    break;\n                }\n                case (FieldType.datetime): {\n                    newValue = moment(currentValue, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm:ss');\n                    break;\n                }\n            }\n\n            // store the previous value\n            this.setPreviousValue(field, newValue);\n            rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - rendered to ${newValue}`);\n            return newValue;\n        } else {\n            // empty value, no rendering required\n            rlogger(`Rendering value for field ${field.displayName} with new value is empty - no rendering required`);\n\n            return null;\n        }\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        // are we generating the field?\n        if (field.generator) {\n            // are we only generating on create\n            if (field.generator.onCreation && isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on creation ${result}`);\n            }\n            // or if we are modifying and should also be modifying the value\n            if (field.generator.onModify && !isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on modify ${result}`);\n            }\n        }\n        return result;\n    }\n\n    private setPreviousValue(field: FieldDefinition, newValue: string) {\n        rlogger(`Storing previous value for field ${field.displayName} with  new value ${newValue}`);\n        let fieldValue: FieldNameValue;\n\n        let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        if (index >= 0) {\n            //we have a previous value\n            fieldValue = this.previousFieldValues[index];\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - old value was ${fieldValue}`);\n            fieldValue.value = newValue;\n        } else {\n            // create a new record of the value\n            fieldValue = {\n                id: field.id,\n                value: newValue\n            }\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - NO previous`);\n            this.previousFieldValues.push(fieldValue);\n        }\n    }\n\n    private generateValue(field: FieldDefinition): string {\n        let result = '';\n        switch (field.type) {\n            case (FieldType.datetime): {\n                result = moment().format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.date): {\n                result = moment().format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.float): {\n                result = '0.0';\n                break;\n            }\n            case (FieldType.money): {\n                result = '0.00';\n                break;\n            }\n            case (FieldType.id): {\n                result = '-1';\n                break;\n            }\n            case (FieldType.email): {\n                result = 'me@me.com';\n                break;\n            }\n            case (FieldType.integer): {\n                result = '0';\n                break;\n            }\n            case (FieldType.text): {\n                result = '';\n                break;\n            }\n            case (FieldType.password): {\n                result = '';\n                break;\n            }\n            case (FieldType.time): {\n                result = '00:00:00';\n                break;\n            }\n            case (FieldType.shortTime): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.duration): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.boolean): {\n                result = 'false';\n                break;\n            }\n            case (FieldType.uuid): {\n                result = v4();\n                break;\n            }\n            case (FieldType.userId): {\n                result = `${SecurityManager.getInstance().getLoggedInUsername()}`;\n                break;\n            }\n        }\n        return result;\n    }\n\n}","import {KeyType} from \"../ui/ConfigurationTypes\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport {DataObjectDefinition, FieldDefinition, FieldType, FieldValueGenerator} from \"./DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {DisplayOrder} from \"../ui/form/FormUITypeDefs\";\n\nexport const FIELD_ID: string = 'id';\nexport const FIELD_CreatedBy: string = 'createdBy';\nexport const FIELD_ModifiedBy: string = 'modifiedBy';\nexport const FIELD_CreatedOn: string = 'createdOn';\nexport const FIELD_ModifiedOn: string = 'modifiedOn';\n\nexport const FIELD_CreatedBy_Desc: string = 'Created By';\nexport const FIELD_ModifiedBy_Desc: string = 'Last Modified By';\nexport const FIELD_CreatedOn_Desc: string = 'Created On';\nexport const FIELD_ModifiedOn_Desc: string = 'Last Modified On';\n\nexport class BasicObjectDefinitionFactory {\n\n    private static _instance: BasicObjectDefinitionFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): BasicObjectDefinitionFactory {\n        if (!(BasicObjectDefinitionFactory._instance)) {\n            BasicObjectDefinitionFactory._instance = new BasicObjectDefinitionFactory();\n        }\n        return BasicObjectDefinitionFactory._instance;\n    }\n\n    public generateStartingDisplayOrder(dataObjDef: DataObjectDefinition): DisplayOrder[] {\n        let result: DisplayOrder[] = [];\n\n        dataObjDef.fields.forEach((fieldDef, index) => {\n            let order: DisplayOrder = {\n                fieldId: fieldDef.id,\n                displayOrder: index\n            }\n            // is this the created or modified date\n            if (fieldDef.id === FIELD_CreatedOn) {\n                order.displayOrder += 100;\n            }\n            if (fieldDef.id === FIELD_ModifiedOn) {\n                order.displayOrder += 101;\n            }\n            if (fieldDef.type === FieldType.userId) {\n                order.displayOrder += 100;\n            }\n            result.push(order);\n        });\n        return result;\n    }\n\n    public createBasicObjectDefinition(id: string, displayName: string, hasDataId: boolean, dataIdIsUUID: boolean, createModifierFields: boolean = true, idFieldName: string = FIELD_ID): DataObjectDefinition {\n        let objDef: DataObjectDefinition = {\n            id: id,\n            displayName: displayName,\n            fields: []\n        }\n        let ops = new BasicFieldOperations();\n\n        // do we need an id field?\n        if (hasDataId) {\n            let fieldType = FieldType.id;\n            if (dataIdIsUUID) {\n                fieldType = FieldType.uuid;\n            }\n            let fieldDef: FieldDefinition = {\n                id: idFieldName,\n                isKey: true,\n                idType: KeyType.number,\n                type: fieldType,\n                displayName: 'Id',\n                mandatory: true,\n                generator: {\n                    generator: ops,\n                    onModify: false,\n                    onCreation: true\n                }\n            }\n            objDef.fields.push(fieldDef);\n        }\n\n        // add fields for created and modified\n        if (createModifierFields) {\n            this.addCreatedDateToArray(objDef.fields);\n            this.addCreatedByToArray(objDef.fields);\n            this.addModifiedByToArray(objDef.fields);\n            this.addModifiedDateToArray(objDef.fields);\n        }\n\n        return objDef;\n    }\n\n    public addStringFieldToObjDefinition(objDef: DataObjectDefinition, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addStringFieldToArray(objDef.fields, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    public addNumericFieldToObjDefinition(objDef: DataObjectDefinition, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addNumericFieldToArray(objDef.fields, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    private addCreatedDateToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_CreatedOn, FIELD_CreatedOn_Desc, FieldType.datetime, true, FIELD_CreatedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: false\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    public addCreatedDateToDefinition(def:DataObjectDefinition) {\n        this.addCreatedDateToArray(def.fields);\n    }\n\n    private addModifiedDateToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_ModifiedOn, FIELD_ModifiedOn_Desc, FieldType.datetime, true, FIELD_ModifiedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    public addModifiedDateToDefinition(def:DataObjectDefinition) {\n        this.addModifiedDateToDefinition(def);\n    }\n\n    private addCreatedByToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addNumericFieldToArray(fields, FIELD_CreatedBy, FIELD_CreatedBy_Desc, FieldType.userId, true, FIELD_CreatedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: false\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addModifiedByToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_ModifiedBy, FIELD_ModifiedBy_Desc, FieldType.userId, true, FIELD_ModifiedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addFieldToArray(fields: FieldDefinition[], keyType: KeyType, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        let fieldDef: FieldDefinition = {\n            id: id,\n            isKey: false,\n            idType: keyType,\n            type: type,\n            displayName: displayName,\n            mandatory: isMandatory,\n            displayOnly: false,\n        }\n\n        if (isMandatory) {\n            // add generator\n            fieldDef.generator = {\n                generator: new BasicFieldOperations(),\n                onCreation: true,\n                onModify: false\n            }\n        }\n\n\n        if (description) fieldDef.description = description;\n        if (datasource) fieldDef.dataSource = datasource;\n\n        fields.push(fieldDef);\n        return fieldDef;\n    }\n\n    private addStringFieldToArray(fields: FieldDefinition[], id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addFieldToArray(fields, KeyType.string, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    private addNumericFieldToArray(fields: FieldDefinition[], id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addFieldToArray(fields, KeyType.string, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    public setDefaultValueForField(def:DataObjectDefinition,id:string,generator:FieldValueGenerator) {\n        let foundIndex = def.fields.findIndex((field) => field.id === id);\n        if (foundIndex >= 0) {\n            const field = def.fields[foundIndex];\n            if (field) {\n                let generatorDef = {\n                    generator:generator,\n                    onCreation:true,\n                    onModify:false\n                };\n                field.generator = generatorDef;\n            }\n        }\n    }\n\n}","import {Attribute, BasicButtonElement, BasicElement} from \"../ConfigurationTypes\";\nimport {FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"../../model/CommonTypes\";\n\nexport type ValidationResponse = {\n    isValid: boolean,\n    message?: string,\n    resetOnFailure: boolean\n}\n\nexport interface FieldValidator {  // is the current value valid (includes manndatory checks)\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse;\n\n    setSubElements(elements: HTMLInputElement[]): void;\n}\n\nexport interface FieldFormatter { // final value for the field on \"saving\" the form\n    formatValue(field: FieldDefinition, currentValue: string): any;\n\n    setSubElements(elements: HTMLInputElement[]): void;\n}\n\nexport interface FieldRenderer { // renders during user changes\n    renderValue(field: FieldDefinition, currentValue: string): string | null;\n\n    setSubElements(elements: HTMLInputElement[]): void;\n}\n\nexport interface FieldEditor { // allows for an \"editor\" component\n    editValue(field: FieldDefinition, currentValue: string): string;\n}\n\nexport interface ConditionalField { // a field may not be visible based on other field values\n    shouldBeVisible(field: FieldDefinition, formValues: string[]): boolean;\n}\n\nexport enum UIFieldType {\n    checkbox,\n    email,\n    hidden,\n    number,\n    password,\n    text,\n    textarea,\n    select,\n    radioGroup\n}\n\nexport type FieldLabel = {\n    label: string,\n    attributes?: Attribute[],\n    classes?: string\n}\n\nexport type DescriptionText = {\n    message: string,\n    elementType: string,\n    elementClasses: string,\n}\n\nexport type DisplayOrder = {\n    fieldId: string,\n    displayOrder: number\n}\n\nexport type FieldUIConfig = {\n    field: FieldDefinition,\n    displayOrder: number,\n    elementType: UIFieldType,\n    elementAttributes?: Attribute[],\n    elementClasses?: string,\n    subElement?: {\n        container?: BasicElement,\n        label?: FieldLabel,\n        element: BasicElement,\n    },// for radio and selection options\n    label?: FieldLabel,\n    describedBy?: DescriptionText,\n    containedBy?: BasicElement,\n    textarea?: {\n        rows: number,\n        cols: number\n    },\n    validator?: {\n        validator: FieldValidator, // on blur\n        messageDisplay: BasicElement,\n        validClasses?: string,\n        invalidClasses?: string,\n    }\n    renderer?: FieldRenderer, // on change\n    editor?: FieldEditor, // on focus\n    formatter?: FieldFormatter // used by form when saving\n    conditionalDisplay?: ConditionalField // used to determine if the is visible\n    datasource?: FieldValueOptions\n}\n\nexport type FieldGroup = {\n    containedBy?: BasicElement,\n    fields: FieldUIConfig[]\n}\n\nexport type FormUIDefinition = {\n    id: string,\n    displayName: string,\n    classes?: string,\n    unsavedChanges: BasicElement,\n    fieldGroups: FieldGroup[],\n    buttonsContainedBy?: BasicElement\n    deleteButton?: BasicButtonElement,// should be clickable\n    cancelButton: BasicButtonElement,// should be clickable\n    submitButton: BasicButtonElement  // should be clickable\n    activeSave?: string\n}\n\nexport enum FormMode {\n    unset = -1,\n    create,\n    update\n}\n\nexport type AttributeFieldMapItem = {\n    fieldId: string,\n    attributeId: string\n}\n\nexport const DATA_ID_ATTRIBUTE: string = 'data-id';\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {DataObjectDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {BasicObjectDefinitionFactory, FIELD_ID} from \"./BasicObjectDefinitionFactory\";\nimport debug from \"debug\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\n\nconst logger = debug('object-definition-registry');\n\nexport class ObjectDefinitionRegistry {\n    private static _instance: ObjectDefinitionRegistry;\n    protected definitions: DataObjectDefinition[];\n\n    private constructor() {\n        this.definitions = [];\n    }\n\n    public static getInstance(): ObjectDefinitionRegistry {\n        if (!(ObjectDefinitionRegistry._instance)) {\n            ObjectDefinitionRegistry._instance = new ObjectDefinitionRegistry();\n        }\n        return ObjectDefinitionRegistry._instance;\n    }\n\n    public findDefinition(id: string): DataObjectDefinition | null {\n        let result: DataObjectDefinition | null = null;\n        const index = this.definitions.findIndex((definition) => definition.id === id);\n        if (index >= 0) {\n            result = this.definitions[index];\n        }\n        return result;\n    }\n\n    public addDefinition(id: string, displayName: string, hasDataId: boolean, dataIdIsUUID: boolean, createModifierFields: boolean = true, idFieldName: string = FIELD_ID): DataObjectDefinition {\n        logger(`Adding definition for ${id} with name ${displayName}`);\n        let result: DataObjectDefinition | null = this.findDefinition(id);\n        if (result) {\n            return result;\n        } else {\n            let definition = BasicObjectDefinitionFactory.getInstance().createBasicObjectDefinition(id, displayName, hasDataId, dataIdIsUUID, createModifierFields, idFieldName);\n            this.definitions.push(definition);\n            return definition;\n        }\n    }\n\n    public createInstanceFromDef(definition: DataObjectDefinition): any {\n        logger(`Creating instance for definition ${definition.displayName}`);\n        let result: any = {};\n        const fieldOps = new BasicFieldOperations();\n\n        definition.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n\n                switch (fieldDef.type) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        break;\n                    }\n                    default: {\n                        fieldValue = fieldOps.formatValue(fieldDef, fieldValue);\n                        break;\n                    }\n                }\n\n                logger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                result[fieldDef.id] = fieldValue;\n            }\n            if (fieldDef.type === FieldType.collection) {\n                result[fieldDef.id] = [];\n            }\n        });\n        return result;\n    }\n\n\n    public createInstance(id: string): any {\n        logger(`Creating instance for definition ${id}`);\n        let result: any = {};\n\n        const definition: DataObjectDefinition | null = this.findDefinition(id);\n\n        if (definition) {\n            result = this.createInstanceFromDef(definition);\n        }\n        return result;\n    }\n}","import {FieldValueOptions, FieldValueOptionsListener, ValueOption} from \"../../model/CommonTypes\";\n\nexport class SimpleValueDataSource implements FieldValueOptions { // static value list\n    private options: ValueOption[];\n    private listeners: FieldValueOptionsListener[];\n\n    constructor(options: ValueOption[]) {\n        this.options = options;\n        this.listeners = [];\n    }\n\n    public addValueOption(name: string, value: string) {\n        this.options.push({name, value});\n        this.listeners.forEach((listener) => listener.optionsChanged(this.options));\n    }\n\n    addListener(listener: FieldValueOptionsListener): void {\n        this.listeners.push(listener);\n    }\n\n    getOptions(): ValueOption[] {\n        return this.options;\n    }\n\n}","import {FieldDefinition, FieldValueGenerator} from \"./DataObjectTypeDefs\";\n\nexport class DefaultValueGenerator implements FieldValueGenerator{\n    private defaultValue: string;\n\n    constructor(defaultValue:string) {\n        this.defaultValue = defaultValue;\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        if (isCreate) {\n            result = this.defaultValue;\n        }\n        return result;\n    }\n\n}","import debug from 'debug';\nimport MemoryBufferStateManager from \"../framework/state/MemoryBufferStateManager\";\nimport StateChangeListener from \"../framework/state/StateChangeListener\";\nimport {StateManager} from \"../framework/state/StateManager\";\nimport AsyncStateManagerWrapper from \"../framework/state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"../framework/state/AggregateStateManager\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {RESTApiStateManager} from \"../framework/state/RESTApiStateManager\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"../framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../framework/model/ObjectDefinitionRegistry\";\nimport {BasicObjectDefinitionFactory} from \"../framework/model/BasicObjectDefinitionFactory\";\nimport {SimpleValueDataSource} from \"../framework/ui/helper/SimpleValueDataSource\";\nimport {DataObjectListener} from \"../framework/model/DataObjectListener\";\nimport {DataObjectController} from \"../framework/model/DataObjectController\";\nimport {isSameMongo} from \"../framework/util/EqualityFunctions\";\nimport DownloadManager from \"../framework/network/DownloadManager\";\nimport {DefaultValueGenerator} from \"../framework/model/DefaultValueGenerator\";\n\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nexport default class Controller implements DataObjectListener {\n    private static _instance: Controller;\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName: STATE_NAMES.transactions,\n                serverURL: '',\n                api: API_Config.transaction,\n                isActive: true,\n                idField: '_id',\n            },\n        ]);\n\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, restSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncSM, [], false);\n\n        this.stateManager = aggregateSM;\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n\n        // load the transactions\n        this.getStateManager().getStateByName(STATE_NAMES.transactions);\n\n        // apply any queued changes from being offline\n        DownloadManager.getInstance().processOfflineItems();\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.transactions: {\n                cLogger(`Handling create new transaction`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.transactions: {\n                cLogger(`Handling delete transaction - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.transactions: {\n                cLogger(`Handling update transaction`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName, dataObj, isSameMongo, false);\n                break;\n            }\n        }\n    }\n\n\n\n    private setupDataObjectDefinitions() {\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.transactions, 'Transaction', true, true, false, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true, \"Name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose deposit or withdrawal\",\n            new SimpleValueDataSource([\n                {name: 'Deposit', value: 'deposit'},\n                {name: 'Withdrawal', value: 'withdrawal'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"amount\", \"Amount\", FieldType.money, true, \"Amount\");\n        BasicObjectDefinitionFactory.getInstance().addCreatedDateToDefinition(exerciseTypeDefinition);\n        BasicObjectDefinitionFactory.getInstance().setDefaultValueForField(exerciseTypeDefinition, \"type\",new DefaultValueGenerator('withdrawal'));\n        cLogger(exerciseTypeDefinition);\n    }\n\n\n}\n\n\n","import {Form} from \"./Form\";\n\nexport enum FormEventType {\n    SHOWN = 'shown',\n    HIDDEN = 'hidden',\n    CANCELLING = 'cancelling',\n    CANCELLING_ABORTED = 'cancelling-aborted',\n    CANCELLED = 'cancelled',\n    SAVING = 'saving',\n    SAVE_ABORTED = 'save-aborted',\n    SAVED = 'saved',\n    DELETING = 'deleting',\n    DELETE_ABORTED = 'delete-aborted',\n    DELETED = 'deleted',\n    CREATING = 'creating',\n    MODIFYING = 'modifying',\n    RESETTING = 'reset',\n}\n\n\nexport type FormEvent = {\n    target: Form,\n    formId: string,\n    eventType: FormEventType,\n}\n\nexport interface FormListener {\n    formChanged(event: FormEvent, formValues?: any): boolean; // return true to cancel the action\n}","export enum ComparisonType {\n    equals,\n    lessThan,\n    lessThanEqual,\n    greaterThan,\n    greaterThanEqual,\n    isNull,\n    isNotNull,\n    hasValue\n}\n\nexport enum ConditionResponse {\n    show,\n    hide,\n    invalid,\n    valid\n}\n\nexport type ValidationCondition = {\n    comparison: ComparisonType,\n    sourceDataFieldId?: string,\n    values?: string\n}\n\nexport type ValidationRule = {\n    targetDataFieldId: string,\n    response: ConditionResponse,\n    conditions: ValidationCondition[]\n}\n","import {ComparisonType, ConditionResponse, ValidationRule} from \"./ValidationTypeDefs\";\nimport {Form} from \"../Form\";\nimport {Field} from \"../field/Field\";\nimport debug from 'debug';\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nconst logger = debug('validation-manager');\nconst flogger = debug('validation-manager-rule-failure');\n\n\nexport type RuleCheck = {\n    ruleFailed: boolean,\n    message?: string\n}\n\nexport type RuleResponse = {\n    field: Field,\n    ruleFailed: boolean,\n    response: ConditionResponse,\n    message?: string\n}\n\n\ntype _ValueCondition = {\n    values: string,\n    comparison: ComparisonType\n};\n\ntype _FieldCondition = {\n    sourceField: Field,\n    comparison: ComparisonType,\n    values?: string,\n};\n\ntype _ValidationRule = {\n    targetField: Field,\n    response: ConditionResponse,\n    fieldConditions: _FieldCondition[],\n    valueConditions: _ValueCondition[],\n}\n\ntype FormRuleSet = {\n    form: Form,\n    rules: _ValidationRule[]\n}\n\nexport class ValidationManager implements FieldListener {\n\n    private static _instance: ValidationManager;\n    private formRules: FormRuleSet[];\n\n    private constructor() {\n        this.formRules = [];\n    }\n\n    public static getInstance(): ValidationManager {\n        if (!(ValidationManager._instance)) {\n            ValidationManager._instance = new ValidationManager();\n        }\n        return ValidationManager._instance;\n    }\n\n    public getName(): string {\n        return \"Validation Manager\";\n    }\n\n    public addRuleToForm(form: Form, rule: ValidationRule): boolean { // returns whether the rule was added\n        logger(`Adding rule on form ${form.getId()} for target field ${rule.targetDataFieldId}`);\n        /*\n         validate the rule\n         1. does the rule have a comparison field or static for each condition?\n         2. do the fields exist?\n         3. are the comparisons valid types to compare?\n        */\n        let targetField: Field | undefined = form.getFieldFromDataFieldId(rule.targetDataFieldId);\n        if (!targetField) {\n            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - NOT FOUND in form`);\n            return false;\n        }\n\n        let convertedRule: _ValidationRule = {\n            targetField: targetField,\n            response: rule.response,\n            fieldConditions: [],\n            valueConditions: []\n        }\n\n\n        rule.conditions.forEach((condition) => {\n            // do we have one of values or source field?\n            if (!(condition.values) && !(condition.sourceDataFieldId)) {\n                flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - a condition is missing both values and source field`);\n                return false;\n            }\n            // is this a target field value comparison?\n            if ((condition.values) && (condition.sourceDataFieldId)) {\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} with values ${condition.values}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                convertedRule.fieldConditions.push({\n                    sourceField: sourceField,\n                    comparison: condition.comparison,\n                    values: condition.values\n                });\n                sourceField.addFieldListener(this);\n            } else if ((condition.values) && !(condition.sourceDataFieldId)) { // is this a value comparison?\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - values ${condition.values}`);\n                // add a new value rule to the internal structure\n                convertedRule.valueConditions.push({values: condition.values, comparison: condition.comparison});\n                // @ts-ignore\n                targetField.addFieldListener(this);\n            } else if ((condition.sourceDataFieldId) && (!condition.values)) { // is this a field vs field comparison\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                /*\n                   are we comparing two fields that can be compared?\n                   allowed combinations are:\n                   date|datetime vs date|datetime\n                   time|short time vs time|short time\n                   boolean vs boolean\n                   integer|float vs number|float\n                   any other vs any other\n                 */\n                let sourceType = sourceField.getFieldDefinition().type;\n                // @ts-ignore\n                let targetType = targetField.getFieldDefinition().type;\n\n                switch (targetType) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        if ((sourceType !== FieldType.datetime) &&\n                            (sourceType !== FieldType.date)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is date(time), source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.time):\n                    case (FieldType.shortTime): {\n                        if ((sourceType !== FieldType.time) &&\n                            (sourceType !== FieldType.shortTime)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is time, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.boolean): {\n                        if ((sourceType !== FieldType.boolean)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is boolean, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.integer):\n                    case (FieldType.float): {\n                        if ((sourceType !== FieldType.integer) &&\n                            (sourceType !== FieldType.float)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is number, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                }\n                convertedRule.fieldConditions.push({sourceField: sourceField, comparison: condition.comparison});\n                sourceField.addFieldListener(this);\n            }\n        });\n        logger(`Converted rule to `);\n        logger(convertedRule);\n\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === form.getId());\n        let formRuleSet: FormRuleSet;\n        // store the rules for later execution\n        if (index < 0) {\n            formRuleSet = {\n                form: form,\n                rules: []\n            }\n            formRuleSet.rules.push(convertedRule);\n            this.formRules.push(formRuleSet)\n        } else {\n            formRuleSet = this.formRules[index];\n            formRuleSet.rules.push(convertedRule);\n        }\n        logger(`Current set of rules for form ${form.getId()}`);\n        logger(formRuleSet);\n\n        return true;\n    }\n\n    public failedValidation(formId: string, field: FieldDefinition, currentValue: string, message: string): void {\n    } // ignored, we might be causing\n\n    public applyRulesToTargetField(formId: string, field: FieldDefinition, onlyRulesOfType: ConditionResponse | null): RuleCheck {\n        logger(`Checking rules for form ${formId}, data field ${field.id} of type ${onlyRulesOfType}`);\n        // which rules apply?\n        let rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id, false);\n\n        let result: RuleCheck = {\n            ruleFailed: false\n        }\n\n        // get the rules for the field, filtered by the condition response type\n        if (onlyRulesOfType) {\n            let ruleSubset: _ValidationRule[] = [];\n            rules.forEach((rule) => {\n                if (rule.response === onlyRulesOfType) {\n                    ruleSubset.push(rule);\n                }\n            });\n            rules = ruleSubset;\n        }\n\n\n        rules.forEach((rule) => { // we only want rules that make a field hidden\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                flogger(`Rule failed for form ${formId} with field ${field.displayName} with message ${response.message}`);\n                result.ruleFailed = true;\n                result.message = response.message;\n            }\n        });\n        return result;\n    }\n\n    public valueChanged(formId: string, field: FieldDefinition, newValue: string | null): void {\n        logger(`Handling field change - form ${formId}, data field ${field.id}, value ${newValue}`);\n        // a field we are listening to has changed\n        // which rules apply?\n        const rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id, true);\n        // execute each rule and collect the responses\n        let failedResponses: RuleResponse[] = [];\n\n        rules.forEach((rule) => {\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                failedResponses.push(response);\n            }\n        });\n\n        logger(`Have ${failedResponses.length} failed rules - applying each`);\n        // for each failed response let the target field know based on the response type\n        failedResponses.forEach((response) => {\n            switch (response.response) {\n                case ConditionResponse.hide: {\n                    logger(`Apply hide ${response.field.getId()}`);\n                    response.field.hide();\n                    break;\n                }\n                case ConditionResponse.show: {\n                    logger(`Apply show ${response.field.getId()}`);\n                    response.field.show();\n                    break;\n                }\n                case ConditionResponse.invalid: {\n                    logger(`Apply invalid ${response.field.getId()}`);\n                    if (response.message) response.field.setInvalid(response.message);\n                    break;\n                }\n                case ConditionResponse.valid: {\n                    logger(`Apply valid ${response.field.getId()}`);\n                    response.field.setValid();\n                    break;\n                }\n            }\n        })\n    }\n\n    private areTwoFieldsEqual(targetField: Field, sourceField: Field): RuleCheck {\n        if (targetField.getValue() !== sourceField.getValue()) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be equal to ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private compareTwoValuesWithTypes(targetType: FieldType, targetValue: string | null, sourceType: FieldType, sourceValue: string | null, comparison: ComparisonType): boolean {\n        if (!(targetValue) || !(sourceValue)) return false;  // no null comparisons\n\n        switch (targetType) {\n            case (FieldType.date): {\n                targetValue += ' 00:00:00';\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.datetime): {\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.time): {\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n            case (FieldType.shortTime): {\n                targetValue += ':00';\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n        }\n\n        logger(`Comparing ${targetValue} of type ${targetType} against ${sourceValue} of type ${sourceType}`);\n\n        switch (comparison) {\n            case ComparisonType.lessThan: {\n                return (targetValue < sourceValue);\n            }\n            case ComparisonType.lessThanEqual: {\n                return (targetValue <= sourceValue);\n            }\n            case ComparisonType.greaterThanEqual: {\n                return (targetValue >= sourceValue);\n            }\n            case ComparisonType.greaterThan: {\n                return (targetValue > sourceValue);\n            }\n            case ComparisonType.equals: {\n                return (targetValue === sourceValue);\n            }\n        }\n        return false;\n    }\n\n    private isTargetLessThanSource(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.lessThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be less than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetLessThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetLessThanSource(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be less than or equal to ${sourceField.getName()}`,\n                };\n\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetGreaterThan(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.greaterThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be greater than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isSourceNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((targetValue) && (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private isSourceNotNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((!targetValue) || (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must not be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private doesFieldHaveValue(field: Field, values: string): RuleCheck {\n        let targetValue = field.getValue();\n        logger(`does field ${field.getId()} have value from ${values} - current value is ${targetValue}`);\n        if (targetValue) {\n            // split the values by commas\n            let splits: string[] = values.split(',');\n            let foundInValue: boolean = false;\n            splits.forEach((split) => {\n                if (targetValue === split) {\n                    logger(`does field ${field.getId()} have value from ${values} - current value is ${targetValue} - found in value(s)`);\n                    foundInValue = true;\n                }\n            });\n            if (foundInValue) {\n                return {ruleFailed: false};\n            }\n        }\n        return {\n            ruleFailed: true,\n            message: `${field.getName()} must be have a value in ${values}`,\n        };\n    }\n\n    private doesSourceFieldHaveValue(field: Field, values: string): RuleCheck {\n        return this.doesFieldHaveValue(field, values);\n    }\n\n    private isTargetGreaterThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetGreaterThan(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be greater than or equal to ${sourceField.getName()}`,\n                };\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n    private compareFields(targetField: Field, sourceField: Field, comparison: ComparisonType, value: string): RuleCheck {\n        switch (comparison) {\n            case ComparisonType.equals: {\n                return this.areTwoFieldsEqual(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThan: {\n                return this.isTargetLessThanSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThanEqual: {\n                return this.isTargetLessThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThan: {\n                return this.isTargetGreaterThan(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThanEqual: {\n                return this.isTargetGreaterThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.isNull: {\n                return this.isSourceNull(sourceField);\n                break;\n            }\n            case ComparisonType.isNotNull: {\n                return this.isSourceNotNull(sourceField);\n                break;\n            }\n            case ComparisonType.hasValue: {\n                return this.doesSourceFieldHaveValue(sourceField, value);\n                break;\n            }\n        }\n    }\n\n    private executeRule(rule: _ValidationRule): RuleResponse {\n        let response: RuleResponse = {\n            field: rule.targetField,\n            ruleFailed: false,\n            response: rule.response,\n        }\n        // run each field comparison\n        logger(`Executing rule for target ${rule.targetField.getId()}`);\n        logger(rule);\n        rule.fieldConditions.every((condition) => {\n            logger('field condition rule');\n            logger(condition);\n            let values = (condition.values) ? condition.values : '';\n            let ruleCheck: RuleCheck = this.compareFields(rule.targetField, condition.sourceField, condition.comparison, values);\n            if (ruleCheck.ruleFailed) {\n                flogger('field condition rule FAILED');\n                response.ruleFailed = true;\n                // only need messages for invalid responses\n                response.message = ruleCheck.message;\n                return false;\n            }\n            flogger('field condition rule PASSED');\n            return true;\n        });\n        // run each value comparison if we haven't already failed\n        if (!response.ruleFailed) {\n            rule.valueConditions.forEach((condition) => {\n                logger('value condition rule');\n                logger(condition);\n                let ruleCheck: RuleCheck = this.compareFields(rule.targetField, rule.targetField, ComparisonType.hasValue, condition.values);\n                if (ruleCheck.ruleFailed) {\n                    flogger('value condition rule FAILED');\n                    response.ruleFailed = true;\n                    response.message = ruleCheck.message;\n                    return false;\n                }\n                flogger('value condition rule PASSED');\n                return true;\n            });\n        }\n        return response;\n    }\n\n    private getRulesForFieldChange(formId: string, dataFieldId: string, includeSourceFields: boolean): _ValidationRule[] {\n        let rules: _ValidationRule[] = [];\n        // lets go through the rules for the form\n        logger(`Finding rules for form ${formId} and data field ${dataFieldId}`);\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === formId);\n        if (index >= 0) {\n            const ruleSet: FormRuleSet = this.formRules[index];\n\n            // the dataFieldId could be the target or one of the sources\n            ruleSet.rules.forEach((rule) => {\n                if (rule.targetField.getId() === dataFieldId) {\n                    logger(`Found rule where data field ${dataFieldId} is target`);\n                    if (rule.targetField.isValid()) {\n                        rules.push(rule);\n                    } else {\n                        flogger(`Found rule where data field ${dataFieldId} is target but value is not currently valid`);\n                    }\n                } else {\n                    if (includeSourceFields) {\n                        rule.fieldConditions.every((value: { sourceField: Field, comparison: ComparisonType }) => {\n                            if (value.sourceField.getId() === dataFieldId) {\n                                logger(`Found rule where data field ${dataFieldId} is source`);\n                                if (value.sourceField.isValid()) {\n                                    rules.push(rule);\n                                } else {\n                                    flogger(`Found rule where data field ${dataFieldId} is source but value is not currently valid`);\n                                }\n                                return false;\n                            }\n                            return true;\n                        });\n                    }\n                }\n            });\n        }\n        return rules;\n    }\n\n\n}","import {Form} from \"./Form\";\nimport {FormEvent, FormEventType, FormListener} from \"./FormListener\";\nimport {FieldListener} from \"./field/FieldListener\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {AttributeFieldMapItem, DisplayOrder, FieldUIConfig, FormUIDefinition} from \"./FormUITypeDefs\";\nimport {Field} from \"./field/Field\";\n\nimport debug from 'debug';\nimport {RuleCheck, ValidationManager} from \"./validation/ValidationManager\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\nimport {ConditionResponse} from \"./validation/ValidationTypeDefs\";\nimport {v4} from \"uuid\";\n\nconst logger = debug('abstract-form');\nconst dlogger = debug('abstract-form-detail');\nconst vlogger = debug('abstract-form-detail-validation');\n\n\nexport abstract class AbstractForm implements Form, FormListener, AlertListener, FieldListener {\n    protected formListeners: FormListener[] = [];\n    protected fieldListeners: FieldListener[] = [];\n    protected currentDataObj: any;\n    protected dataObjDef: DataObjectDefinition;\n    protected containerEl: HTMLElement | null;\n    protected uiDef: FormUIDefinition | null = null;\n    protected isVisible: boolean = false;\n    protected fields: Field[] = [];\n    protected map: AttributeFieldMapItem[];\n    protected isInitialised: boolean = false;\n    protected hasChangedBoolean: boolean = false;\n    protected isDisplayOnly: boolean = false;\n    protected id: string;\n\n\n    protected constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        this.containerEl = document.getElementById(containerId);\n        if (!(this.containerEl)) throw new Error(`container ${containerId} for form ${dataObjDef.id} does not exist`);\n\n        this.map = [];\n        this.dataObjDef = dataObjDef;\n        this.currentDataObj = {};\n        this.id = v4();\n        // sub-classes need to create the form and it's fields\n\n        // listen to ourselves\n        this.addFormListener(this);\n    }\n\n    public hasChanged(): boolean {\n        return this.hasChangedBoolean;\n    }\n\n    getName(): string {\n        return this.dataObjDef.displayName;\n    }\n\n    valueChanged(formId: String, field: FieldDefinition, newValue: string | null): void {\n        this.hasChangedBoolean = true;\n        this.setUnsavedMessage();\n        logger(`Form has changed`);\n    }\n\n    failedValidation(formId: String, field: FieldDefinition, currentValue: string, message: string): void {\n        this.hasChangedBoolean = true;\n        logger(`Form has changed`);\n    }\n\n    public abstract getFormattedDataObject(): any;\n\n    public initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): void {\n        if (this.isInitialised) return;\n        this.isInitialised = true;\n        this._initialise(displayOrder, hasDeleteButton, hideModifierFields);\n    }\n\n    public addFieldListener(listener: FieldListener): void {\n        this.fieldListeners.push(listener);\n    }\n\n    public addFormListener(listener: FormListener): void {\n        this.formListeners.push(listener);\n    }\n\n    public reset(): void {\n        logger(`Resetting form`);\n        this.clearUnsavedMessage();\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n\n        // inform the listeners\n        if (this.uiDef) {\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: FormEventType.RESETTING\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.currentDataObj = {};\n        this._reset();\n        // reset all the fields\n        this.fields.forEach((field) => {\n            field.reset();\n        });\n        this.hasChangedBoolean = false;\n    }\n\n    public setIsVisible(isVisible: boolean): void {\n        logger(`Changing visibility to ${isVisible}`);\n        this.isVisible = isVisible;\n        if (this.uiDef) {\n            let eventType = FormEventType.HIDDEN;\n            if (this.isVisible) {\n                this._visible();\n                eventType = FormEventType.SHOWN;\n            } else {\n                this._hidden();\n            }\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        if (isVisible && !this.isDisplayOnly) this.checkFormValidationOnDisplay();\n        if (isVisible && this.isDisplayOnly) this.checkForVisualValidationForDisplayOnly();\n    }\n\n    public startCreateNew(): any {\n        this.clearUnsavedMessage();\n        logger(`Starting create new`);\n        this.reset();\n        this.currentDataObj = {};\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        if (this.uiDef) {\n            let eventType = FormEventType.CREATING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startCreate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n        return this.currentDataObj;\n    }\n\n    public startUpdate(objectToEdit: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting modify existing on `);\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        logger(objectToEdit);\n        this.currentDataObj = {...objectToEdit}; // take a copy\n\n        if (this.uiDef) {\n            let eventType = FormEventType.MODIFYING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startUpdate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n    }\n\n    displayOnly(objectToView: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting display only `);\n        logger(objectToView);\n        this.isDisplayOnly = true;\n        this.hasChangedBoolean = false;\n        this.currentDataObj = {...objectToView}; // take a copy\n\n        if (this.uiDef) {\n            this._displayOnly();\n        }\n        this.setReadOnly();\n    }\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        let shouldCancelChange = false;\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                if (this.hasChangedBoolean && !this.isDisplayOnly) {\n                    if (this.uiDef) {\n                        AlertManager.getInstance().startAlert(this, this.uiDef.displayName, `Lose any unsaved changes?`, FormEventType.CANCELLING);\n                    }\n                } else {\n                    if (this.uiDef) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                }\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                // user cancelled the form, will become invisible\n                this.isDisplayOnly = true;\n                this.reset(); // reset the form state\n                this.setReadOnly();\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                if (this.uiDef) {\n                    AlertManager.getInstance().startAlert(this, this.uiDef.displayName, `Are you sure you want to delete this information?`, FormEventType.DELETING);\n                }\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                // user is deleting the object, will become invisible\n                this.reset();\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                this._saveFinishedOrAborted();\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                this._saveFinishedOrAborted();\n                logger(`Form is saved with data`);\n                logger(formValues);\n                this.isDisplayOnly = false;\n                this.hasChangedBoolean = false;\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving, checking validation and storing values`);\n                this._saveIsActive();\n                if (this.uiDef) {\n                    let allFieldsValid: boolean = true;\n\n                    // user attempting to save the form, lets check the field validation\n                    this.fields.forEach((field) => {\n                        const currentValue = field.getValue();\n                        if (!field.isValid()) {\n                            vlogger(`Field ${field.getId()} is invalid`);\n                            field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n                            allFieldsValid = false;\n                        } else {\n                            // does the field fulfil any rules from the Validation manager\n                            // @ts-ignore\n                            const response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(), ConditionResponse.invalid);\n                            if (response.ruleFailed) {\n                                // @ts-ignore\n                                field.setInvalid(response.message);\n                                vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                                allFieldsValid = false;\n                            } else {\n                                this.setFieldValueToDataObject(this.currentDataObj, field, currentValue);\n                            }\n                        }\n                    });\n\n                    // is every field valid?\n                    if (!allFieldsValid) {\n                        logger(`Form is saving, checking validation - FAILED`);\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.SAVE_ABORTED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                        shouldCancelChange = true;\n                    } else {\n                        logger(`formatted data object is`);\n                        const formattedDataObject = this.getFormattedDataObject();\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.SAVED\n                        }\n                        this.informFormListeners(formEvent, formattedDataObject);\n                    }\n                    break;\n                }\n            }\n        }\n        return shouldCancelChange;\n    }\n\n    getId(): string {\n        return this.id;\n    }\n\n    getFieldFromDataFieldId(dataFieldId: string): Field | undefined {\n        let result: Field | undefined = undefined;\n        dlogger(`Finding field for attribute ${dataFieldId} `);\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === dataFieldId);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId}`);\n            // find the field with that id\n            result = this.fields.find((field) => field.getId() === mapItem.attributeId);\n        }\n\n        return result;\n    }\n\n    completed(event: AlertEvent): void {\n        logger(`Handling alert completed`);\n        logger(event);\n        if (event.context && this.uiDef) {\n            switch (event.context) {\n                case (FormEventType.CANCELLING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    } else {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLING_ABORTED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                    break;\n                }\n                case (FormEventType.DELETING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.DELETED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    } else {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.DELETE_ABORTED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                    break;\n                }\n            }\n\n        }\n    }\n\n    clearReadOnly(): void {\n        this.fields.forEach((field) => {\n            field.clearReadOnly();\n        });\n    }\n\n    setReadOnly(): void {\n        this.fields.forEach((field) => {\n            field.setReadOnly();\n        });\n    }\n\n    isDisplayingItem(dataObj: any): boolean {\n        if (this.currentDataObj) {\n            return this._isSameObjectAsDisplayed(dataObj);\n        }\n        return false;\n    }\n\n    isReadOnly(): boolean {\n        return this.isDisplayOnly;\n    }\n\n    /* methods to be implemented in the subclass */\n    protected abstract _startUpdate(): void;\n\n    protected abstract _startCreate(): void;\n\n    protected abstract _reset(): void;\n\n    protected abstract _visible(): void;\n\n    protected abstract _hidden(): void;\n\n    protected abstract _initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean): void;\n\n    protected abstract _displayOnly(): void;\n\n    protected abstract _isSameObjectAsDisplayed(dataObj: any): boolean;\n\n    protected abstract setFieldValueToDataObject(dataObj: any, field: Field, currentValue: string | null): void;\n\n    protected abstract _saveFinishedOrAborted(): void;\n\n    protected abstract _saveIsActive(): void;\n\n    protected abstract clearUnsavedMessage(): void;\n\n    protected abstract setUnsavedMessage(): void;\n\n    protected informFormListeners(formEvent: FormEvent, dataObj?: any) {\n        this.formListeners.forEach((listener) => listener.formChanged(formEvent, dataObj));\n    }\n\n    protected findFieldUiConfig(fieldDef: FieldDefinition): FieldUIConfig | null | undefined {\n        dlogger(`Finding field UI Config for field ${fieldDef.displayName}`);\n        let result: FieldUIConfig | null | undefined = null;\n        if (this.uiDef) {\n            let index = 0;\n            while (index < this.uiDef.fieldGroups.length) {\n                const fieldGroup = this.uiDef.fieldGroups[index];\n                result = fieldGroup.fields.find((uiConfig) => uiConfig.field.id === fieldDef.id);\n                if (result) {\n                    dlogger(`Finding field UI Config for field ${fieldDef.displayName} - Found`);\n                    break;\n                }\n                index++;\n            }\n        }\n        return result;\n    }\n\n    protected checkForVisualValidationForDisplayOnly() {\n        logger(`Checking display validation for display only`);\n        this.fields.forEach((field) => {\n            field.show();\n            // @ts-ignore\n            let response = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(), ConditionResponse.hide);\n            if (response.ruleFailed) {\n                // @ts-ignore\n                field.hide();\n                vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n            }\n\n        });\n    }\n\n    protected checkFormValidationOnDisplay() {\n        logger(`Checking display validation`);\n\n        this.fields.forEach((field) => {\n            field.show();\n            const currentValue = field.getValue();\n            if (!field.isValid()) {\n                logger(`Field ${field.getId()} is invalid`);\n                field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n            } else {\n                // does the field fulfil any rules from the Validation manager\n                // @ts-ignore\n                let response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(), ConditionResponse.invalid);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.setInvalid(response.message);\n                    vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                }\n                // @ts-ignore\n                response = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(), ConditionResponse.hide);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.hide();\n                    vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n                }\n            }\n        });\n\n    }\n\n\n}","import {FieldFormatter, FieldValidator, ValidationResponse} from \"../form/FormUITypeDefs\";\nimport {FieldDefinition, FieldValueGenerator} from \"../../model/DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class RBGFieldOperations implements FieldFormatter, FieldValidator, FieldValueGenerator {\n    private radioButtons: HTMLInputElement[] = [];\n\n    public constructor() {\n    }\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for RBG ${field.displayName} with value ${currentValue}`);\n        let result: any = currentValue;\n        // find the current selected radio button\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.checked) {\n                result = radioButton.value;\n                if (field.idType === KeyType.number) {\n                    result = parseInt(result);\n                }\n            }\n        });\n\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: false,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            this.radioButtons.forEach((radioButton) => {\n                if (radioButton.checked) {\n                    response.isValid = true;\n                }\n            });\n            if (!response.isValid) {\n                response.message = `${field.displayName} is required. Please select one of the values.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n        } else {\n            response.isValid = true;\n        }\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.value === currentValue) radioButton.checked = true;\n        });\n        return null;\n    }\n\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        return '';\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n        this.radioButtons = elements;\n    }\n\n\n}","import {BasicFieldOperations} from \"../../model/BasicFieldOperations\";\nimport {DataObjectDefinition, FieldType} from \"../../model/DataObjectTypeDefs\";\nimport {DisplayOrder, FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../form/FormUITypeDefs\";\n\nimport debug from 'debug';\nimport {RBGFieldOperations} from \"./RBGFieldOperations\";\nimport {FIELD_CreatedOn, FIELD_ModifiedOn} from \"../../model/BasicObjectDefinitionFactory\";\n\nconst logger = debug('bootstrap-form-config-helper');\n\nexport class BootstrapFormConfigHelper {\n\n    private static _instance: BootstrapFormConfigHelper;\n\n    private constructor() {\n    }\n\n    public static getInstance(): BootstrapFormConfigHelper {\n        if (!(BootstrapFormConfigHelper._instance)) {\n            BootstrapFormConfigHelper._instance = new BootstrapFormConfigHelper();\n        }\n        return BootstrapFormConfigHelper._instance;\n    }\n\n    public generateFormConfig(dataObjDef: DataObjectDefinition, displayOrders: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): FormUIDefinition {\n        let fieldOperations: BasicFieldOperations = new BasicFieldOperations();\n        let rbgFieldOperation: RBGFieldOperations = new RBGFieldOperations();\n\n        // create the Field UI config for each field\n        let fieldUIConfigs: FieldUIConfig[] = [];\n        dataObjDef.fields.forEach((fieldDef, index) => {\n\n            let fieldType: UIFieldType = UIFieldType.text;\n            switch (fieldDef.type) {\n                case (FieldType.time):\n                case (FieldType.text):\n                case (FieldType.date):\n                case (FieldType.shortTime):\n                case (FieldType.duration): {\n                    break;\n                }\n                case (FieldType.datetime): {\n                    // is this the created or modified date\n                    if (hideModifierFields) {\n                        if (fieldDef.id === FIELD_CreatedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                        if (fieldDef.id === FIELD_ModifiedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                    }\n                    break;\n                }\n                case (FieldType.userId): {\n                    if (hideModifierFields) {\n                        fieldType = UIFieldType.hidden;\n                    } else {\n                        fieldType = UIFieldType.text;\n                    }\n                    break;\n                }\n                case (FieldType.uuid):\n                case (FieldType.id): {\n                    fieldType = UIFieldType.hidden;\n                    break;\n                }\n                case (FieldType.integer):\n                case (FieldType.float): {\n                    fieldType = UIFieldType.number;\n                    break;\n                }\n                case (FieldType.email): {\n                    fieldType = UIFieldType.email;\n                    break;\n                }\n                case (FieldType.password): {\n                    fieldType = UIFieldType.password;\n                    break;\n                }\n                case (FieldType.boolean): {\n                    fieldType = UIFieldType.checkbox;\n                    break;\n                }\n                case (FieldType.largeText): {\n                    fieldType = UIFieldType.textarea;\n                    break;\n                }\n                case (FieldType.choice): {\n                    fieldType = UIFieldType.select;\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    fieldType = UIFieldType.radioGroup;\n                    break;\n                }\n            }\n\n            // see if the field was supplied with a display order\n            const displayOrder: DisplayOrder | undefined = displayOrders.find((value) => value.fieldId === fieldDef.id);\n            let displayOrderValue: number = index;\n            if (displayOrder) {\n                displayOrderValue = displayOrder.displayOrder;\n            }\n\n            // construct the field ui config\n            let fieldUIConfig: FieldUIConfig = {\n                field: fieldDef,\n                displayOrder: displayOrderValue,\n                elementType: fieldType,\n                elementClasses: 'form-control col-md-12 col-lg-9',\n                renderer: fieldOperations,\n                formatter: fieldOperations,\n            }\n\n            if ((fieldDef.type !== FieldType.id) && (fieldDef.type !== FieldType.uuid) && (fieldType !== UIFieldType.hidden)) { // no labels, descriptions, container for id,uuid\n                fieldUIConfig.containedBy = {\n                    elementType: 'div',\n                    elementClasses: 'form-group row'\n                };\n\n                fieldUIConfig.label = {\n                    label: fieldDef.displayName,\n                    classes: 'col-md-12 col-lg-3 col-form-label'\n                };\n                if (fieldDef.description) { // descriptions if the field has one\n                    fieldUIConfig.describedBy = {\n                        message: fieldDef.description,\n                        elementType: 'small',\n                        elementClasses: 'text-muted col-md-12 col-lg-9 offset-lg-3 mt-1'\n                    }\n                }\n                if (!fieldDef.displayOnly) { // no validator for readonly items\n                    fieldUIConfig.validator = {\n                        validator: fieldOperations,\n                        messageDisplay: {\n                            elementType: 'div',\n                            elementClasses: 'invalid-feedback col-md-12 col-lg-9 offset-lg-3'\n                        },\n                        validClasses: 'is-valid',\n                        invalidClasses: 'is-invalid',\n                    };\n                }\n            }\n\n            // text areas\n            if (fieldDef.type === FieldType.largeText) {\n                fieldUIConfig.textarea = {\n                    rows: 5,\n                    cols: 20\n                }\n            }\n            // select\n            if (fieldDef.type === FieldType.choice) { // subelements are options, with no classes, no labels, and no other container\n                fieldUIConfig.subElement = {\n                    element: {elementType: 'option', elementClasses: ''},\n                };\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n            // radio button group\n            if (fieldDef.type === FieldType.limitedChoice) {\n                fieldUIConfig.subElement = {\n                    element: {\n                        elementType: 'input',\n                        elementClasses: 'form-check-input',\n                        elementAttributes: [{name: 'type', value: 'radio'}]\n                    },\n                    container: {\n                        elementType: 'div',\n                        elementClasses: 'form-check form-check-inline'\n                    },\n                    label: {\n                        label: 'label',\n                        classes: 'form-check-label',\n                    },\n                }\n                fieldUIConfig.renderer = rbgFieldOperation;\n                if (fieldUIConfig.validator) fieldUIConfig.validator.validator = rbgFieldOperation;\n                fieldUIConfig.formatter = rbgFieldOperation;\n\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n\n\n            fieldUIConfigs.push(fieldUIConfig);\n        });\n        // create a form with a single group and button container with Bootstrap styles\n        const fieldGroup: FieldGroup = {\n            containedBy: {\n                elementType: 'div',\n                elementClasses: 'col-sm-12',\n            },\n            fields: fieldUIConfigs\n        }\n\n        const formConfig: FormUIDefinition = {\n            id: dataObjDef.id,\n            displayName: dataObjDef.displayName,\n            fieldGroups: [fieldGroup],\n            unsavedChanges: {\n                elementType: 'div',\n                elementClasses: 'invalid-feedback text-right col-md-12 col-lg-9 offset-lg-3',\n                elementAttributes: [{name: 'style', value: 'display:block'}],\n                innerHTML: `Pending changes to ${dataObjDef.displayName}`,\n            },\n            buttonsContainedBy: {\n                elementType: 'div',\n                elementClasses: 'd-flex w-100 justify-space-between',\n            },\n            cancelButton: {\n                buttonText: 'Cancel  ',\n                buttonClasses: 'btn-info rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-ban'\n            },\n            submitButton: {\n                buttonText: 'Save  ',\n                buttonClasses: 'btn-primary rounded p-1 mt-2 w-100',\n                iconClasses: 'fas fa-save'\n            },\n            activeSave: '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>&nbsp;',\n        }\n        // sort the fields into display order\n\n        formConfig.fieldGroups.forEach((group) => {\n            group.fields.sort((a, b) => {\n                return (a.displayOrder - b.displayOrder);\n            })\n\n        });\n\n        if (hasDeleteButton) {\n            formConfig.deleteButton = {\n                buttonText: 'Delete  ',\n                buttonClasses: 'btn-warning rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-trash-alt'\n            };\n\n        }\n\n\n        logger(formConfig);\n        return formConfig;\n    }\n}","import {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class ValidationEventHandler {\n    private formId: string;\n    private fieldConfig: FieldUIConfig;\n    private listeners: FieldListener[];\n    private subElements: HTMLInputElement[] | null;\n\n    constructor(formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    public setValidationStatusAndMessage(fieldElement: HTMLElement, isValid: boolean, value: string, message: string | undefined = undefined, resetOnFailure: boolean = false) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            let validationElementTarget = fieldElement; // we are providing user feedback on the field element, unless...\n            if (this.subElements) { // sub elements change the validation target\n                this.fieldConfig.validator.validator.setSubElements(this.subElements);\n                if (this.fieldConfig.subElement) { // should be targetting the parentelement\n                    let parentEl = fieldElement.parentElement;\n                    if (parentEl) {\n                        validationElementTarget = parentEl;\n                        if (this.fieldConfig.subElement.container) { // another layer up required\n                            parentEl = parentEl.parentElement;\n                            if (parentEl) {\n                                validationElementTarget = parentEl;\n                            }\n                        }\n                    }\n                }\n            }\n            const errorMessageDiv = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error`);\n            const errorMessageEl = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error.message`);\n\n            // clear any previous message\n            errorMessageDiv?.setAttribute('style', 'display:none');\n            if (errorMessageEl) errorMessageEl.innerHTML = '';\n\n            if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses, false);\n            if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses);\n\n            if (!isValid) {\n                if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses);\n                if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses, false);\n\n                if (!message) {\n                    message = `${field.displayName} does not have a valid value.`;\n                }\n                // show the error message\n                errorMessageDiv?.setAttribute('style', 'display:block')\n                if (errorMessageEl) errorMessageEl.innerHTML = message;\n\n                if (resetOnFailure) {\n                    switch (field.type) {\n                        case (FieldType.boolean): {\n                            // @ts-ignore\n                            fieldElement.checked = false;\n                            break;\n                        }\n                        case (FieldType.integer): {\n                            // @ts-ignore\n                            fieldElement.value = '0';\n                            break;\n                        }\n                        case (FieldType.float): {\n                            // @ts-ignore\n                            fieldElement.value = '0.0';\n                            break;\n                        }\n                        default: {\n                            // @ts-ignore\n                            fieldElement.value = '';\n                            break;\n                        }\n                    }\n                }\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.failedValidation(this.formId, field, value, message));\n            }\n        }\n\n    }\n\n    processValidation(fieldElement: HTMLElement) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            // @ts-ignore\n            let value: string = fieldElement.value;\n            // checkboxes store values differently\n            if (this.fieldConfig.elementType === UIFieldType.checkbox) { // @ts-ignore\n                value = '' + fieldElement.checked;\n            }\n            if (this.subElements) {\n                value = '';\n                this.subElements.forEach((subElement) => {\n                    if (subElement.checked) {\n                        value = subElement.value;\n                    }\n\n                });\n            }\n\n            const validationResp: ValidationResponse = this.fieldConfig.validator.validator.isValidValue(field, value);\n            this.setValidationStatusAndMessage(fieldElement, validationResp.isValid, value, validationResp.message, validationResp.resetOnFailure);\n        }\n    }\n\n    handleEvent(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processValidation(fieldElement);\n\n    }\n}","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class EditingEventListener {\n    private formId: string;\n    private fieldConfig: FieldUIConfig;\n    private listeners: FieldListener[];\n\n    constructor(formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[]) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    handleEvent(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        if (this.fieldConfig.editor) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            const newValue: string = this.fieldConfig.editor.editValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                this.listeners.forEach((listener) => listener.valueChanged(this.formId, field, newValue));\n\n            }\n        }\n    }\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {DATA_ID_ATTRIBUTE, FieldUIConfig, UIFieldType} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {EditingEventListener} from \"../event-handlers/EditingEventListener\";\nimport {FieldValueOptionsListener, ValueOption} from \"../../../model/CommonTypes\";\nimport {FieldType} from \"../../../model/DataObjectTypeDefs\";\n\nclass DefaultFieldOptionsListener implements FieldValueOptionsListener {\n    private formId: string;\n    private parentElement: HTMLElement;\n    private fieldUIConfig: FieldUIConfig;\n\n    constructor(formId: string, parentElement: HTMLElement, fieldUIConfig: FieldUIConfig) {\n        this.formId = formId;\n        this.parentElement = parentElement;\n        this.fieldUIConfig = fieldUIConfig;\n    }\n\n    optionsChanged(newOptions: ValueOption[]): void {\n        browserUtil.removeAllChildren(this.parentElement);\n        let subEls: HTMLElement[] = FieldInputElementFactory.createSubElements(this.formId, this.parentElement, this.fieldUIConfig, newOptions);\n\n    }\n\n}\n\nexport class FieldInputElementFactory {\n\n    private static _instance: FieldInputElementFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): FieldInputElementFactory {\n        if (!(FieldInputElementFactory._instance)) {\n            FieldInputElementFactory._instance = new FieldInputElementFactory();\n        }\n        return FieldInputElementFactory._instance;\n    }\n\n    public static initialiseFieldElementAndEventHandlers(fieldElement: HTMLElement, formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements: HTMLInputElement[] | null = null): void {\n        fieldElement.setAttribute('id', `${formId}.field.${fieldConfig.field.id}`);\n        fieldElement.setAttribute(DATA_ID_ATTRIBUTE, fieldConfig.field.id);\n        fieldElement.setAttribute('name', fieldConfig.field.id);\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(fieldElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(fieldElement, fieldConfig.elementClasses);\n\n        // readonly field?\n        if (fieldConfig.field.displayOnly) {\n            browserUtil.addAttributes(fieldElement, [{name: 'disabled', value: 'true'}, {\n                name: 'readonly',\n                value: 'true'\n            }])\n        }\n        /*\n        setup event handlers\n        */\n        if (fieldConfig.validator) { // is the value in the field valid\n            const eventHandler = new ValidationEventHandler(formId, fieldConfig, listeners, subElements);\n            if (subElements) { // event for the subelements\n                subElements.forEach((subElement) => {\n                    subElement.addEventListener('blur', eventHandler);\n                });\n\n            } else {\n                fieldElement.addEventListener('blur', eventHandler);\n            }\n\n        }\n\n        if (fieldConfig.editor) { // render the value when the field gains focus\n            fieldElement.addEventListener('focus', new EditingEventListener(formId, fieldConfig, listeners));\n        } // care for endless loops here, renderer needs to return null if no changes\n\n        // date picker for date fields\n        if (fieldConfig.field.type === FieldType.date) {\n            $(fieldElement).datepicker();\n            $(fieldElement).datepicker(\"option\", \"dateFormat\", 'dd/mm/yy');\n        }\n\n    }\n\n\n    public static createFieldComponentsAndContainer(fieldElement: HTMLElement, formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): void {\n\n        // if the field has a validator, then we need a div for error messages\n        let errorMessageDivEl: HTMLElement | null = null;\n\n        if (fieldConfig.validator) {\n            errorMessageDivEl = document.createElement('div');\n            errorMessageDivEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error`);\n            errorMessageDivEl.setAttribute('style', 'display: none'); // default to not visible\n            browserUtil.addRemoveClasses(errorMessageDivEl, fieldConfig.validator.messageDisplay.elementClasses);\n            let messageEl = document.createElement(fieldConfig.validator.messageDisplay.elementType);\n            if (messageEl) {\n                messageEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error.message`);\n                if (fieldConfig.validator.messageDisplay.elementAttributes) browserUtil.addAttributes(messageEl, fieldConfig.validator.messageDisplay.elementAttributes);\n                errorMessageDivEl.appendChild(messageEl);\n            }\n        }\n\n\n        // ok, so is the field contained?\n        if (fieldConfig.containedBy) {\n            // we need to create a container for the field and option label and description text\n            let containedByEl = document.createElement(fieldConfig.containedBy.elementType);\n            if (containedByEl) {\n                browserUtil.addRemoveClasses(containedByEl, fieldConfig.containedBy.elementClasses);\n                containedByEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.container`);\n\n                if (fieldConfig.containedBy.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.containedBy.elementAttributes);\n                // do we have a label also?\n                if (fieldConfig.label) {\n                    let labelEl: HTMLLabelElement = document.createElement('label');\n                    labelEl.setAttribute('for', `${formId}.field.${fieldConfig.field.id}`);\n                    labelEl.innerHTML = fieldConfig.field.displayName;\n                    if (fieldConfig.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.label.attributes);\n                    if (fieldConfig.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.label.classes);\n                    containedByEl.appendChild(labelEl);\n                }\n                if (fieldConfig.describedBy) {\n                    let descEl: HTMLElement = document.createElement(fieldConfig.describedBy.elementType);\n                    if (descEl) {\n                        // link the field and the description\n                        descEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.field.description) descEl.innerHTML = fieldConfig.field.description;\n                        fieldElement.setAttribute('aria-describedby', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.describedBy.elementClasses) browserUtil.addRemoveClasses(descEl, fieldConfig.describedBy.elementClasses);\n                        containedByEl.appendChild(fieldElement);\n                        containedByEl.appendChild(descEl);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    } else { // description failure, add the field\n                        containedByEl.appendChild(fieldElement);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    }\n                } else { // no description, add field to container\n                    containedByEl.appendChild(fieldElement);\n                    if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                }\n                containerEl.appendChild(containedByEl);\n            } else { // errors should keep making something!\n                containerEl.appendChild(fieldElement);\n                if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n            }\n        } else {\n            containerEl.appendChild(fieldElement);\n            if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n        }\n\n    }\n\n    public static createSubElements(formId: string, parentEl: HTMLElement, fieldConfig: FieldUIConfig, valueOptions: ValueOption[]): HTMLElement[] {\n        let results: HTMLElement[] = [];\n\n        valueOptions.forEach((valueOption, index) => {\n            if (fieldConfig.subElement) {\n                let containerEl: HTMLElement = parentEl;\n                // is there a container?\n                if (fieldConfig.subElement.container) {\n                    containerEl = document.createElement(fieldConfig.subElement.container.elementType);\n                    browserUtil.addRemoveClasses(containerEl, fieldConfig.subElement.container.elementClasses);\n                    if (fieldConfig.subElement.container.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.subElement.container.elementAttributes);\n                    parentEl.appendChild(containerEl);\n                }\n                let valueEl: HTMLElement = document.createElement(fieldConfig.subElement.element.elementType);\n                valueEl.setAttribute('value', valueOption.value);\n                valueEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.${index}`);\n                valueEl.setAttribute('name', `${formId}.field.${fieldConfig.field.id}`);\n\n                browserUtil.addRemoveClasses(valueEl, fieldConfig.subElement.element.elementClasses);\n                if (fieldConfig.subElement.element.elementAttributes) browserUtil.addAttributes(valueEl, fieldConfig.subElement.element.elementAttributes);\n\n                containerEl.appendChild(valueEl);\n\n                if (fieldConfig.subElement.label) {\n                    let labelEl = document.createElement('label');\n                    if (fieldConfig.subElement.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.subElement.label.classes);\n                    if (fieldConfig.subElement.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.subElement.label.attributes);\n                    labelEl.innerHTML = valueOption.name;\n                    containerEl.appendChild(labelEl);\n                } else {\n                    valueEl.innerHTML = valueOption.name;\n                }\n                results.push(valueEl);\n            }\n        });\n        return results;\n    }\n\n    public createInputFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLInputElement { // return the input element\n        let fieldElement: HTMLInputElement = document.createElement('input');\n\n        switch (fieldConfig.elementType) {\n            case UIFieldType.checkbox: {\n                fieldElement.setAttribute('type', 'checkbox');\n                fieldElement.setAttribute('value', fieldConfig.field.id);\n                break;\n            }\n            case UIFieldType.email: {\n                fieldElement.setAttribute('type', 'email');\n                break;\n            }\n            case UIFieldType.hidden: {\n                fieldElement.setAttribute('type', 'hidden');\n                break;\n            }\n            case UIFieldType.number: {\n                fieldElement.setAttribute('type', 'number');\n                break;\n            }\n            case UIFieldType.password: {\n                fieldElement.setAttribute('type', 'password');\n                break;\n            }\n            case UIFieldType.text: {\n                fieldElement.setAttribute('type', 'text');\n                break;\n            }\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createTAFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLTextAreaElement { // return the input element\n        let fieldElement: HTMLTextAreaElement = document.createElement('textarea');\n        if (fieldConfig.textarea) {\n            fieldElement.setAttribute('rows', `${fieldConfig.textarea.rows}`);\n            fieldElement.setAttribute('cols', `${fieldConfig.textarea.cols}`);\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createSelectFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLSelectElement { // return the input element\n        let fieldElement: HTMLSelectElement = document.createElement('select');\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            FieldInputElementFactory.createSubElements(formId, fieldElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, fieldElement, fieldConfig));\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createRadioGroupFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]):\n        {\n            container: HTMLElement,\n            radioButtons: HTMLInputElement[]\n        } {\n        // create a div for each option in the source\n        // create the div for the radio group\n        let radioGroupElement: HTMLDivElement = document.createElement('div');\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(radioGroupElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(radioGroupElement, fieldConfig.elementClasses);\n\n        let subElements: HTMLInputElement[] = [];\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            // we should get the radio buttons back\n            subElements = <HTMLInputElement[]>FieldInputElementFactory.createSubElements(formId, radioGroupElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, radioGroupElement, fieldConfig));\n            // setup the subelements for the validator, formatter, and renderer\n            if (fieldConfig.validator) fieldConfig.validator.validator.setSubElements(subElements);\n            if (fieldConfig.renderer) fieldConfig.renderer.setSubElements(subElements);\n            if (fieldConfig.formatter) fieldConfig.formatter.setSubElements(subElements);\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(radioGroupElement, formId, fieldConfig, listeners, subElements);\n        FieldInputElementFactory.createFieldComponentsAndContainer(radioGroupElement, formId, containerEl, fieldConfig, listeners);\n        return {\n            container: radioGroupElement,\n            radioButtons: subElements\n        };\n\n    }\n\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldInputElementFactory} from \"./FieldInputElementFactory\";\nimport {BasicButtonElement} from \"../../ConfigurationTypes\";\nimport {Form} from \"../Form\";\nimport {FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../FormUITypeDefs\";\nimport {FormEvent, FormEventType, FormListener} from \"../FormListener\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport type FormFactoryResponse = {\n    form: HTMLFormElement,\n    unsavedMessage: HTMLElement,\n    fields: HTMLInputElement[],\n    textFields: HTMLTextAreaElement[],\n    selectFields: HTMLSelectElement[],\n    radioButtonGroups: {\n        container: HTMLElement,\n        radioButtons: HTMLInputElement[]\n    }[],\n    deleteButton?: HTMLButtonElement,\n    cancelButton: HTMLButtonElement,\n    submitButton: HTMLButtonElement,\n}\n\nexport class FormElementFactory {\n\n    private static _instance: FormElementFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): FormElementFactory {\n        if (!(FormElementFactory._instance)) {\n            FormElementFactory._instance = new FormElementFactory();\n        }\n        return FormElementFactory._instance;\n    }\n\n    public createFormElements(form: Form, formListeners: FormListener[], formConfig: FormUIDefinition, fieldListeners: FieldListener[]): FormFactoryResponse {\n        let formEl: HTMLFormElement = document.createElement('form');\n        formEl.setAttribute('id', formConfig.id);\n        formEl.setAttribute('name', formConfig.displayName);\n\n        if (formConfig.classes) browserUtil.addRemoveClasses(formEl, formConfig.classes);\n        // create each of the fields and collect them\n        let formInputElements: HTMLInputElement[] = [];\n        let formTAElements: HTMLTextAreaElement[] = [];\n        let formRBGElements: {\n            container: HTMLElement,\n            radioButtons: HTMLInputElement[]\n        }[] = [];\n        let formSelectElements: HTMLSelectElement[] = [];\n\n        let unsavedMessage: HTMLElement = document.createElement(formConfig.unsavedChanges.elementType);\n        browserUtil.addRemoveClasses(unsavedMessage, formConfig.unsavedChanges.elementClasses);\n        if (formConfig.unsavedChanges.elementAttributes) browserUtil.addAttributes(unsavedMessage, formConfig.unsavedChanges.elementAttributes);\n\n        formEl.appendChild(unsavedMessage);\n\n        formConfig.fieldGroups.forEach((group: FieldGroup) => {\n            // if the group has a container make that, otherwise the form is the container\n            let containerEl = formEl;\n            if (group.containedBy) {\n                // @ts-ignore\n                containerEl = document.createElement(group.containedBy.elementType);\n                if (containerEl) {\n                    if (group.containedBy.elementAttributes) browserUtil.addAttributes(containerEl, group.containedBy.elementAttributes);\n                    if (group.containedBy.elementClasses) browserUtil.addRemoveClasses(containerEl, group.containedBy.elementClasses);\n                    formEl.appendChild(containerEl);\n                }\n            }\n            group.fields.forEach((field: FieldUIConfig) => {\n                switch (field.elementType) {\n                    case (UIFieldType.textarea): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createTAFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formTAElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.select): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createSelectFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formSelectElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.radioGroup): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createRadioGroupFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formRBGElements.push(fieldEl);\n                        break;\n                    }\n                    default: {\n                        const fieldEl = FieldInputElementFactory.getInstance().createInputFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formInputElements.push(fieldEl);\n                    }\n                }\n            });\n        });\n\n        /* setup the buttons */\n        let buttonContainer: HTMLElement = formEl;\n\n        if (formConfig.buttonsContainedBy) {\n            buttonContainer = document.createElement(formConfig.buttonsContainedBy.elementType);\n            if (buttonContainer) {\n                if (formConfig.buttonsContainedBy.elementAttributes) browserUtil.addAttributes(buttonContainer, formConfig.buttonsContainedBy.elementAttributes);\n                browserUtil.addRemoveClasses(buttonContainer, formConfig.buttonsContainedBy.elementClasses);\n                formEl.appendChild(buttonContainer);\n            } else {\n                buttonContainer = formEl; // couldn't create the button container, use the form\n            }\n        }\n\n        let deleteButtonEl: HTMLButtonElement | undefined = undefined;\n        if (formConfig.deleteButton) {\n            deleteButtonEl = this.createFormButton(form, formConfig, formListeners, formConfig.deleteButton, FormEventType.DELETING);\n            buttonContainer.appendChild(deleteButtonEl);\n        }\n\n        let cancelButtonEl: HTMLButtonElement = this.createFormButton(form, formConfig, formListeners, formConfig.cancelButton, FormEventType.CANCELLING);\n        buttonContainer.appendChild(cancelButtonEl);\n\n        let submitButtonEl: HTMLButtonElement = this.createFormButton(form, formConfig, formListeners, formConfig.submitButton, FormEventType.SAVING);\n        buttonContainer.appendChild(submitButtonEl);\n\n        let result: FormFactoryResponse = {\n            form: formEl,\n            unsavedMessage: unsavedMessage,\n            fields: formInputElements,\n            selectFields: formSelectElements,\n            radioButtonGroups: formRBGElements,\n            textFields: formTAElements,\n            deleteButton: deleteButtonEl,\n            cancelButton: cancelButtonEl,\n            submitButton: submitButtonEl\n        }\n\n        return result;\n    }\n\n    private createFormButton(form: Form, formConfig: FormUIDefinition, formListeners: FormListener[], buttonDef: BasicButtonElement, eventType: FormEventType): HTMLButtonElement {\n        let buttonEl: HTMLButtonElement = document.createElement('button');\n        browserUtil.addRemoveClasses(buttonEl, buttonDef.buttonClasses);\n        buttonEl.setAttribute('id', `${formConfig.id}.${eventType}`);\n        if (buttonDef.buttonText) {\n            buttonEl.innerText = buttonDef.buttonText;\n        }\n        if (buttonDef.iconClasses) {\n            let iconEl = document.createElement('i');\n            if (iconEl) {\n                browserUtil.addRemoveClasses(iconEl, buttonDef.iconClasses);\n                buttonEl.appendChild(iconEl);\n            }\n        }\n        /* setup the event handler for the button */\n        buttonEl.addEventListener('click', (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            let formEvent: FormEvent = {\n                target: form,\n                formId: formConfig.id,\n                eventType: eventType\n            }\n            formListeners.forEach((listener) => listener.formChanged(formEvent));\n        });\n        return buttonEl;\n    }\n}","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class RenderingEventListener {\n    private formId: string;\n    private fieldConfig: FieldUIConfig;\n    private listeners: FieldListener[];\n    private subElements: HTMLInputElement[] | null;\n\n    constructor(formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    processRendering(fieldElement: HTMLInputElement): string {\n        let newValue: string | null = '';\n        if (this.fieldConfig.renderer) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            if (this.subElements) this.fieldConfig.renderer.setSubElements(this.subElements);\n            newValue = this.fieldConfig.renderer.renderValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.valueChanged(field, newValue));\n            }\n        }\n        if (newValue) {\n            return newValue;\n        } else {\n            return '';\n        }\n    }\n\n    handleEvent(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processRendering(fieldElement);\n\n    }\n}","import {Field} from \"./Field\";\nimport {FieldUIConfig, FieldValidator, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {FieldListener} from \"./FieldListener\";\nimport {RenderingEventListener} from \"../event-handlers/RenderingEventListener\";\n\nimport debug from 'debug';\n\nconst logger = debug('abstract-field');\n\n\nexport class AbstractField implements Field, FieldListener {\n    protected formId: string;\n    protected config: FieldUIConfig | null = null;\n    protected definition: FieldDefinition;\n    protected element: HTMLElement;\n    protected subElements: HTMLInputElement[] = [];\n    protected validationHandler: ValidationEventHandler;\n    protected renderingHandler: RenderingEventListener;\n    protected listeners: FieldListener[] = [];\n    private hidden: boolean = false;\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.config = config;\n        this.definition = fieldDef;\n        this.element = element;\n        if (subElements) this.subElements = subElements;\n        this.validationHandler = new ValidationEventHandler(formId, config, [this], subElements);\n        this.renderingHandler = new RenderingEventListener(formId, config, [this], subElements);\n\n        // listen for our own change events\n        this.handleChangeEvent = this.handleChangeEvent.bind(this);\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.addEventListener('change', this.handleChangeEvent);\n            });\n        } else {\n            this.element.addEventListener('change', this.handleChangeEvent);\n        }\n\n    }\n\n    isHidden(): boolean {\n        return this.hidden;\n    }\n\n    addFieldListener(listener: FieldListener): void {\n        logger(`${this.getName()} - adding listener ${listener.getName()}`);\n        // don't duplicate listeners\n        let index = this.listeners.findIndex((listenerInList) => listenerInList.getName() === listener.getName());\n        if (index < 0) {\n            this.listeners.push(listener);\n        } else {\n            logger(`${this.getName()} - duplicate listener ${listener.getName()} ignored`);\n        }\n\n    }\n\n    getFieldDefinition(): FieldDefinition {\n        return this.definition;\n    }\n\n    setInvalid(message: string): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element, false, '', message, false);\n        // @ts-ignore\n        this.listeners.forEach((listener) => listener.failedValidation(this.formId, this.definition, this.getValue(), message));\n    }\n\n    public initialise(): void {\n    }\n\n    getValue(): string | null {\n        let result: string | null = null;\n        if (this.config && this.element) {\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    logger(`${this.definition.id} - getting value - rbg`);\n\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.checked) {\n                                logger(`${this.definition.id} - getting value - rbg - checked ${subElement.value}`);\n                                result = subElement.value;\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    result = '' + this.element.checked;\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    result = this.element.value;\n                    break;\n                }\n            }\n        }\n        logger(`${this.definition.id} - getting value - ${result}`);\n        return result;\n    }\n\n    getFormattedValue(): any | null {\n        let result: any | null = null;\n        if (this.config && this.element) {\n            // @ts-ignore\n            result = this.element.value;\n            if (this.config.elementType === UIFieldType.checkbox) { // @ts-ignore\n                result = '' + this.element.checked;\n            }\n            if (this.config.formatter) {\n                result = this.config.formatter.formatValue(this.definition, result);\n            }\n        }\n        return result;\n    }\n\n    isValid(): boolean {\n        let result = true;\n        if (this.config && this.element) {\n            if (this.config.validator) {\n                if (this.config.validator.validator) {\n                    const validator: FieldValidator = this.config.validator.validator;\n                    const response: ValidationResponse = validator.isValidValue(this.definition, this.getValue());\n                    result = response.isValid;\n                }\n            }\n        }\n        return result;\n    }\n\n    getId(): string {\n        return this.definition.id;\n    }\n\n    setValue(newValue: string): void {\n        newValue = '' + newValue;\n        if (this.element && this.config) {\n            // @ts-ignore\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.value === newValue) {\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    this.element.checked = (newValue.toLowerCase() === 'true');\n                    break;\n                }\n                case (UIFieldType.select): {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    const selectEl: HTMLSelectElement = <HTMLSelectElement>this.element;\n                    let selectedIndex = -1;\n                    for (let index = 0; index < selectEl.options.length; index++) {\n                        // @ts-ignore\n                        const option: HTMLOptionElement = selectEl.options.item(index);\n                        logger(`${this.definition.id} - option value - ${option.value}`);\n                        if (option.value === newValue) {\n                            logger(`${this.definition.id} - option value - ${option.value} - SELECTED`);\n                            option.selected = true;\n                            selectedIndex = index;\n                        }\n                    }\n                    logger(`${this.definition.id} - selected index ${selectedIndex}`);\n                    selectEl.selectedIndex = selectedIndex;\n                    break;\n                }\n                default: {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    // @ts-ignore\n                    this.element.value = newValue;\n                    break;\n                }\n            }\n        }\n    }\n\n    reset(): void {\n        if (this.element) {\n            switch (this.definition.type) {\n                case (FieldType.boolean): {\n                    // @ts-ignore\n                    this.element.checked = false;\n                    break;\n                }\n                case (FieldType.integer): {\n                    // @ts-ignore\n                    this.element.value = '0';\n                    break;\n                }\n                case (FieldType.float): {\n                    // @ts-ignore\n                    this.element.value = '0.0';\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            subElement.checked = false;\n                        });\n                    }\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    this.element.value = '';\n                    break;\n                }\n            }\n        }\n        this.show();\n    }\n\n    clearValue(): void {\n        this.reset();\n    }\n\n    validate(): void {\n        if (this.element) {\n            this.validationHandler.processValidation(this.element);\n        }\n    }\n\n    render(currentValue: string): string {\n        let result = currentValue;\n        if (this.config?.renderer) {\n            let value = this.config.renderer.renderValue(this.definition, currentValue);\n            if (value) result = value;\n        }\n        return result;\n    }\n\n    failedValidation(formId: string, field: FieldDefinition, currentValue: string, message: string): void {\n    }\n\n    valueChanged(formId: string, field: FieldDefinition, newValue: string | null): void {\n    }\n\n    getName(): string {\n        return this.definition.displayName;\n    }\n\n    hide(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.setAttribute('style', 'display:none');\n                }\n\n            } else {\n                this.setReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n    setValid(): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element, true, '');\n    }\n\n    show(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.removeAttribute('style');\n                }\n\n            } else {\n                this.clearReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n    clearReadOnly(): void {\n        if (this.definition.displayOnly) return;\n        this.element.removeAttribute('readonly');\n        this.element.removeAttribute('disabled');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.removeAttribute('readonly');\n                subElement.removeAttribute('disabled');\n            });\n        }\n\n    }\n\n    setReadOnly(): void {\n        this.element.setAttribute('readonly', 'true');\n        this.element.setAttribute('disabled', 'true');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.setAttribute('readonly', 'true');\n                subElement.setAttribute('disabled', 'true');\n            });\n        }\n    }\n\n    protected handleChangeEvent(event: Event) {\n        logger(`Handling change event`);\n        if (this.config) {\n            let value: string | null = this.getValue();\n            logger(`Handling change event - informing listeners`);\n            this.listeners.forEach((listener) => listener.valueChanged(this.formId, this.definition, value));\n        }\n    }\n}\n\n","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\n\nexport class TextAreaField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLTextAreaElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\nexport class RadioButtonGroupField extends AbstractField {\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[]) {\n        super(formId, config, fieldDef, element, subElements);\n    }\n\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\n\nexport class SelectField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLSelectElement) {\n        super(formId, config, fieldDef, element);\n    }\n}","import {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {AbstractField} from \"./AbstractField\";\n\n\nexport class InputField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLInputElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n\n","import {AttributeFieldMapItem, DATA_ID_ATTRIBUTE, DisplayOrder, FieldUIConfig, UIFieldType} from \"./FormUITypeDefs\";\nimport {AbstractForm} from \"./AbstractForm\";\nimport {BootstrapFormConfigHelper} from \"../helper/BootstrapFormConfigHelper\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {Field} from \"./field/Field\";\nimport {FormElementFactory, FormFactoryResponse} from \"./factory/FormElementFactory\";\nimport debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport {TextAreaField} from \"./field/TextAreaField\";\nimport {RadioButtonGroupField} from \"./field/RadioButtonGroupField\";\nimport {SelectField} from \"./field/SelectField\";\nimport {InputField} from \"./field/InputField\";\n\nconst logger = debug('basic-form');\nconst dlogger = debug('basic-form-detail');\n\nexport class BasicFormImplementation extends AbstractForm {\n\n    protected factoryElements: FormFactoryResponse | null = null;\n\n\n    public constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        super(containerId, dataObjDef);\n    }\n\n    getFormattedDataObject(): any {\n        logger(`Getting current formatted data`);\n        let formattedResult: any = {};\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            formattedResult[fieldDef.id] = this.getFormattedFieldValue(fieldDef)\n        });\n        logger(formattedResult);\n        return formattedResult;\n    }\n\n    public clearReadOnly() {\n        super.clearReadOnly();\n        this.enableButtons();\n    }\n\n    public setReadOnly() {\n        super.setReadOnly();\n        this.disableButtons();\n    }\n\n    protected _hidden(): void {\n        if (this.factoryElements) this.containerEl?.removeChild(this.factoryElements.form);\n    }\n\n    protected setupFieldObject(fieldEl: HTMLElement, subElements: HTMLInputElement[] = []) {\n        // get the data-id field from the field element\n        const dataId: string | null = fieldEl.getAttribute(DATA_ID_ATTRIBUTE);\n        const fieldId: string | null = fieldEl.getAttribute('id');\n        dlogger(`Converting field input element ${fieldId} with data-id of ${dataId}`);\n        if (dataId && fieldId) {\n            // find the corresponding field definition\n            const index = this.dataObjDef.fields.findIndex((value) => value.id === dataId);\n            const fieldDef: FieldDefinition | undefined = this.dataObjDef.fields.find((value) => value.id === dataId);\n            if (fieldDef) {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is`);\n                logger(fieldDef);\n\n                // find the corresponding ui definition\n                const fieldUIConfig: FieldUIConfig | null | undefined = this.findFieldUiConfig(fieldDef);\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field ui config is`);\n                logger(fieldUIConfig);\n                if (fieldUIConfig) {\n                    if (this.uiDef) {\n                        let field: Field;\n                        switch (fieldUIConfig.elementType) {\n                            case UIFieldType.textarea: {\n                                field = new TextAreaField(this.id, fieldUIConfig, fieldDef, <HTMLTextAreaElement>fieldEl);\n                                break;\n                            }\n                            case UIFieldType.radioGroup: {\n                                field = new RadioButtonGroupField(this.id, fieldUIConfig, fieldDef, fieldEl, subElements);\n                                break;\n                            }\n                            case UIFieldType.select: {\n                                field = new SelectField(this.id, fieldUIConfig, fieldDef, <HTMLSelectElement>fieldEl);\n                                break;\n                            }\n                            default: {\n                                field = new InputField(this.id, fieldUIConfig, fieldDef, <HTMLInputElement>fieldEl);\n                                break;\n                            }\n                        }\n                        this.fields.push(field);\n                        field.addFieldListener(this);\n                        this.map.push({attributeId: dataId, fieldId: fieldId});\n                    }\n                }\n            } else {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is NOT FOUND`);\n\n            }\n        }\n    }\n\n    protected clearUnsavedMessage() {\n        if (this.factoryElements) this.factoryElements.unsavedMessage.innerHTML = '';\n    }\n\n    protected setUnsavedMessage() {\n        if (this.factoryElements && this.uiDef && this.uiDef.unsavedChanges.innerHTML) {\n            this.factoryElements.unsavedMessage.innerHTML = this.uiDef.unsavedChanges.innerHTML;\n        } else if (this.factoryElements) {\n            this.factoryElements.unsavedMessage.innerHTML = 'Pending changes to save';\n        }\n    }\n\n    protected _initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): void {\n        logger(`Initialising`);\n\n        // ok, so given a Data Object definition we are going to create the form ui config\n        this.uiDef = BootstrapFormConfigHelper.getInstance().generateFormConfig(this.dataObjDef, displayOrder, hasDeleteButton, hideModifierFields);\n        logger(this.uiDef);\n        // now we need to create all the form elements from the ui definition\n        this.factoryElements = FormElementFactory.getInstance().createFormElements(this, this.formListeners, this.uiDef, this.fieldListeners);\n        logger(this.factoryElements);\n        // create field elements for each field element, and the basic map\n        logger(`Converting field input elements to Field objects`);\n        this.factoryElements.fields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup', (event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field text area elements to Field objects`);\n        this.factoryElements.textFields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup', (event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field select elements to Field objects`);\n        this.factoryElements.selectFields.forEach((fieldEl) => {\n            dlogger(`key up in form ${this.getName()}`);\n        });\n\n        logger(`Converting field rbg elements to Field objects`);\n        this.factoryElements.radioButtonGroups.forEach((rbg) => {\n            this.setupFieldObject(rbg.container, rbg.radioButtons);\n        });\n\n\n        logger(`field/data map is `);\n        logger(this.map);\n        logger('fields are');\n        logger(this.fields);\n    }\n\n    protected _reset(): void {\n        this.clearUnsavedMessage();\n    }\n\n    protected validateField(fieldDef: FieldDefinition) {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        if (field) field.validate();\n    }\n\n    protected renderField(fieldDef: FieldDefinition, currentValue: string): string {\n        let result: string = currentValue;\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n\n        if (field) {\n            result = field.render(result);\n        }\n        return result;\n    }\n\n    protected _startCreate(): void {\n        this.clearUnsavedMessage();\n\n        // we have a new object, there might be some values to generate\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n                dlogger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) {\n                fieldValue = this.renderField(fieldDef, fieldValue);\n                this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            }\n\n            // run the validation to let the user know what is required\n            this.validateField(fieldDef);\n        });\n\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n\n    }\n\n    protected _startUpdate(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onModify) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, false);\n                dlogger(`Setting default modified values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            this.validateField(fieldDef);\n        });\n        // delete button make visible again\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.removeAttributes(this.factoryElements.deleteButton, ['style']);\n    }\n\n    protected _displayOnly(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n        });\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) if (this.factoryElements) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n    }\n\n    protected _visible(): void {\n        if (this.factoryElements) this.containerEl?.appendChild(this.factoryElements.form);\n    }\n\n    protected setFieldValueToDataObject(dataObj: any, field: Field, currentValue: string | null): void {\n        // find the attribute id from the map\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === field.getId());\n        if (mapItem) {\n            dlogger(`Mapped field ${mapItem.fieldId} to attribute ${mapItem.attributeId} with value ${currentValue}`);\n            this.currentDataObj[mapItem.attributeId] = currentValue;\n        } else {\n            logger(`Mapped field ${field.getId()} to attribute NOT FOUND`);\n\n        }\n    }\n\n    protected setFieldValueFromDataObject(fieldDef: FieldDefinition, currentValue: string | null): void {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        // find the field id from the map\n        if (field) {\n            if (currentValue) {\n                field.setValue(currentValue);\n            } else {\n                field.clearValue();\n            }\n        }\n    }\n\n    protected getFormattedFieldValue(fieldDef: FieldDefinition): any | null {\n        let result: any | null = null;\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === fieldDef.id);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId} with for getting formatted value`);\n            // find the field with that id\n            const field: Field | undefined = this.fields.find((field) => field.getId() === mapItem.attributeId);\n            if (field) {\n                result = field.getFormattedValue();\n            }\n        }\n        return result;\n    }\n\n    protected _isSameObjectAsDisplayed(dataObj: any): boolean {\n        // we can only be sure for objects with keys\n        let isSameObject = false;\n        dlogger(`is same object as current`);\n        dlogger(dataObj);\n        dlogger(this.currentDataObj);\n\n        this.dataObjDef.fields.every((field) => {\n            if (field.isKey) {\n                const currentObjId = this.getFieldFromDataFieldId(field.id)?.getValue();\n                const suppliedObjId = dataObj[field.id];\n                dlogger(`is same object id ${suppliedObjId} as current ${currentObjId}`);\n                if ((currentObjId && !suppliedObjId) || (currentObjId && !suppliedObjId)) {\n                    isSameObject = false;\n                }\n                if ((currentObjId && suppliedObjId) && (currentObjId == suppliedObjId)) {\n                    isSameObject = true;\n                }\n                return false;\n            }\n            return true;\n        });\n        return isSameObject;\n    }\n\n    protected enableButtons() {\n        if (this.factoryElements && this.uiDef) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.removeAttribute('disabled');\n            }\n            this.factoryElements.cancelButton.removeAttribute('disabled');\n            this.factoryElements.submitButton.removeAttribute('disabled');\n            // @ts-ignore\n            this.factoryElements.submitButton.innerHTML = this.uiDef.submitButton.buttonText;\n        }\n    }\n\n    protected disableButtons() {\n        if (this.factoryElements) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.setAttribute('disabled', 'true');\n            }\n            this.factoryElements.cancelButton.setAttribute('disabled', 'true');\n            this.factoryElements.submitButton.setAttribute('disabled', 'true');\n        }\n    }\n\n    protected _saveFinishedOrAborted(): void {\n        dlogger(`save is finished or aborted`);\n        this.enableButtons();\n        this.clearUnsavedMessage();\n    }\n\n    protected _saveIsActive(): void {\n        dlogger(`save is active`);\n        this.disableButtons();\n        if (this.factoryElements && this.uiDef) {\n            if (this.uiDef.activeSave) {\n                dlogger(`save is active ${this.uiDef.activeSave}`);\n                // @ts-ignore\n                this.factoryElements.submitButton.innerHTML = this.uiDef.activeSave + this.uiDef.submitButton.buttonText;\n            }\n        }\n    }\n\n\n}","import {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DataObjectDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {Form} from \"../../form/Form\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {BasicFormImplementation} from \"../../form/BasicFormImplementation\";\nimport {FormEvent, FormEventType, FormListener} from \"../../form/FormListener\";\nimport debug from 'debug';\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewListener} from \"../interface/ViewListener\";\nimport {ObjectPermissionChecker} from \"../interface/ObjectPermissionChecker\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nconst logger = debug('form-detail-view-renderer')\n\nexport class FormDetailViewRenderer implements DetailViewRenderer, FormListener {\n    protected objDef: DataObjectDefinition;\n    protected form: Form | null = null;\n    protected currentItem: any;\n    protected isNewItem: boolean;\n    protected containerId: string;\n    protected forwarder: DetailViewListenerForwarder | null;\n    protected view: DetailView | null;\n    protected permissionChecker: ObjectPermissionChecker;\n\n    constructor(containerId: string, objDef: DataObjectDefinition, permissionChecker: ObjectPermissionChecker) {\n        this.containerId = containerId;\n        this.objDef = objDef;\n        this.currentItem = {};\n        this.isNewItem = false;\n        this.forwarder = null;\n        this.view = null;\n        this.permissionChecker = permissionChecker;\n    }\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    setEventForwarder(forwarder: DetailViewListenerForwarder): void {\n        this.forwarder = forwarder;\n    }\n\n    public setView(view: DetailView): void {\n        this.view = view;\n    }\n\n    onDocumentLoaded(): void {\n        this.form = new BasicFormImplementation(this.containerId, this.objDef);\n        this.form.addFormListener(this);\n    }\n\n    reset(): void {\n        if (this.form) this.form.reset();\n    }\n\n    initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean): void {\n        if (this.form) this.form.initialise(displayOrder, hasDeleteButton, hideModifierFields);\n    }\n\n    displayItemReadonly(dataObject: any): void {\n        this.isNewItem = false;\n        if (this.form) this.form.displayOnly(dataObject);\n    }\n\n    getName(): string {\n        return this.objDef.displayName;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addEventListener(listener: ViewListener): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    hasChanged(): boolean {\n        let result = false;\n        if (this.form) result = this.form.hasChanged();\n        return result;\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getDataSourceKeyId(): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public clearDisplay(): void {\n        this.isNewItem = false;\n        if (this.form) this.form.reset();\n    }\n\n    public clearReadOnly(): void {\n        if (this.form) this.form.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        if (this.form) this.form.setReadOnly();\n    }\n\n    public isReadOnly(): boolean {\n        let result = false;\n        if (this.form) result = this.form.isReadOnly();\n        return result;\n    }\n\n    public createItem(): any {\n        this.currentItem = {};\n        logger(`Creating new item with form ${this.form?.getId()}`);\n        if (this.form) {\n            this.isNewItem = true;\n            this.currentItem = this.form.startCreateNew();\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n        return this.currentItem;\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n        this.isNewItem = false;\n\n        if (this.hasPermissionToUpdateItem(dataObj)) {\n            if (this.form) this.form.startUpdate(dataObj);\n        } else {\n            if (this.form) this.form.displayOnly(dataObj);\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n\n    public hidden(): void {\n        if (this.form) this.form.setIsVisible(false);\n    }\n\n    public show(): void {\n        if (this.form) this.form.setIsVisible(true);\n    }\n\n    render(): void {\n        this.displayItem(this.currentItem);\n        this.show();\n    }\n\n\n    public hasPermissionToDeleteItem(item: any): boolean {\n        return this.permissionChecker.hasPermissionToDeleteItem(item);\n    }\n\n    public hasPermissionToUpdateItem(item: any): boolean {\n        return this.permissionChecker.hasPermissionToUpdateItem(item);\n    }\n\n    public getForm() {\n        return this.form;\n    }\n\n    handleActionItem(actionName: string, selectedItem: any): void {\n\n    }\n\n    isDisplayingItem(dataObj: any): boolean {\n        let result = false;\n        if (this.currentItem) {\n            if (this.form) {\n                result = this.form.isDisplayingItem(dataObj);\n            }\n        }\n        return result;\n    }\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.cancelled(this.view, this.currentItem);\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.deletedItem(this.view, this.currentItem);\n                // user is deleting the object, will become invisible\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                logger(`Form is saved with data`);\n                if (this.form) {\n                    let formattedObj = this.form?.getFormattedDataObject();\n                    if (this.isNewItem) {\n                        if (this.forwarder && this.view) this.forwarder.saveNewItem(this.view, formattedObj);\n                    } else {\n                        if (this.forwarder && this.view) this.forwarder.updateItem(this.view, formattedObj);\n                    }\n                    this.isNewItem = false;\n                }\n\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving`);\n                break;\n            }\n        }\n        return false;\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n}","import {ViewListenerForwarder} from \"./ViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DetailView} from \"../interface/DetailView\";\n\nexport class DetailViewListenerForwarder extends ViewListenerForwarder implements DetailViewListener {\n    protected detailViewListeners: DetailViewListener[];\n\n\n    public constructor() {\n        super();\n        this.detailViewListeners = [];\n    }\n\n    public addListener(listener: DetailViewListener) {\n        super.addListener(listener);\n        this.detailViewListeners.push(listener);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.saveNewItem(view, dataObj));\n        }\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.updateItem(view, dataObj));\n        }\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.deletedItem(view, dataObj));\n        }\n    }\n\n    cancelled(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.cancelled(view, dataObj));\n        }\n    }\n}","import {AbstractView} from \"./AbstractView\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nexport class DetailViewImplementation extends AbstractView implements DetailView {\n    protected currentItem: any | null = null;\n    protected renderer: DetailViewRenderer;\n\n    constructor(uiConfig: ViewDOMConfig, renderer: DetailViewRenderer) {\n        super(uiConfig);\n        this.renderer = renderer;\n        const forwarder = new DetailViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.renderer.setView(this);\n        this.renderer.setEventForwarder(forwarder);\n    }\n\n    addEventDetailListener(listener: DetailViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    public getItemId(name: string, item: any) {\n        return '';\n    }\n\n    public getItemDescription(name: string, item: any): string {\n        return '';\n    }\n\n    public hasActionPermission(actionName:string, from:string, item:any):boolean {\n        return true;\n    }\n\n    public getItem(from:string,identifier:string):any {\n        return this.currentItem;\n    }\n\n    public clearDisplay(): void {\n        this.renderer.reset();\n    }\n\n    public clearReadOnly(): void {\n        this.renderer.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        this.renderer.setReadOnly();\n    }\n\n    public isReadOnly(): boolean {\n        return this.renderer.isReadOnly();\n    }\n\n    public createItem(): any {\n        return this.renderer.createItem();\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n\n        if (this.renderer.hasPermissionToUpdateItem(dataObj)) {\n            this.renderer.displayItem(dataObj);\n        } else {\n            this.renderer.displayItemReadonly(dataObj);\n        }\n        this.show();\n    }\n\n\n    public hidden(): void {\n        this.renderer.hidden();\n    }\n\n    public show(): void {\n        this.renderer.show();\n    }\n\n    public render(): void {\n        this.displayItem(this.currentItem);\n    }\n\n    public onDocumentLoaded() {\n        this.renderer.onDocumentLoaded();\n        super.onDocumentLoaded();\n    }\n\n    public hasPermissionToDeleteItem(item: any): boolean {\n        return this.renderer.hasPermissionToDeleteItem(item);\n    }\n\n    public hasPermissionToUpdateItem(item: any): boolean {\n        return this.renderer.hasPermissionToUpdateItem(item);\n    }\n\n    public handleActionItem(actionName: string, selectedItem: any): void {\n        this.renderer.handleActionItem(actionName, selectedItem);\n    }\n\n    public isDisplayingItem(dataObj: any): boolean {\n        return this.renderer.isDisplayingItem(dataObj);\n    }\n\n    public hasChanged(): boolean {\n        return this.renderer.hasChanged();\n    }\n\n    initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): void {\n        this.renderer.initialise(displayOrder, hasDeleteButton, hideModifierFields)\n    }\n}","import {DataObjectListener} from \"./DataObjectListener\";\n\nexport abstract class DataObjectController {\n    protected listeners: DataObjectListener[];\n    protected isCreatingNew: boolean = false;\n    protected typeName: string;\n\n    protected constructor(typeName: string) {\n        this.typeName = typeName;\n        this.listeners = [];\n    }\n\n    public addListener(listener: DataObjectListener) {\n        this.listeners.push(listener);\n    }\n\n    public startNewObject(): boolean {\n        let result = false;\n        if (!this.isCreatingNew) {\n            result = this._startNewObject();\n            this.isCreatingNew = result;\n        }\n        return result;\n    }\n\n    public isCreatingNewObject(): boolean {\n        return this.isCreatingNew;\n    }\n\n    protected informListenersOfCreate(dataObj: any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.create(this, this.typeName, dataObj));\n    }\n\n    protected informListenersOfUpdate(dataObj: any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.update(this, this.typeName, dataObj));\n    }\n\n    protected informListenersOfDelete(dataObj: any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.delete(this, this.typeName, dataObj));\n    }\n\n    protected abstract _startNewObject(): boolean; // return false, if the creation was cancelled\n\n}","import {CollectionView} from \"../view/interface/CollectionView\";\nimport {DetailView} from \"../view/interface/DetailView\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {View} from \"../view/interface/View\";\nimport {DetailViewListener} from \"../view/interface/DetailViewListener\";\n\nimport debug from 'debug';\nimport {DataObjectController} from \"../../model/DataObjectController\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\n\nconst logger = debug('linked-controller');\nconst dlogger = debug('linked-controller-detail');\n\nclass ChildViewListenerDelegate implements DetailViewListener {\n    protected controller: DetailViewListener;\n\n    constructor(controller: DetailViewListener) {\n        this.controller = controller;\n    }\n\n    addView(view: DetailView) {\n        view.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    cancelled(view: DetailView, dataObj: any): void {\n        this.controller.cancelled(view, dataObj);\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        this.controller.deletedItem(view, dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        this.controller.saveNewItem(view, dataObj);\n    }\n\n\n    updateItem(view: DetailView, dataObj: any): void {\n        this.controller.updateItem(view, dataObj);\n    }\n}\n\nexport class ChangeDataObjectDelegate implements AlertListener {\n    protected callback: any;\n\n    constructor(callback: any) {\n        this.callback = callback;\n    }\n\n    public shouldDiscardChanges() {\n        AlertManager.getInstance().startAlert(this, 'Discard Changes', 'There are unsaved changes.  Discard?', {});\n\n    }\n\n\n    completed(event: AlertEvent): void {\n        if (event.outcome === AlertType.confirmed) {\n            this.callback();\n        }\n    }\n\n}\n\nexport class LinkedCollectionDetailController extends DataObjectController implements CollectionViewListener, DetailViewListener {\n    protected parentView: CollectionView;\n    protected children: DetailView[] = [];\n    protected delegate: ChildViewListenerDelegate;\n\n    constructor(typeName: string, parentView: CollectionView) {\n        super(typeName);\n        logger(`Starting with parent view ${parentView.getName()}`);\n        this.parentView = parentView;\n        this.delegate = new ChildViewListenerDelegate(this);\n        this.parentView.addEventListener(this);\n    }\n\n    public addLinkedDetailView(childView: DetailView) {\n        logger(`Adding child view ${childView.getName()}`);\n        this.children.push(childView);\n        this.delegate.addView(childView); // this delegate will only pass us the unique detail view events (save, new, etc)\n    }\n\n    public initialise(): void { // call when all views are ready\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Handling delete item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        return this.parentView.hasPermissionToDeleteItemInNamedCollection('', selectedItem);\n    }\n\n    documentLoaded(view: View): void {\n        logger(`Handling document loaded view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n            childView.onDocumentLoaded();\n        });\n    }\n\n    hideRequested(view: View): void {\n        // let the children know\n        logger(`Handling hide  from view ${view.getName()}`);\n        this.children.forEach((childView) => {\n            childView.hidden();\n        });\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        logger(`Handling item action ${actionName} from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.handleActionItem(actionName, selectedItem);\n        });\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        logger(`Handling item deleted from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        logger(`Handling item deselected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void { // nothing to do here\n    }\n\n    itemDropped(view: View, droppedItem: any): void { // nothing to do here\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        logger(`Handling item selected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.displayItem(selectedItem);\n        });\n    }\n\n    showRequested(view: View): void {\n        logger(`Handling show from view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n            childView.show();\n        });\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        logger(`Handling can select item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        // are we currently in the middle of creating a new object?\n        if (this.isCreatingNew) return false;\n\n        // prevent selection if the children views have modified this item\n        let canProceedWithSelection: boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithSelection = false;\n            }\n        });\n        if (!canProceedWithSelection) {\n            canProceedWithSelection = confirm(`${view.getName()} - unsaved changes.  Discard them?`);\n        }\n        return canProceedWithSelection;\n    }\n\n\n    cancelled(view: DetailView, dataObj: any): void {\n        logger(`Handling cancelled from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.isCreatingNew = false;\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        logger(`Handling deleted from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfDelete(dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        logger(`Handling save new from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfCreate(dataObj);\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        logger(`Handling update from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfUpdate(dataObj);\n    }\n\n    protected _startNewObject(): boolean {\n        logger(`Handling start new object`);\n        // assume the first detail view will create the object for us\n        let canProceedWithCreateNew: boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithCreateNew = false;\n            }\n        });\n        if (!canProceedWithCreateNew) {\n            canProceedWithCreateNew = confirm(`There are unsaved changes.  Discard them?`);\n        }\n\n        if (this.children.length > 0) {\n            logger(`Handling start new object with child view ${this.children[0].getName()}`);\n            let dataObj = this.children[0].createItem();\n            if (dataObj) {\n                canProceedWithCreateNew = true;\n                this.children[0].show();\n            }\n        }\n        return canProceedWithCreateNew;\n    }\n\n}","import StateChangeListener from \"../../../state/StateChangeListener\";\nimport {StateManager} from \"../../../state/StateManager\";\nimport {CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {AbstractCollectionView} from \"./AbstractCollectionView\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {View} from \"../interface/View\";\nimport {CollectionView} from \"../interface/CollectionView\";\n\nimport debug from 'debug';\n\nconst logger = debug('ab-stateful-collection-view');\n\nexport default abstract class AbstractStatefulCollectionView extends AbstractCollectionView implements StateChangeListener, CollectionViewListener {\n\n    protected stateManager: StateManager;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, stateManager: StateManager, stateName: string) {\n        super(uiConfig, stateName);\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // setup state listener\n        this.stateManager.addChangeListenerForName(this.collectionName, this);\n    }\n\n    public getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    public hasActionPermission(actionName:string, from:string, item:any):boolean {\n        return true;\n    }\n\n\n    public onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n    public getItemInNamedCollection(name: string, compareWith: any): any {\n        return this.stateManager.findItemInState(name, compareWith, this.compareItemsForEquality);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`handling state ${name} changed`);\n        logger(newValue);\n        this.updateViewForNamedCollection(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        logger(`handling state ${name} new item added`);\n        logger(itemAdded);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        logger(`handling state ${name} new item removed`);\n        logger(itemRemoved);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        logger(`handling state ${name} new item updated`);\n        logger(itemNewValue);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    render(): void {\n        this.updateViewForNamedCollection(this.collectionName, this.stateManager.getStateByName(this.collectionName))\n    }\n\n    show(): void {\n    }\n\n    hidden(): void {\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        this.stateManager.removeItemFromState(this.collectionName, selectedItem, this.compareItemsForEquality, false);\n    }\n\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return this.getName();\n    }\n\n\n}\n","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewDOMConfig, EXTRA_ACTION_ATTRIBUTE_NAME, Modifier} from \"../../ConfigurationTypes\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\nconst avLogger = debug('list-view-renderer-with-context');\n\nexport class ListViewRendererUsingContext implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const canDeleteItem: boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName, item);\n        const uiConfig: CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElementAttributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n\n\n            textEl = document.createElement(uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl, uiConfig.detail.textElementClasses);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name, collectionName, item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                        browserUtil.addAttributes(action, extraAction.attributes);\n                        if (extraAction.buttonText) {\n                            action.innerHTML = extraAction.buttonText;\n                        }\n                        if (extraAction.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        buttonsEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                browserUtil.addAttributes(deleteButtonEl, uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n\n            }\n        }\n\n\n        // add the key ids for selection\n        this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n        // add icons\n        if (uiConfig.detail.icons) {\n            const icons: string[] = uiConfig.detail.icons(collectionName, item);\n            icons.forEach((icon) => {\n                let iconEl = document.createElement('i');\n                browserUtil.addRemoveClasses(iconEl, icon);\n                textEl.appendChild(iconEl);\n            });\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n\n                }\n                case Modifier.warning: {\n                    avLogger(`view ${this.view.getName()}: warning item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning);\n                    if (uiConfig.icons && uiConfig.icons.warning) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                        textEl.appendChild(iconEl);\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName, item)}`);\n            containerEl.appendChild(childEl);\n\n            ContextualInformationHelper.getInstance().addContextToElement(this.view.getName(), collectionName, item, childEl, true);\n            childEl.addEventListener('contextmenu', ContextualInformationHelper.getInstance().handleContextMenu);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n}","import {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandlerDelegate, ItemContext} from \"./CollectionViewEventHandlerDelegate\";\nimport {ContextDetails, ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\n\nexport class CollectionViewEventHandlerDelegateUsingContext extends CollectionViewEventHandlerDelegate {\n\n    constructor(view: CollectionView, forwarder: CollectionViewListenerForwarder) {\n        super(view, forwarder);\n    }\n\n    protected getItemContext(event: Event): ItemContext {\n\n        const contextDetail: ContextDetails | null = ContextualInformationHelper.getInstance().findContextFromEvent(event);\n\n        let context: ItemContext;\n\n        if (contextDetail) {\n            context = {\n                itemId: contextDetail.identifier,\n                dataSource: contextDetail.source\n            }\n        } else {\n            context = {\n                itemId: '',\n                dataSource: this.view.getName(),\n            }\n        }\n\n\n        return context;\n    }\n\n}","import AbstractStatefulCollectionView from \"../../framework/ui/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../framework/ui/ConfigurationTypes\";\nimport {STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../framework/ui/view/interface/CollectionViewListener\";\nimport {View} from \"../../framework/ui/view/interface/View\";\n\nimport debug from 'debug';\nimport {StateManager} from \"../../framework/state/StateManager\";\nimport {ListViewRendererUsingContext} from \"../../framework/ui/view/renderer/ListViewRendererUsingContext\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../framework/ui/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\nimport {CollectionViewListenerForwarder} from \"../../framework/ui/view/delegate/CollectionViewListenerForwarder\";\nimport moment from \"moment\";\nimport {ContextualInformationHelper} from \"../../framework/ui/context/ContextualInformationHelper\";\n\nconst logger = debug('transactions-view');\n\nexport class TransactionsView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'transactions',\n            dataSourceId: VIEW_NAME.transactions,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: '',\n            active: 'list-group-item-primary',\n            warning: 'list-group-item-warning'\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: '',\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'div',\n            textElementClasses: 'container-fluid transaction-text',\n            select: false,\n            delete: {\n                buttonClasses:'btn bg-danger text-white btn-circle btn-sm',\n                buttonText:'',\n                iconClasses: 'fas fa-trash-alt'\n            }\n        },\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(TransactionsView.DOMConfig, stateManager, STATE_NAMES.transactions);\n        this.renderer = new ListViewRendererUsingContext(this, this);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n        ContextualInformationHelper.getInstance().addContextFromView(this,STATE_NAMES.transactions,'Exercise Types');\n    }\n\n\n    getItemDescription(from: string, item: any): string {\n        logger(item);\n        let buffer = '';\n        const dateDisplay = moment(item.createdOn,'YYYYMMDDHHmmss').format('DD/MM/YY HH:mm');\n        buffer += `<strong>${dateDisplay}</strong> - ${item.name}:`;\n        if (item.type === 'deposit') {\n            buffer += '+';\n        } else {\n            buffer += '-';\n        }\n        let formatter = new Intl.NumberFormat(undefined, {\n            style: 'currency',\n            currency: 'AUD',\n\n            // These options are needed to round to whole numbers if that's what you want.\n            //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n            //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n        });\n        buffer += formatter.format(parseFloat(item.amount));\n        return buffer;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        if (item.type === 'deposit') {\n           return Modifier.active;\n        } else {\n           return Modifier.warning;\n        }\n        return Modifier.normal;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        let buffer = '';\n        const dateDisplay = moment(item.createdOn,'YYYYMMDDHHmmss').format('DD/MM/YY HH:mm');\n        buffer += `<div class=\"row\"><div class=\"col-md-12 col-lg-6\"><strong>${dateDisplay}</strong> - ${item.name}</div><div class=\"col-md-12 col-lg text-right\">`;\n        if (item.type === 'deposit') {\n            buffer += '+';\n        } else {\n            buffer += '-';\n        }\n        let formatter = new Intl.NumberFormat(undefined, {\n            style: 'currency',\n            currency: 'AUD',\n\n            // These options are needed to round to whole numbers if that's what you want.\n            //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n            //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n        });\n        buffer += formatter.format(parseFloat(item.amount)) + '</div></div>';\n        containerEl.innerHTML = buffer;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return false;\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any) {}\n\n\n}\n\n","import {ObjectPermissionChecker} from \"../interface/ObjectPermissionChecker\";\n\nexport class DefaultPermissionChecker implements ObjectPermissionChecker {\n    private canDelete: boolean;\n    private canUpdate: boolean;\n\n    constructor(canUpdate:boolean, canDelete:boolean) {\n        this.canUpdate = canUpdate;\n        this.canDelete = canDelete;\n    }\n\n    hasPermissionToUpdateItem(item: any): boolean {\n        return this.canUpdate;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        return this.canDelete;\n    }\n}","import {DataObjectDefinition} from \"../../framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../framework/model/ObjectDefinitionRegistry\";\nimport {BUTTON, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../AppTypes\";\nimport {FormDetailViewRenderer} from \"../../framework/ui/view/renderer/FormDetailViewRenderer\";\nimport {DetailView} from \"../../framework/ui/view/interface/DetailView\";\nimport {DetailViewImplementation} from \"../../framework/ui/view/implementation/DetailViewImplementation\";\nimport {LinkedCollectionDetailController} from \"../../framework/ui/helper/LinkedCollectionDetailController\";\nimport {BasicObjectDefinitionFactory} from \"../../framework/model/BasicObjectDefinitionFactory\";\nimport Controller from \"../Controller\";\nimport debug from \"debug\";\nimport {TransactionsView} from \"./TransactionsView\";\nimport {DefaultPermissionChecker} from \"../../framework/ui/view/implementation/DefaultPermissionChecker\";\nimport {Form} from \"../../framework/ui/form/Form\";\nimport {FormEvent, FormEventType, FormListener} from \"../../framework/ui/form/FormListener\";\nimport browserUtil from \"../../framework/util/BrowserUtil\";\n\nconst logger = debug('transactions-composite-view');\n\nexport class TransactionsCompositeView implements FormListener{\n\n    constructor() {\n    }\n\n    onDocumentLoaded() {\n        const transactionsView = new TransactionsView(Controller.getInstance().getStateManager());\n\n        const transactionDef: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.transactions);\n\n        if (transactionDef) {\n            let transactionDetailViewRenderer: FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.transactionDetail, transactionDef, new DefaultPermissionChecker(false,false));\n\n            let transactionDetailView: DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.transactionDetail,\n                    dataSourceId: VIEW_NAME.transactions\n                }, transactionDetailViewRenderer);\n            let viewLinker: LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.transactions, transactionsView);\n            viewLinker.addLinkedDetailView(transactionDetailView);\n\n            transactionsView.onDocumentLoaded();\n            transactionDetailView.onDocumentLoaded();\n\n\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(transactionDef);\n            transactionDetailView.initialise(startingDisplayOrder, false, true);\n\n            const detailForm: Form | null = transactionDetailViewRenderer.getForm();\n            console.log(detailForm);\n            detailForm?.addFormListener(this);\n\n\n            // setup the event handling for the create new exercise type button\n            let addTransactionButton = <HTMLButtonElement>document.getElementById(BUTTON.createNew);\n            logger(`Setting up button for creating transactions`);\n            if (addTransactionButton) {\n                addTransactionButton.addEventListener('click', (event) => {\n                    logger(`Asking view linker to start a new object`);\n                    viewLinker.startNewObject();\n                    const detailContainerEl = document.getElementById(VIEW_CONTAINER.transactionDetailsContainer)\n                    if (detailContainerEl) {\n                        browserUtil.addRemoveClasses(detailContainerEl,'d-none',false);\n                    }\n                });\n\n            }\n\n            viewLinker.addListener(Controller.getInstance());\n            if (window.innerWidth < 415) {\n                const detailContainerEl = document.getElementById(VIEW_CONTAINER.transactionDetailsContainer)\n                if (detailContainerEl) {\n                    browserUtil.addRemoveClasses(detailContainerEl,'d-none');\n                }\n            }\n        }\n    }\n\n    formChanged(event: FormEvent, formValues?: any): boolean {\n        if (event.eventType === FormEventType.SAVED) {\n            if (window.innerWidth < 415) {\n                const detailContainerEl = document.getElementById(VIEW_CONTAINER.transactionDetailsContainer)\n                if (detailContainerEl) {\n                    browserUtil.addRemoveClasses(detailContainerEl,'d-none');\n                }\n            }\n\n            // scroll to last\n            const scrollViewEl = document.getElementById('transactionListScroll');\n            if (scrollViewEl) {\n                const itemEls = scrollViewEl.querySelectorAll('a');\n                if (itemEls.length > 0) {\n                    const itemEl = itemEls.item(itemEls.length - 1)\n                    browserUtil.scrollToBottomSmooth(itemEl,itemEl.scrollHeight);\n                }\n\n            }\n        }\n        if (event.eventType === FormEventType.CANCELLED) {\n            if (window.innerWidth < 415) {\n                const detailContainerEl = document.getElementById(VIEW_CONTAINER.transactionDetailsContainer)\n                if (detailContainerEl) {\n                    browserUtil.addRemoveClasses(detailContainerEl, 'd-none');\n                }\n            }\n        }\n        return false;\n    }\n\n}","import debug from 'debug';\nimport moment from \"moment\";\nimport Chart from \"chart.js/auto\";\nimport {CollectionViewRenderer} from \"../../framework/ui/view/interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../../framework/ui/view/interface/CollectionViewEventHandler\";\nimport {CollectionView} from \"../../framework/ui/view/interface/CollectionView\";\n\nconst avLogger = debug('budget-summary-renderer');\n\nexport class BudgetSummaryRenderer implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    private currentChart: Chart | null = null;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        return document.createElement('a');\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, transactions: any): void {\n        avLogger(`view ${this.view.getName()}: creating budget summary`);\n        avLogger(transactions);\n\n        if (this.currentChart) this.currentChart.destroy();\n\n        // copy array and reverse it\n        let sum = 0;\n\n        // create date labels for chart\n        let labels = transactions.map(t => {\n            return moment(t.createdOn,'YYYYMMDDHHmmss').format('DD/MM/YYYY');\n        });\n\n        // create incremental values for chart\n        let data = transactions.map(t => {\n            if (t.type === 'deposit') {\n                sum += parseFloat(t.amount);\n            }\n            else {\n                sum -= parseFloat(t.amount);\n            }\n            return sum;\n        });\n\n\n        this.currentChart = new Chart(<HTMLCanvasElement>containerEl, {\n            type: 'line',\n            data: {\n                labels,\n                datasets: [{\n                    label: \"Total Over Time\",\n                    fill: true,\n                    backgroundColor: \"#6666ff\",\n                    data\n                }]\n            }\n        });\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n\n}","import AbstractStatefulCollectionView from \"../../framework/ui/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType} from \"../../framework/ui/ConfigurationTypes\";\nimport {STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../framework/ui/view/interface/CollectionViewListener\";\nimport {View} from \"../../framework/ui/view/interface/View\";\n\nimport {BudgetSummaryRenderer} from \"../renderer/BudgetSummaryRenderer\";\n\n\nexport class BudgetSummaryView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: VIEW_NAME.budgetSummary,\n            dataSourceId: VIEW_NAME.budgetSummary,\n        },\n        resultsElementType: 'canvas',\n        resultsClasses: '',\n        keyId: '_id',\n        keyType: KeyType.string,\n        detail: {\n            containerClasses: '',\n            textElementType: '',\n            textElementClasses: '',\n            select: false,\n        },\n    }\n\n\n    constructor() {\n        super(BudgetSummaryView.DOMConfig, Controller.getInstance().getStateManager(), STATE_NAMES.transactions);\n        this.renderer = new BudgetSummaryRenderer(this, this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return false;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return false;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {\n    }\n\n}\n\n","//localStorage.debug = 'linked-controller api-ts exercise-types-view app controller-ts controller-ts-detail api-ts socket-ts user-search user-search-detail list-view-renderer';\n//localStorage.debug = 'collection-view-ts collection-view-ts-detail form-detail-view-renderer linked-controller linked-controller-detail exercise-types-view app validation-manager-rule-failure validation-manager';\n//localStorage.debug = 'validation-manager validation-manager-rule-failure abstract-form-detail-validation';\nimport {ContextualInformationHelper} from \"./framework/ui/context/ContextualInformationHelper\";\nimport debug from 'debug';\nimport Controller from './app/Controller';\nimport StateChangeListener from \"./framework/state/StateChangeListener\";\nimport {ELEMENT, STATE_NAMES} from \"./app/AppTypes\";\nimport {TransactionsCompositeView} from \"./app/view/TransactionsCompositeView\";\nimport {BudgetSummaryView} from \"./app/view/BudgetSummaryView\";\n\n\n//localStorage.debug = 'api-ts state-manager-api';\n//localStorage.debug = 'abstract-form abstract-form-detail basic-form basic-form-detail form-detail-view-renderer';\n\ndebug.log = console.info.bind(console);\n\n\nconst logger = debug('app');\n\nclass BudgetBalance implements StateChangeListener {\n    private totalEl:HTMLSpanElement|null = null;\n\n    constructor() {}\n\n    onDocumentLoaded() {\n        this.totalEl = document.getElementById(ELEMENT.total);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.transactions,this);\n    }\n\n    getListenerName(): string {\n        return \"Balance\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        let balance = 0.0;\n        if (this.totalEl && newValue && (newValue.length > 0)) {\n            newValue.forEach((value:any) => {\n                if (value.type) {\n                    switch(value.type) {\n                        case 'deposit': {\n                            balance += parseFloat(value.amount);\n                            break;\n                        }\n                        case 'withdrawal': {\n                            balance -= parseFloat(value.amount);\n                            break;\n                        }\n                    }\n                }\n            });\n            let formatter = new Intl.NumberFormat(undefined, {\n                style: 'currency',\n                currency: 'AUD',\n\n                // These options are needed to round to whole numbers if that's what you want.\n                //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n                //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n            });\n\n            this.totalEl.innerHTML = formatter.format(balance);;\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName,name,Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.transactions));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        this.stateChanged(managerName,name,Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.transactions));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        this.stateChanged(managerName,name,Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.transactions));\n    }\n\n}\n\n\nexport default class App  {\n\n    private static _instance: App;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n\n\n    private constructor() {\n        // event handlers\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    public static getInstance(): App {\n        if (!(App._instance)) {\n            App._instance = new App();\n        }\n        return App._instance;\n    }\n\n    onDocumentLoad() {\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        new TransactionsCompositeView().onDocumentLoaded();\n        new BudgetSummaryView().onDocumentLoaded();\n\n\n        new BudgetBalance().onDocumentLoaded();\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        Controller.getInstance().onDocumentLoaded();\n\n\n\n    }\n\n\n\n\n}\n\n\n$(function () {\n    App.getInstance().onDocumentLoad();\n});","var map = {\n\t\"./af\": 2786,\n\t\"./af.js\": 2786,\n\t\"./ar\": 867,\n\t\"./ar-dz\": 4130,\n\t\"./ar-dz.js\": 4130,\n\t\"./ar-kw\": 6135,\n\t\"./ar-kw.js\": 6135,\n\t\"./ar-ly\": 6440,\n\t\"./ar-ly.js\": 6440,\n\t\"./ar-ma\": 7702,\n\t\"./ar-ma.js\": 7702,\n\t\"./ar-sa\": 6040,\n\t\"./ar-sa.js\": 6040,\n\t\"./ar-tn\": 7100,\n\t\"./ar-tn.js\": 7100,\n\t\"./ar.js\": 867,\n\t\"./az\": 1083,\n\t\"./az.js\": 1083,\n\t\"./be\": 9808,\n\t\"./be.js\": 9808,\n\t\"./bg\": 8338,\n\t\"./bg.js\": 8338,\n\t\"./bm\": 7438,\n\t\"./bm.js\": 7438,\n\t\"./bn\": 8905,\n\t\"./bn-bd\": 6225,\n\t\"./bn-bd.js\": 6225,\n\t\"./bn.js\": 8905,\n\t\"./bo\": 1560,\n\t\"./bo.js\": 1560,\n\t\"./br\": 1278,\n\t\"./br.js\": 1278,\n\t\"./bs\": 622,\n\t\"./bs.js\": 622,\n\t\"./ca\": 2468,\n\t\"./ca.js\": 2468,\n\t\"./cs\": 5822,\n\t\"./cs.js\": 5822,\n\t\"./cv\": 877,\n\t\"./cv.js\": 877,\n\t\"./cy\": 7373,\n\t\"./cy.js\": 7373,\n\t\"./da\": 4780,\n\t\"./da.js\": 4780,\n\t\"./de\": 9740,\n\t\"./de-at\": 217,\n\t\"./de-at.js\": 217,\n\t\"./de-ch\": 894,\n\t\"./de-ch.js\": 894,\n\t\"./de.js\": 9740,\n\t\"./dv\": 5300,\n\t\"./dv.js\": 5300,\n\t\"./el\": 837,\n\t\"./el.js\": 837,\n\t\"./en-au\": 8348,\n\t\"./en-au.js\": 8348,\n\t\"./en-ca\": 7925,\n\t\"./en-ca.js\": 7925,\n\t\"./en-gb\": 2243,\n\t\"./en-gb.js\": 2243,\n\t\"./en-ie\": 6436,\n\t\"./en-ie.js\": 6436,\n\t\"./en-il\": 7207,\n\t\"./en-il.js\": 7207,\n\t\"./en-in\": 4175,\n\t\"./en-in.js\": 4175,\n\t\"./en-nz\": 6319,\n\t\"./en-nz.js\": 6319,\n\t\"./en-sg\": 1662,\n\t\"./en-sg.js\": 1662,\n\t\"./eo\": 2915,\n\t\"./eo.js\": 2915,\n\t\"./es\": 5655,\n\t\"./es-do\": 5251,\n\t\"./es-do.js\": 5251,\n\t\"./es-mx\": 6112,\n\t\"./es-mx.js\": 6112,\n\t\"./es-us\": 1146,\n\t\"./es-us.js\": 1146,\n\t\"./es.js\": 5655,\n\t\"./et\": 5603,\n\t\"./et.js\": 5603,\n\t\"./eu\": 7763,\n\t\"./eu.js\": 7763,\n\t\"./fa\": 6959,\n\t\"./fa.js\": 6959,\n\t\"./fi\": 1897,\n\t\"./fi.js\": 1897,\n\t\"./fil\": 2549,\n\t\"./fil.js\": 2549,\n\t\"./fo\": 4694,\n\t\"./fo.js\": 4694,\n\t\"./fr\": 4470,\n\t\"./fr-ca\": 3049,\n\t\"./fr-ca.js\": 3049,\n\t\"./fr-ch\": 2330,\n\t\"./fr-ch.js\": 2330,\n\t\"./fr.js\": 4470,\n\t\"./fy\": 5044,\n\t\"./fy.js\": 5044,\n\t\"./ga\": 9295,\n\t\"./ga.js\": 9295,\n\t\"./gd\": 2101,\n\t\"./gd.js\": 2101,\n\t\"./gl\": 8794,\n\t\"./gl.js\": 8794,\n\t\"./gom-deva\": 7884,\n\t\"./gom-deva.js\": 7884,\n\t\"./gom-latn\": 3168,\n\t\"./gom-latn.js\": 3168,\n\t\"./gu\": 5349,\n\t\"./gu.js\": 5349,\n\t\"./he\": 4206,\n\t\"./he.js\": 4206,\n\t\"./hi\": 94,\n\t\"./hi.js\": 94,\n\t\"./hr\": 316,\n\t\"./hr.js\": 316,\n\t\"./hu\": 2138,\n\t\"./hu.js\": 2138,\n\t\"./hy-am\": 1423,\n\t\"./hy-am.js\": 1423,\n\t\"./id\": 9218,\n\t\"./id.js\": 9218,\n\t\"./is\": 135,\n\t\"./is.js\": 135,\n\t\"./it\": 626,\n\t\"./it-ch\": 150,\n\t\"./it-ch.js\": 150,\n\t\"./it.js\": 626,\n\t\"./ja\": 9183,\n\t\"./ja.js\": 9183,\n\t\"./jv\": 4286,\n\t\"./jv.js\": 4286,\n\t\"./ka\": 2105,\n\t\"./ka.js\": 2105,\n\t\"./kk\": 7772,\n\t\"./kk.js\": 7772,\n\t\"./km\": 8758,\n\t\"./km.js\": 8758,\n\t\"./kn\": 9282,\n\t\"./kn.js\": 9282,\n\t\"./ko\": 3730,\n\t\"./ko.js\": 3730,\n\t\"./ku\": 1408,\n\t\"./ku.js\": 1408,\n\t\"./ky\": 3291,\n\t\"./ky.js\": 3291,\n\t\"./lb\": 6841,\n\t\"./lb.js\": 6841,\n\t\"./lo\": 5466,\n\t\"./lo.js\": 5466,\n\t\"./lt\": 7010,\n\t\"./lt.js\": 7010,\n\t\"./lv\": 7595,\n\t\"./lv.js\": 7595,\n\t\"./me\": 9861,\n\t\"./me.js\": 9861,\n\t\"./mi\": 5493,\n\t\"./mi.js\": 5493,\n\t\"./mk\": 5966,\n\t\"./mk.js\": 5966,\n\t\"./ml\": 7341,\n\t\"./ml.js\": 7341,\n\t\"./mn\": 5115,\n\t\"./mn.js\": 5115,\n\t\"./mr\": 370,\n\t\"./mr.js\": 370,\n\t\"./ms\": 9847,\n\t\"./ms-my\": 1237,\n\t\"./ms-my.js\": 1237,\n\t\"./ms.js\": 9847,\n\t\"./mt\": 2126,\n\t\"./mt.js\": 2126,\n\t\"./my\": 6165,\n\t\"./my.js\": 6165,\n\t\"./nb\": 4924,\n\t\"./nb.js\": 4924,\n\t\"./ne\": 6744,\n\t\"./ne.js\": 6744,\n\t\"./nl\": 3901,\n\t\"./nl-be\": 9814,\n\t\"./nl-be.js\": 9814,\n\t\"./nl.js\": 3901,\n\t\"./nn\": 3877,\n\t\"./nn.js\": 3877,\n\t\"./oc-lnc\": 2135,\n\t\"./oc-lnc.js\": 2135,\n\t\"./pa-in\": 5858,\n\t\"./pa-in.js\": 5858,\n\t\"./pl\": 4495,\n\t\"./pl.js\": 4495,\n\t\"./pt\": 9520,\n\t\"./pt-br\": 7971,\n\t\"./pt-br.js\": 7971,\n\t\"./pt.js\": 9520,\n\t\"./ro\": 6459,\n\t\"./ro.js\": 6459,\n\t\"./ru\": 1793,\n\t\"./ru.js\": 1793,\n\t\"./sd\": 950,\n\t\"./sd.js\": 950,\n\t\"./se\": 490,\n\t\"./se.js\": 490,\n\t\"./si\": 124,\n\t\"./si.js\": 124,\n\t\"./sk\": 4249,\n\t\"./sk.js\": 4249,\n\t\"./sl\": 4985,\n\t\"./sl.js\": 4985,\n\t\"./sq\": 1104,\n\t\"./sq.js\": 1104,\n\t\"./sr\": 9131,\n\t\"./sr-cyrl\": 9915,\n\t\"./sr-cyrl.js\": 9915,\n\t\"./sr.js\": 9131,\n\t\"./ss\": 5893,\n\t\"./ss.js\": 5893,\n\t\"./sv\": 8760,\n\t\"./sv.js\": 8760,\n\t\"./sw\": 1172,\n\t\"./sw.js\": 1172,\n\t\"./ta\": 7333,\n\t\"./ta.js\": 7333,\n\t\"./te\": 3110,\n\t\"./te.js\": 3110,\n\t\"./tet\": 2095,\n\t\"./tet.js\": 2095,\n\t\"./tg\": 7321,\n\t\"./tg.js\": 7321,\n\t\"./th\": 9041,\n\t\"./th.js\": 9041,\n\t\"./tk\": 9005,\n\t\"./tk.js\": 9005,\n\t\"./tl-ph\": 5768,\n\t\"./tl-ph.js\": 5768,\n\t\"./tlh\": 9444,\n\t\"./tlh.js\": 9444,\n\t\"./tr\": 2397,\n\t\"./tr.js\": 2397,\n\t\"./tzl\": 8254,\n\t\"./tzl.js\": 8254,\n\t\"./tzm\": 1106,\n\t\"./tzm-latn\": 699,\n\t\"./tzm-latn.js\": 699,\n\t\"./tzm.js\": 1106,\n\t\"./ug-cn\": 9288,\n\t\"./ug-cn.js\": 9288,\n\t\"./uk\": 7691,\n\t\"./uk.js\": 7691,\n\t\"./ur\": 3795,\n\t\"./ur.js\": 3795,\n\t\"./uz\": 6791,\n\t\"./uz-latn\": 588,\n\t\"./uz-latn.js\": 588,\n\t\"./uz.js\": 6791,\n\t\"./vi\": 5666,\n\t\"./vi.js\": 5666,\n\t\"./x-pseudo\": 4378,\n\t\"./x-pseudo.js\": 4378,\n\t\"./yo\": 5805,\n\t\"./yo.js\": 5805,\n\t\"./zh-cn\": 3839,\n\t\"./zh-cn.js\": 3839,\n\t\"./zh-hk\": 5726,\n\t\"./zh-hk.js\": 5726,\n\t\"./zh-mo\": 9807,\n\t\"./zh-mo.js\": 9807,\n\t\"./zh-tw\": 4152,\n\t\"./zh-tw.js\": 4152\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6700;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(5708)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","DRAGGABLE_KEY_ID","EXTRA_ACTION_ATTRIBUTE_NAME","Modifier","KeyType","SidebarLocation","RowPosition","BrowserUtil","scrollSmoothToId","element","document","block","behavior","scrollToBottomNow","offset","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classesText","classes","classValue","addAttributes","attributes","attribute","removeAttributes","allElementsFromPoint","elements","old_visibility","k","ViewListenerForwarder","suppressEventEmits","this","itemDeleted","listener","documentLoaded","itemAction","canDeleteItem","result","hideRequested","showRequested","itemDropped","avLogger","debug","avLoggerDetails","AbstractView","containerEl","handleDrop","bind","getItemId","Error","getItemDescription","hasActionPermission","getUIConfig","addEventListener","onDocumentLoaded","uiConfig","setContainedBy","getName","hasChanged","getDataSourceKeyId","event","draggedObjectJSON","draggedObject","JSON","droppedObjectType","droppedObjectFrom","acceptType","drop","acceptTypes","findIndex","objectType","acceptFrom","from","isSameMongo","item1","item2","DATA_SOURCE","AlertType","CollectionViewListenerForwarder","itemDragStarted","itemSelected","itemDeselected","canSelectItem","ALERT_hideClass","ALERT_showClass","logger","AlertManager","confirmHandler","outcome","context","cancelHandler","CollectionViewEventHandlerDelegate","selectedItem","eventStartDrag","eventActionClicked","eventClickItem","eventDeleteClickItem","getDragData","getItemContext","itemId","dataSource","view","getCollectionUIConfig","keyType","number","parseInt","compareWith","getItemInNamedCollection","detail","data","shouldSelect","shouldDelete","eventForwarder","actionName","completed","AbstractCollectionView","forwarder","getIdForItemInNamedCollection","addEventCollectionListener","container","renderer","renderBackgroundForItemInNamedCollection","compareItemsForEquality","isSame","getModifierForItemInNamedCollection","normal","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","updateViewForNamedCollection","viewEl","hasPermissionToDeleteItemInNamedCollection","hasPermissionToUpdateItemInNamedCollection","hasPermissionToActionItemInNamedCollection","setRenderer","TogglePlacement","defaultIdentifier","ContextualInformationHelper","registry","menuDivEl","menuContentEl","handleContextMenu","hideContextMenu","ensureInRegistry","addTooltip","placement","bottom","$","html","findContextFromElement","action","displayName","handler","hasPermission","elementDefinition","elementType","elementAttributes","name","value","elementClasses","iconClasses","icon","buildContextMenu","foundIndex","source","defaultType","internalType","identifier","description","actions","parent","type","id","desc","contexts","contextDef","collectionView","browserUtil","itemEl","SOURCE","TYPE","DISPLAYNAME","IDENTIFIER","DESCRIPTION","BOOTSTRAP_TOGGLE","BOOTSTRAP_PLACEMENT","BOOTSTRAP_TOOLTIP_VALUE","BOOTSTRAP_POPOVER_VALUE","BOOTSTRAP_TOGGLE_HTML","BOOTSTRAP_TOGGLE_HTML_VALUE","BOOTSTRAP_PLACEMENT_TOP","BOOTSTRAP_PLACEMENT_BOTTOM","BOOTSTRAP_PLACEMENT_RIGHT","BOOTSTRAP_PLACEMENT_LEFT","stateEventType","smLogger","StateChangedDelegate","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","StateChanged","previousObjValue","stateChangeListeners","changeListenersForName","ItemAdded","ItemUpdated","ItemDeleted","err","console","addChangeListenerForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","AbstractStateManager","forceSaves","managerName","state","stateObjForName","getStateByName","stateValueObj","_getState","setStateByName","informListeners","_saveState","stateObjectForName","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","item","updateItemInState","msManager","MemoryBufferStateManager","getInstance","_ensureStatePresent","applicationState","_addNewNamedStateToStorage","_replaceNamedStateInStorage","find","_addItemToState","_removeItemFromState","valueIndex","_updateItemInState","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","stateChangedItemAdded","getListenerName","aggLogger","AggregateStateManager","filters","mWF","manager","stateManager","managerWithFilters","sm","stateManagers","length","filter","STATE_NAMES","VIEW_NAME","VIEW_CONTAINER","RequestType","queueType","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","query","fetch","url","response","apiFetchJSONWithPost","request","error","apiFetchJSONWithGet","apiFetchJSONWithDelete","apiFetchJSONWithPut","putParameters","fetchJSON","callback","CallbackRegistry","callbacks","fn","Poller","interval","isPollingBool","startPolling","delay","INTERVAL_DEFAULT","setInterval","isPolling","stopPolling","clearInterval","URL_CALL","IndexedDBStateManager","callbackForAddItem","callbackForRemoveItem","callbackForUpdateItem","callbackForGetItems","hasCompletedRun","collections","collection","bHasCompletedRun","setCompletedRun","forceResetForGet","initialise","runsComplete","openDB","dbName","upgrade","db","keyPath","autoIncrement","blocked","blocking","terminated","getKeyFieldForKey","saveWithCollectionKey","keyField","transaction","ev","objectStore","saveItemsToCollection","saveData","addNewItemToCollection","removeItemFromCollection","updateItemInCollection","delegate","getWithCollectionKey","savedResults","checkForObjectStore","key","cursor","getConfiguredStateNames","removeAllItemsFromCollectionKey","BootstrapNotification","show","topOffset","duration","containerId","notificationManager","bgColorClass","NotificationType","info","warning","message","priority","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","setTimeout","NotificationFactory","createNotification","NotificationManager","notificationNode","notificationFactory","notification","currentCount","notifications","parentEl","OfflineManager","serverBackOnline","indexedDB","jsonRequest","v4","offlineResults","DownloadManager","DB_NAME","OBJECT_STORE","callbackForQueueRequest","processOfflineItems","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","priorityQueue","getBackgroundQueueCount","backgroundQueue","addQLApiRequest","isPriority","POST","params","variables","callbackId","associatedStateName","addQLMutationRequest","mutation","addApiRequest","wasOffline","requestId","managerRequest","originalRequest","PRIORITY","priorityChangeListener","handleEventAddToQueue","BACKGROUND","backgroundChangeListener","processPriorityQueue","queueItem","inProgress","push","initiateFetchForQueueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","handleEventRemoveFromQueue","httpStatus","apiUtil","GET","DELETE","PUT","RESTApiStateManager","configuration","results","config","getConfigurationForStateName","stateObj","stateName","serverURL","api","isActive","status","FUNCTION_ID_ADD_ITEM","FUNCTION_ID_REMOVE_ITEM","FUNCTION_ID_UPDATE_ITEM","FUNCTION_ID_GET_ITEMS","FieldType","SecurityManager","hash","logoutEl","username","localStorage","sessionStorage","isLoggedIn","loggedInUser","CryptoJS","encryptString","decryptString","flogger","vlogger","glogger","rlogger","BasicFieldOperations","setSubElements","formatValue","field","date","moment","currentValue","datetime","boolean","float","parsed","parseFloat","isNaN","money","integer","isValidValue","isValid","resetOnFailure","email","text","password","time","shortTime","renderValue","newValue","generate","generateValue","index","previousFieldValues","fieldValue","uuid","userId","dateRegex","emailRegex","shortTimeRegex","timeRegex","dateTimeRegex","basicPasswordRegex","integerRegex","floatRegexp","moneyRegexp","booleanRegexp","durationRegexp","FIELD_CreatedOn","FIELD_ModifiedOn","FIELD_CreatedBy_Desc","FIELD_ModifiedBy_Desc","FIELD_CreatedOn_Desc","FIELD_ModifiedOn_Desc","BasicObjectDefinitionFactory","dataObjDef","order","fieldId","fieldDef","displayOrder","createModifierFields","idFieldName","objDef","fields","ops","fieldType","isKey","idType","mandatory","generator","onModify","onCreation","isMandatory","datasource","addStringFieldToArray","addNumericFieldToArray","def","displayOnly","addFieldToArray","string","generatorDef","ObjectDefinitionRegistry","definitions","definition","findDefinition","fieldOps","createInstanceFromDef","SimpleValueDataSource","addListener","getOptions","DefaultValueGenerator","cLogger","cLoggerDetail","Controller","connectToApplication","restSM","idField","aggregateSM","memorySM","asyncSM","getStateManager","create","delete","update","setupDataObjectDefinitions","exerciseTypeDefinition","limitedChoice","UIFieldType","FormMode","DATA_ID_ATTRIBUTE","FormEventType","ComparisonType","ConditionResponse","ValidationManager","form","rule","targetField","convertedRule","fieldConditions","valueConditions","condition","sourceField","comparison","values","sourceType","formRules","formRule","formRuleSet","rules","getRulesForFieldChange","formId","ruleFailed","ruleSubset","failedResponses","hide","invalid","valid","targetValue","sourceValue","lessThan","lessThanEqual","greaterThanEqual","greaterThan","equals","targetType","compareTwoValuesWithTypes","check","areTwoFieldsEqual","isTargetLessThanSource","splits","foundInValue","doesFieldHaveValue","isTargetGreaterThan","isTargetLessThanEqualSource","isTargetGreaterThanEqualSource","isNull","isSourceNull","isNotNull","isSourceNotNull","hasValue","doesSourceFieldHaveValue","ruleCheck","ruleSet","dlogger","AbstractForm","formListeners","fieldListeners","uiDef","isVisible","isInitialised","hasChangedBoolean","isDisplayOnly","valueChanged","failedValidation","hideModifierFields","formEvent","target","RESETTING","HIDDEN","SHOWN","checkFormValidationOnDisplay","checkForVisualValidationForDisplayOnly","CREATING","MODIFYING","shouldCancelChange","CANCELLING","CANCELLED","CANCELLING_ABORTED","DELETING","DELETE_ABORTED","DELETED","SAVE_ABORTED","SAVED","SAVING","allFieldsValid","formattedDataObject","getId","getFieldFromDataFieldId","mapItem","map","clearReadOnly","setReadOnly","isDisplayingItem","_isSameObjectAsDisplayed","isReadOnly","fieldGroups","RBGFieldOperations","radioButtons","radioButton","BootstrapFormConfigHelper","fieldOperations","rbgFieldOperation","fieldUIConfigs","hidden","checkbox","largeText","textarea","choice","select","radioGroup","displayOrders","displayOrderValue","fieldUIConfig","formatter","label","validator","messageDisplay","validClasses","invalidClasses","rows","cols","fieldGroup","containedBy","formConfig","unsavedChanges","innerHTML","buttonsContainedBy","cancelButton","buttonText","buttonClasses","submitButton","activeSave","group","a","b","ValidationEventHandler","subElements","handleEvent","undefined","fieldConfig","validationElementTarget","fieldElement","subElement","errorMessageDiv","errorMessageEl","processValidation","validationResp","EditingEventListener","editor","editValue","DefaultFieldOptionsListener","optionsChanged","FieldInputElementFactory","eventHandler","errorMessageDivEl","messageEl","containedByEl","labelEl","descEl","valueOptions","valueEl","valueOption","radioGroupElement","FormElementFactory","formEl","formInputElements","formTAElements","formRBGElements","formSelectElements","unsavedMessage","fieldEl","buttonContainer","deleteButtonEl","createFormButton","cancelButtonEl","submitButtonEl","selectFields","radioButtonGroups","textFields","deleteButton","buttonEl","buttonDef","iconEl","RenderingEventListener","processRendering","AbstractField","handleChangeEvent","isHidden","addFieldListener","listenerInList","getFieldDefinition","setInvalid","getValue","getFormattedValue","setValue","selectEl","selectedIndex","option","reset","clearValue","validate","render","setValid","TextAreaField","RadioButtonGroupField","SelectField","InputField","BasicFormImplementation","factoryElements","getFormattedDataObject","formattedResult","dataId","findFieldUiConfig","attributeId","rbg","isSameObject","currentObjId","suppliedObjId","dataObj","FormDetailViewRenderer","setEventForwarder","hasDeleteButton","displayItemReadonly","dataObject","hasPermissionToUpdateItem","startUpdate","setIsVisible","permissionChecker","hasPermissionToDeleteItem","handleActionItem","cancelled","deletedItem","formattedObj","saveNewItem","updateItem","DetailViewListenerForwarder","DetailViewImplementation","currentItem","addEventDetailListener","DataObjectController","isCreatingNew","ChildViewListenerDelegate","addView","LinkedCollectionDetailController","children","parentView","childView","canProceedWithSelection","confirm","canProceedWithCreateNew","AbstractStatefulCollectionView","ListViewRendererUsingContext","collectionName","childEl","textEl","contentEl","imgEl","buttonsEl","badgeValue","badgeEl","extraAction","icons","modifier","secondModifier","getSecondaryModifierForItemInNamedCollection","active","inactive","newState","CollectionViewEventHandlerDelegateUsingContext","contextDetail","TransactionsView","buffer","Intl","style","currency","renderDisplayForItemInNamedCollection","DOMConfig","viewConfig","resultsContainerId","dataSourceId","resultsElementType","resultsElementAttributes","resultsClasses","keyId","modifiers","containerClasses","textElementType","textElementClasses","DefaultPermissionChecker","TransactionsCompositeView","transactionsView","transactionDef","transactionDetailViewRenderer","transactionDetailView","viewLinker","startingDisplayOrder","detailForm","addTransactionButton","detailContainerEl","window","formChanged","scrollViewEl","itemEls","BudgetSummaryRenderer","currentChart","sum","labels","transactions","t","datasets","fill","backgroundColor","BudgetSummaryView","BudgetBalance","totalEl","balance","App","onDocumentLoad","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","keys","Object","resolve","module","exports","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","call","m","O","chunkIds","notFulfilled","Infinity","i","fulfilled","j","every","splice","r","n","getter","__esModule","d","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","__webpack_exports__"],"sourceRoot":""}