{"version":3,"file":"app.bundle.js","mappings":"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,KAAK,CAALA,GAAAA,KAAcC,KAAK,CAA3B;AACH;AAGM,sCAAyD;AAC5D,SAAQD,KAAK,CAALA,QAAAA,KAAmBC,KAAK,CAAhC;AACH;AAEM,kCAAqD;AACxD,SAAQD,KAAK,CAALA,QAAAA,KAAmBC,KAAK,CAAhC;AACH;;;;;;;;;;ACjnSA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WC5BA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;;;;;WCJA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack://template-feo-react-babel/./src/App.ts","webpack://template-feo-react-babel/./src/app/AppTypes.ts","webpack://template-feo-react-babel/./src/app/Controller.ts","webpack://template-feo-react-babel/./src/app/renderer/BudgetSummaryRenderer.ts","webpack://template-feo-react-babel/./src/app/view/BudgetSummaryView.ts","webpack://template-feo-react-babel/./src/app/view/TransactionsCompositeView.ts","webpack://template-feo-react-babel/./src/app/view/TransactionsView.ts","webpack://template-feo-react-babel/./src/framework/model/BasicFieldOperations.ts","webpack://template-feo-react-babel/./src/framework/model/BasicObjectDefinitionFactory.ts","webpack://template-feo-react-babel/./src/framework/model/DataObjectController.ts","webpack://template-feo-react-babel/./src/framework/model/DataObjectTypeDefs.ts","webpack://template-feo-react-babel/./src/framework/model/DefaultValueGenerator.ts","webpack://template-feo-react-babel/./src/framework/model/ObjectDefinitionRegistry.ts","webpack://template-feo-react-babel/./src/framework/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/framework/network/CallbackRegistry.ts","webpack://template-feo-react-babel/./src/framework/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/framework/network/OfflineManager.ts","webpack://template-feo-react-babel/./src/framework/network/Poller.ts","webpack://template-feo-react-babel/./src/framework/network/Types.ts","webpack://template-feo-react-babel/./src/framework/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/framework/notification/Notification.ts","webpack://template-feo-react-babel/./src/framework/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/framework/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/framework/security/SecurityManager.ts","webpack://template-feo-react-babel/./src/framework/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/framework/state/IndexedDBStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/RESTApiStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/framework/state/StateManager.ts","webpack://template-feo-react-babel/./src/framework/ui/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/framework/ui/alert/AlertListener.ts","webpack://template-feo-react-babel/./src/framework/ui/alert/AlertManager.ts","webpack://template-feo-react-babel/./src/framework/ui/context/ContextualInformationHelper.ts","webpack://template-feo-react-babel/./src/framework/ui/form/AbstractForm.ts","webpack://template-feo-react-babel/./src/framework/ui/form/BasicFormImplementation.ts","webpack://template-feo-react-babel/./src/framework/ui/form/FormListener.ts","webpack://template-feo-react-babel/./src/framework/ui/form/FormUITypeDefs.ts","webpack://template-feo-react-babel/./src/framework/ui/form/event-handlers/EditingEventListener.ts","webpack://template-feo-react-babel/./src/framework/ui/form/event-handlers/RenderingEventListener.ts","webpack://template-feo-react-babel/./src/framework/ui/form/event-handlers/ValidationEventHandler.ts","webpack://template-feo-react-babel/./src/framework/ui/form/factory/FieldInputElementFactory.ts","webpack://template-feo-react-babel/./src/framework/ui/form/factory/FormElementFactory.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/AbstractField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/InputField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/RadioButtonGroupField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/SelectField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/TextAreaField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/validation/ValidationManager.ts","webpack://template-feo-react-babel/./src/framework/ui/form/validation/ValidationTypeDefs.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/BootstrapFormConfigHelper.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/LinkedCollectionDetailController.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/RBGFieldOperations.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/SimpleValueDataSource.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewEventHandlerDelegate.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewEventHandlerDelegateUsingContext.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/DetailViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractCollectionView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractStatefulCollectionView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/DefaultPermissionChecker.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/DetailViewImplementation.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/FormDetailViewRenderer.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/ListViewRendererUsingContext.ts","webpack://template-feo-react-babel/./src/framework/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/framework/util/EqualityFunctions.ts","webpack://template-feo-react-babel//Users/jimsharples/Development/pwa-budget-tracker/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/make namespace object","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/before-startup","webpack://template-feo-react-babel/webpack/startup","webpack://template-feo-react-babel/webpack/after-startup"],"sourcesContent":["//localStorage.debug = 'linked-controller api-ts exercise-types-view app controller-ts controller-ts-detail api-ts socket-ts user-search user-search-detail list-view-renderer';\n//localStorage.debug = 'collection-view-ts collection-view-ts-detail form-detail-view-renderer linked-controller linked-controller-detail exercise-types-view app validation-manager-rule-failure validation-manager';\n//localStorage.debug = 'validation-manager validation-manager-rule-failure abstract-form-detail-validation';\nimport {ContextualInformationHelper} from \"./framework/ui/context/ContextualInformationHelper\";\nimport debug from 'debug';\nimport Controller from './app/Controller';\nimport StateChangeListener from \"./framework/state/StateChangeListener\";\nimport {ELEMENT, STATE_NAMES} from \"./app/AppTypes\";\nimport {TransactionsCompositeView} from \"./app/view/TransactionsCompositeView\";\nimport {BudgetSummaryView} from \"./app/view/BudgetSummaryView\";\n\n\n//localStorage.debug = 'api-ts transactions-composite-view transactions-view ';\nlocalStorage.debug = 'abstract-form abstract-form-detail basic-form basic-form-detail form-detail-view-renderer';\n\ndebug.log = console.info.bind(console);\n\n\nconst logger = debug('app');\n\nclass BudgetBalance implements StateChangeListener {\n    private totalEl:HTMLSpanElement|null = null;\n\n    constructor() {}\n\n    onDocumentLoaded() {\n        this.totalEl = document.getElementById(ELEMENT.total);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.transactions,this);\n    }\n\n    getListenerName(): string {\n        return \"Balance\";\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        let balance = 0.0;\n        if (this.totalEl && newValue && (newValue.length > 0)) {\n            newValue.forEach((value:any) => {\n                if (value.type) {\n                    switch(value.type) {\n                        case 'deposit': {\n                            balance += parseFloat(value.amount);\n                            break;\n                        }\n                        case 'withdrawal': {\n                            balance -= parseFloat(value.amount);\n                            break;\n                        }\n                    }\n                }\n            });\n            this.totalEl.innerHTML = '$' + balance;\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName,name,Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.transactions));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        this.stateChanged(managerName,name,Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.transactions));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        this.stateChanged(managerName,name,Controller.getInstance().getStateManager().getStateByName(STATE_NAMES.transactions));\n    }\n\n}\n\n\nexport default class App  {\n\n    private static _instance: App;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n\n\n    private constructor() {\n        // event handlers\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    public static getInstance(): App {\n        if (!(App._instance)) {\n            App._instance = new App();\n        }\n        return App._instance;\n    }\n\n    onDocumentLoad() {\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        new TransactionsCompositeView().onDocumentLoaded();\n        new BudgetSummaryView().onDocumentLoaded();\n\n\n        new BudgetBalance().onDocumentLoaded();\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        Controller.getInstance().onDocumentLoaded();\n\n\n\n    }\n\n\n\n\n}\n\n\n$(function () {\n    App.getInstance().onDocumentLoad();\n});","\nexport const STATE_NAMES = {\n    transactions: 'transaction',\n}\n\nexport const API_Config = {\n    transaction: '/api/transaction'\n};\n\n\n\nexport const VIEW_NAME = {\n    transactions: 'transactions',\n    budgetSummary: 'budgetChart'\n}\n\nexport const VIEW_CONTAINER = {\n    transactionDetail: \"transactionDetail\",\n}\n\nexport const BUTTON = {\n    createNew: 'addNew'\n}\n\nexport const ELEMENT = {\n    total: 'total'\n}\n\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"../framework/state/MemoryBufferStateManager\";\nimport StateChangeListener from \"../framework/state/StateChangeListener\";\nimport {StateManager} from \"../framework/state/StateManager\";\nimport AsyncStateManagerWrapper from \"../framework/state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"../framework/state/AggregateStateManager\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {RESTApiStateManager} from \"../framework/state/RESTApiStateManager\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"../framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../framework/model/ObjectDefinitionRegistry\";\nimport {BasicObjectDefinitionFactory} from \"../framework/model/BasicObjectDefinitionFactory\";\nimport {SimpleValueDataSource} from \"../framework/ui/helper/SimpleValueDataSource\";\nimport {DataObjectListener} from \"../framework/model/DataObjectListener\";\nimport {DataObjectController} from \"../framework/model/DataObjectController\";\nimport {isSameMongo} from \"../framework/util/EqualityFunctions\";\nimport DownloadManager from \"../framework/network/DownloadManager\";\nimport {DefaultValueGenerator} from \"../framework/model/DefaultValueGenerator\";\n\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nexport default class Controller implements DataObjectListener {\n    private static _instance: Controller;\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName: STATE_NAMES.transactions,\n                serverURL: '',\n                api: API_Config.transaction,\n                isActive: true\n            },\n        ]);\n\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, restSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncSM, [], false);\n\n        this.stateManager = aggregateSM;\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n\n        // load the transactions\n        this.getStateManager().getStateByName(STATE_NAMES.transactions);\n\n        // apply any queued changes from being offline\n        DownloadManager.getInstance().processOfflineItems();\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.transactions: {\n                cLogger(`Handling create new transaction`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.transactions: {\n                cLogger(`Handling delete transaction - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.transactions: {\n                cLogger(`Handling update transaction`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName, dataObj, isSameMongo, false);\n                break;\n            }\n        }\n    }\n\n\n\n    private setupDataObjectDefinitions() {\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.transactions, 'Transaction', true, true, false, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true, \"Name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose deposit or withdrawal\",\n            new SimpleValueDataSource([\n                {name: 'Deposit', value: 'deposit'},\n                {name: 'Withdrawal', value: 'withdrawal'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"amount\", \"Amount\", FieldType.money, true, \"Amount\");\n        BasicObjectDefinitionFactory.getInstance().addCreatedDateToDefinition(exerciseTypeDefinition);\n        BasicObjectDefinitionFactory.getInstance().setDefaultValueForField(exerciseTypeDefinition, \"type\",new DefaultValueGenerator('withdrawal'));\n        cLogger(exerciseTypeDefinition);\n    }\n\n\n}\n\n\n","import debug from 'debug';\nimport moment from \"moment\";\nimport Chart from \"chart.js/auto\";\nimport {CollectionViewRenderer} from \"../../framework/ui/view/interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../../framework/ui/view/interface/CollectionViewEventHandler\";\nimport {CollectionView} from \"../../framework/ui/view/interface/CollectionView\";\n\nconst avLogger = debug('budget-summary-renderer');\n\nexport class BudgetSummaryRenderer implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    private currentChart: Chart | null = null;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        return document.createElement('a');\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating budget summary`);\n        avLogger(newState);\n\n        if (this.currentChart) this.currentChart.destroy();\n\n        // okay we need to go through the last 7 workouts\n        // let sevenWorkouts = newState;\n        // if (newState.length > 7) {\n        //     sevenWorkouts = newState.slice(newState.length - 7);\n        // }\n        //\n        //\n        // // go through the workouts and find all the unique exercise names as data series names\n        // let exerciseNames: string[] = [];\n        // let exerciseBG: string[] = [];\n        // let exerciseBR: string[] = [];\n        // let exerciseTypes: string[] = [];\n        // let labels: string[] = [];\n        // sevenWorkouts.forEach((workout: any) => {\n        //     const label = moment(workout.createdOn, 'YYYYMMDDHHmmss').format('ddd DD/MM/YYYY HH:mm');\n        //     labels.push(label);\n        //     avLogger(`Added label ${label}`);\n        //\n        //     if (workout.exercises) {\n        //         workout.exercises.forEach((exercise: any) => {\n        //             const exerciseName = exercise.name;\n        //             // do we have this exercise already?\n        //             let foundIndex = exerciseNames.findIndex((name) => name == exerciseName);\n        //             if (foundIndex < 0) {\n        //                 avLogger(`Adding exercise ${exerciseName} of type ${exercise.type} to datasets`);\n        //                 exerciseNames.push(exerciseName);\n        //                 exerciseTypes.push(exercise.type);\n        //                 const colours = this.generateRandomExerciseColourAndBorder((exercise.type === 'strength'));\n        //                 exerciseBG.push(colours[0]);\n        //                 exerciseBR.push(colours[1]);\n        //             }\n        //         })\n        //     }\n        // });\n        //\n        // // construct the data series, for each series (exercise), go through the workouts and create a data entry for that item\n        //\n        // let datasets: any[] = [];\n        //\n        // exerciseNames.forEach((name, index) => {\n        //     const exerciseType = exerciseTypes[index];\n        //     const itemBG = exerciseBG[index];\n        //     const itemBR = exerciseBR[index];\n        //\n        //     avLogger(`Constructing dataset ${name} of type ${exerciseType} to datasets`);\n        //\n        //     let data: number[] = [];\n        //     let bg: string[] = [];\n        //     let br: string[] = [];\n        //\n        //\n        //     sevenWorkouts.forEach((workout: any) => {\n        //         bg.push(itemBG);\n        //         br.push(itemBR);\n        //\n        //         // find the exercise name\n        //         if (workout.exercises) {\n        //\n        //             const didntFindExercise = workout.exercises.every((exercise: any) => {\n        //                 if (exercise.name == name) {\n        //                     if (exerciseType === 'strength') {\n        //                         avLogger(`Found exercise ${name} with value ${exercise.weight}`);\n        //                         data.push(exercise.weight);\n        //                     } else {\n        //                         avLogger(`Found exercise ${name} with value ${exercise.distance}`);\n        //                         data.push(exercise.distance);\n        //                     }\n        //                     return false;\n        //                 }\n        //                 return true;\n        //             });\n        //             // not found - zero value\n        //             if (didntFindExercise) {\n        //                 data.push(0);\n        //             }\n        //\n        //         } else {\n        //             data.push(0);\n        //         }\n        //     });\n        //     let dataset = {label: name, data: data, backgroundColor: bg, borderColor: br, borderWidth: 1, order: 1};\n        //     let lineDataSet = {label: name, data: data, backgroundColor: bg, borderColor: br, order: 0, type: 'line'};\n        //     avLogger(dataset);\n        //     datasets.push(dataset);\n        //     //datasets.push(lineDataSet);\n        // });\n        //\n        //\n        // let chartData = {\n        //     labels: labels,\n        //     datasets: datasets,\n        // };\n        //\n        // let config = {\n        //     type: 'bar',\n        //     data: chartData,\n        //     options: {\n        //         responsive: true,\n        //         animation: true,\n        //         maintainAspectRatio: true,\n        //         scales: {\n        //             y: {\n        //                 beginAtZero: true\n        //             }\n        //         }\n        //     },\n        //\n        // }\n        // avLogger(chartData);\n        //\n        // // @ts-ignore\n        // this.currentChart = new Chart(<HTMLCanvasElement>containerEl, config);\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n\n}","import AbstractStatefulCollectionView from \"../../framework/ui/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType} from \"../../framework/ui/ConfigurationTypes\";\nimport {STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../framework/ui/view/interface/CollectionViewListener\";\nimport {View} from \"../../framework/ui/view/interface/View\";\n\nimport {BudgetSummaryRenderer} from \"../renderer/BudgetSummaryRenderer\";\n\n\nexport class BudgetSummaryView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'budgetContainer',\n            dataSourceId: VIEW_NAME.budgetSummary,\n        },\n        resultsElementType: 'canvas',\n        resultsClasses: '',\n        keyId: '_id',\n        keyType: KeyType.string,\n        detail: {\n            containerClasses: '',\n            textElementType: '',\n            textElementClasses: '',\n            select: false,\n        },\n    }\n\n\n    constructor() {\n        super(BudgetSummaryView.DOMConfig, Controller.getInstance().getStateManager(), STATE_NAMES.transactions);\n        this.renderer = new BudgetSummaryRenderer(this, this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return false;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return false;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {\n    }\n\n}\n\n","import {DataObjectDefinition} from \"../../framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../framework/model/ObjectDefinitionRegistry\";\nimport {BUTTON, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../AppTypes\";\nimport {FormDetailViewRenderer} from \"../../framework/ui/view/renderer/FormDetailViewRenderer\";\nimport {DetailView} from \"../../framework/ui/view/interface/DetailView\";\nimport {DetailViewImplementation} from \"../../framework/ui/view/implementation/DetailViewImplementation\";\nimport {LinkedCollectionDetailController} from \"../../framework/ui/helper/LinkedCollectionDetailController\";\nimport {BasicObjectDefinitionFactory} from \"../../framework/model/BasicObjectDefinitionFactory\";\nimport Controller from \"../Controller\";\nimport debug from \"debug\";\nimport {TransactionsView} from \"./TransactionsView\";\nimport {DefaultPermissionChecker} from \"../../framework/ui/view/implementation/DefaultPermissionChecker\";\nimport {Form} from \"../../framework/ui/form/Form\";\n\nconst logger = debug('transactions-composite-view');\n\nexport class TransactionsCompositeView {\n\n    constructor() {\n    }\n\n    onDocumentLoaded() {\n        const transactionsView = new TransactionsView(Controller.getInstance().getStateManager());\n\n        const transactionDef: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.transactions);\n\n        if (transactionDef) {\n            let transactionDetailViewRenderer: FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.transactionDetail, transactionDef, new DefaultPermissionChecker(false,false));\n\n            let transactionDetailView: DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.transactionDetail,\n                    dataSourceId: VIEW_NAME.transactions\n                }, transactionDetailViewRenderer);\n            let viewLinker: LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.transactions, transactionsView);\n            viewLinker.addLinkedDetailView(transactionDetailView);\n\n            transactionsView.onDocumentLoaded();\n            transactionDetailView.onDocumentLoaded();\n\n\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(transactionDef);\n            transactionDetailView.initialise(startingDisplayOrder, false, true);\n\n            const detailForm: Form | null = transactionDetailViewRenderer.getForm();\n            console.log(detailForm);\n\n\n            // setup the event handling for the create new exercise type button\n            let addTransactionButton = <HTMLButtonElement>document.getElementById(BUTTON.createNew);\n            logger(`Setting up button for creating transactions`);\n            if (addTransactionButton) {\n                addTransactionButton.addEventListener('click', (event) => {\n                    logger(`Asking view linker to start a new object`);\n                    viewLinker.startNewObject();\n                });\n\n            }\n\n            viewLinker.addListener(Controller.getInstance());\n        }\n    }\n\n\n\n\n\n\n}","import AbstractStatefulCollectionView from \"../../framework/ui/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../framework/ui/ConfigurationTypes\";\nimport {STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../framework/ui/view/interface/CollectionViewListener\";\nimport {View} from \"../../framework/ui/view/interface/View\";\n\nimport debug from 'debug';\nimport {StateManager} from \"../../framework/state/StateManager\";\nimport {ListViewRendererUsingContext} from \"../../framework/ui/view/renderer/ListViewRendererUsingContext\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../framework/ui/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\nimport {CollectionViewListenerForwarder} from \"../../framework/ui/view/delegate/CollectionViewListenerForwarder\";\nimport moment from \"moment\";\n\nconst logger = debug('transactions-view');\n\nexport class TransactionsView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'transactions',\n            dataSourceId: VIEW_NAME.transactions,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-warning',\n            active: 'list-group-item-primary',\n            warning: 'list-group-item-warning'\n        },\n        icons: {\n            normal: '',\n            inactive: 'fas fa-arrow-alt-circle-down',\n            active: 'fas fa-arrow-alt-circle-up',\n            warning: 'fas fa-arrow-alt-circle-down'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: false,\n        },\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(TransactionsView.DOMConfig, stateManager, STATE_NAMES.transactions);\n        this.renderer = new ListViewRendererUsingContext(this, this);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n    }\n\n\n    getItemDescription(from: string, item: any): string {\n        logger(item);\n        let buffer = '';\n        const dateDisplay = moment(item.createdOn,'YYYYMMDDHHmmss').format('DD/MM/YY HH:mm');\n        buffer += `<strong>${dateDisplay}</strong>: `;\n        if (item.type === 'deposit') {\n            buffer += '+';\n        } else {\n            buffer += '-';\n        }\n        buffer += `${item.amount}`;\n        return buffer;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        if (item.type === 'deposit') {\n           return Modifier.active;\n        } else {\n           return Modifier.inactive;\n        }\n        return Modifier.normal;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = this.getItemDescription(name,item);\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return false;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return false;\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any) {}\n\n\n}\n\n","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../../app/Controller\";\nimport {FieldFormatter, FieldRenderer, FieldValidator, ValidationResponse} from \"../ui/form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"./DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ui/ConfigurationTypes\";\nimport {SecurityManager} from \"../security/SecurityManager\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class BasicFieldOperations implements FieldFormatter, FieldRenderer, FieldValidator, FieldValueGenerator {\n    private static dateRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))$/;\n    private static emailRegex: RegExp = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+([^<>()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/;\n    private static shortTimeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n    private static timeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static dateTimeRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))\\s([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static basicPasswordRegex: RegExp = /^[a-zA-Z0-9]{8,15}$/;\n    private static integerRegex: RegExp = /^[+-]?\\d+$/;\n    private static floatRegexp: RegExp = /^[+-]?\\d+(\\.\\d+)?$/;\n    private static moneyRegexp: RegExp = /^[+-]?\\d+\\.\\d{2}$/;\n    private static booleanRegexp: RegExp = /^true|false$/;\n    private static durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n    private previousFieldValues: FieldNameValue[];\n\n    public constructor() {\n        this.previousFieldValues = [];\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n    }\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue}`);\n        let result: any = currentValue;\n        switch (field.type) { // only need to change dates\n            case (FieldType.date): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY').format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.datetime): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY HH:mm:ss').format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.boolean): {\n                result = (currentValue.toLowerCase() === 'true');\n                break;\n            }\n            case (FieldType.id): {\n                if (field.idType === KeyType.number) {\n                    result = parseInt(currentValue);\n                }\n                break;\n            }\n            case (FieldType.float): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.money): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.integer): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n\n        }\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: true,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            // do we have any content?\n            if ((!currentValue) || (currentValue.trim().length === 0)) {\n                response.isValid = false;\n                response.message = `${field.displayName} is required. Please enter a valid value.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n            // boolean is a special case, and must be true\n            if (field.type === FieldType.boolean) {\n                if (currentValue.trim().toLowerCase() !== 'true') {\n                    response.isValid = false;\n                    response.message = `${field.displayName} is required and must be selected.`;\n                    vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                    return response;\n                }\n            }\n        }\n\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        if (currentValue) {\n            switch (field.type) {\n                case (FieldType.datetime): {\n                    response.isValid = BasicFieldOperations.dateTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY hh:mm`;\n\n                    }\n                    break;\n                }\n                case (FieldType.date): {\n                    response.isValid = BasicFieldOperations.dateRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY`;\n\n                    }\n                    break;\n                }\n                case (FieldType.float): {\n                    response.isValid = BasicFieldOperations.floatRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 00.00`;\n                    }\n                    break;\n                }\n                case (FieldType.money): {\n                    response.isValid = BasicFieldOperations.moneyRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 0.00`;\n                    }\n                    break;\n                }\n                case (FieldType.id): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.email): {\n                    response.isValid = BasicFieldOperations.emailRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an email address`;\n                    }\n                    break;\n                }\n                case (FieldType.integer): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.text): {\n                    break;\n                }\n                case (FieldType.password): {\n                    response.isValid = BasicFieldOperations.basicPasswordRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 8 to 15 letters and digits only`;\n                    }\n                    break;\n                }\n                case (FieldType.time): {\n                    response.isValid = BasicFieldOperations.timeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.shortTime): {\n                    response.isValid = BasicFieldOperations.shortTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM`;\n                    }\n                    break;\n                }\n                case (FieldType.duration): {\n                    response.isValid = BasicFieldOperations.durationRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be in the format MM:SS or 999:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.boolean): {\n                    response.isValid = BasicFieldOperations.booleanRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be true or false`;\n                    }\n                    break;\n                }\n            }\n        }\n\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        // ensure we don't end up in an endless loop\n        // if the value hasn't changed return null\n        // let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        // if (index >= 0) {\n        //     //we have a previous value\n        //     let fieldValue: FieldNameValue = this.previousFieldValues[index];\n        //     rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - previous value ${fieldValue.value}`);\n        //     if (fieldValue.value === currentValue) return null;\n        // }\n        // either not yet seen or value has changed from previous\n        if (currentValue) { // only attempt to render non-empty dates\n            let newValue: string = currentValue;\n\n            switch (field.type) {\n                case (FieldType.date): {\n                    newValue = moment(currentValue, 'YYYYMMDD').format('DD/MM/YYYY');\n                    break;\n                }\n                case (FieldType.datetime): {\n                    newValue = moment(currentValue, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm:ss');\n                    break;\n                }\n            }\n\n            // store the previous value\n            this.setPreviousValue(field, newValue);\n            rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - rendered to ${newValue}`);\n            return newValue;\n        } else {\n            // empty value, no rendering required\n            rlogger(`Rendering value for field ${field.displayName} with new value is empty - no rendering required`);\n\n            return null;\n        }\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        // are we generating the field?\n        if (field.generator) {\n            // are we only generating on create\n            if (field.generator.onCreation && isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on creation ${result}`);\n            }\n            // or if we are modifying and should also be modifying the value\n            if (field.generator.onModify && !isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on modify ${result}`);\n            }\n        }\n        return result;\n    }\n\n    private setPreviousValue(field: FieldDefinition, newValue: string) {\n        rlogger(`Storing previous value for field ${field.displayName} with  new value ${newValue}`);\n        let fieldValue: FieldNameValue;\n\n        let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        if (index >= 0) {\n            //we have a previous value\n            fieldValue = this.previousFieldValues[index];\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - old value was ${fieldValue}`);\n            fieldValue.value = newValue;\n        } else {\n            // create a new record of the value\n            fieldValue = {\n                id: field.id,\n                value: newValue\n            }\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - NO previous`);\n            this.previousFieldValues.push(fieldValue);\n        }\n    }\n\n    private generateValue(field: FieldDefinition): string {\n        let result = '';\n        switch (field.type) {\n            case (FieldType.datetime): {\n                result = moment().format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.date): {\n                result = moment().format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.float): {\n                result = '0.0';\n                break;\n            }\n            case (FieldType.money): {\n                result = '0.00';\n                break;\n            }\n            case (FieldType.id): {\n                result = '-1';\n                break;\n            }\n            case (FieldType.email): {\n                result = 'me@me.com';\n                break;\n            }\n            case (FieldType.integer): {\n                result = '0';\n                break;\n            }\n            case (FieldType.text): {\n                result = '';\n                break;\n            }\n            case (FieldType.password): {\n                result = '';\n                break;\n            }\n            case (FieldType.time): {\n                result = '00:00:00';\n                break;\n            }\n            case (FieldType.shortTime): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.duration): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.boolean): {\n                result = 'false';\n                break;\n            }\n            case (FieldType.uuid): {\n                result = v4();\n                break;\n            }\n            case (FieldType.userId): {\n                result = `${SecurityManager.getInstance().getLoggedInUsername()}`;\n                break;\n            }\n        }\n        return result;\n    }\n\n}","import {KeyType} from \"../ui/ConfigurationTypes\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport {DataObjectDefinition, FieldDefinition, FieldType, FieldValueGenerator} from \"./DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {DisplayOrder} from \"../ui/form/FormUITypeDefs\";\n\nexport const FIELD_ID: string = 'id';\nexport const FIELD_CreatedBy: string = 'createdBy';\nexport const FIELD_ModifiedBy: string = 'modifiedBy';\nexport const FIELD_CreatedOn: string = 'createdOn';\nexport const FIELD_ModifiedOn: string = 'modifiedOn';\n\nexport const FIELD_CreatedBy_Desc: string = 'Created By';\nexport const FIELD_ModifiedBy_Desc: string = 'Last Modified By';\nexport const FIELD_CreatedOn_Desc: string = 'Created On';\nexport const FIELD_ModifiedOn_Desc: string = 'Last Modified On';\n\nexport class BasicObjectDefinitionFactory {\n\n    private static _instance: BasicObjectDefinitionFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): BasicObjectDefinitionFactory {\n        if (!(BasicObjectDefinitionFactory._instance)) {\n            BasicObjectDefinitionFactory._instance = new BasicObjectDefinitionFactory();\n        }\n        return BasicObjectDefinitionFactory._instance;\n    }\n\n    public generateStartingDisplayOrder(dataObjDef: DataObjectDefinition): DisplayOrder[] {\n        let result: DisplayOrder[] = [];\n\n        dataObjDef.fields.forEach((fieldDef, index) => {\n            let order: DisplayOrder = {\n                fieldId: fieldDef.id,\n                displayOrder: index\n            }\n            // is this the created or modified date\n            if (fieldDef.id === FIELD_CreatedOn) {\n                order.displayOrder += 100;\n            }\n            if (fieldDef.id === FIELD_ModifiedOn) {\n                order.displayOrder += 101;\n            }\n            if (fieldDef.type === FieldType.userId) {\n                order.displayOrder += 100;\n            }\n            result.push(order);\n        });\n        return result;\n    }\n\n    public createBasicObjectDefinition(id: string, displayName: string, hasDataId: boolean, dataIdIsUUID: boolean, createModifierFields: boolean = true, idFieldName: string = FIELD_ID): DataObjectDefinition {\n        let objDef: DataObjectDefinition = {\n            id: id,\n            displayName: displayName,\n            fields: []\n        }\n        let ops = new BasicFieldOperations();\n\n        // do we need an id field?\n        if (hasDataId) {\n            let fieldType = FieldType.id;\n            if (dataIdIsUUID) {\n                fieldType = FieldType.uuid;\n            }\n            let fieldDef: FieldDefinition = {\n                id: idFieldName,\n                isKey: true,\n                idType: KeyType.number,\n                type: fieldType,\n                displayName: 'Id',\n                mandatory: true,\n                generator: {\n                    generator: ops,\n                    onModify: false,\n                    onCreation: true\n                }\n            }\n            objDef.fields.push(fieldDef);\n        }\n\n        // add fields for created and modified\n        if (createModifierFields) {\n            this.addCreatedDateToArray(objDef.fields);\n            this.addCreatedByToArray(objDef.fields);\n            this.addModifiedByToArray(objDef.fields);\n            this.addModifiedDateToArray(objDef.fields);\n        }\n\n        return objDef;\n    }\n\n    public addStringFieldToObjDefinition(objDef: DataObjectDefinition, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addStringFieldToArray(objDef.fields, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    public addNumericFieldToObjDefinition(objDef: DataObjectDefinition, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addNumericFieldToArray(objDef.fields, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    private addCreatedDateToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_CreatedOn, FIELD_CreatedOn_Desc, FieldType.datetime, true, FIELD_CreatedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: false\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    public addCreatedDateToDefinition(def:DataObjectDefinition) {\n        this.addCreatedDateToArray(def.fields);\n    }\n\n    private addModifiedDateToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_ModifiedOn, FIELD_ModifiedOn_Desc, FieldType.datetime, true, FIELD_ModifiedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    public addModifiedDateToDefinition(def:DataObjectDefinition) {\n        this.addModifiedDateToDefinition(def);\n    }\n\n    private addCreatedByToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addNumericFieldToArray(fields, FIELD_CreatedBy, FIELD_CreatedBy_Desc, FieldType.userId, true, FIELD_CreatedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: false\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addModifiedByToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_ModifiedBy, FIELD_ModifiedBy_Desc, FieldType.userId, true, FIELD_ModifiedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addFieldToArray(fields: FieldDefinition[], keyType: KeyType, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        let fieldDef: FieldDefinition = {\n            id: id,\n            isKey: false,\n            idType: keyType,\n            type: type,\n            displayName: displayName,\n            mandatory: isMandatory,\n            displayOnly: false,\n        }\n\n        if (isMandatory) {\n            // add generator\n            fieldDef.generator = {\n                generator: new BasicFieldOperations(),\n                onCreation: true,\n                onModify: false\n            }\n        }\n\n\n        if (description) fieldDef.description = description;\n        if (datasource) fieldDef.dataSource = datasource;\n\n        fields.push(fieldDef);\n        return fieldDef;\n    }\n\n    private addStringFieldToArray(fields: FieldDefinition[], id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addFieldToArray(fields, KeyType.string, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    private addNumericFieldToArray(fields: FieldDefinition[], id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addFieldToArray(fields, KeyType.string, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    public setDefaultValueForField(def:DataObjectDefinition,id:string,generator:FieldValueGenerator) {\n        let foundIndex = def.fields.findIndex((field) => field.id === id);\n        if (foundIndex >= 0) {\n            const field = def.fields[foundIndex];\n            if (field) {\n                let generatorDef = {\n                    generator:generator,\n                    onCreation:true,\n                    onModify:false\n                };\n                field.generator = generatorDef;\n            }\n        }\n    }\n\n}","import {DataObjectListener} from \"./DataObjectListener\";\n\nexport abstract class DataObjectController {\n    protected listeners: DataObjectListener[];\n    protected isCreatingNew: boolean = false;\n    protected typeName: string;\n\n    protected constructor(typeName: string) {\n        this.typeName = typeName;\n        this.listeners = [];\n    }\n\n    public addListener(listener: DataObjectListener) {\n        this.listeners.push(listener);\n    }\n\n    public startNewObject(): boolean {\n        let result = false;\n        if (!this.isCreatingNew) {\n            result = this._startNewObject();\n            this.isCreatingNew = result;\n        }\n        return result;\n    }\n\n    public isCreatingNewObject(): boolean {\n        return this.isCreatingNew;\n    }\n\n    protected informListenersOfCreate(dataObj: any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.create(this, this.typeName, dataObj));\n    }\n\n    protected informListenersOfUpdate(dataObj: any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.update(this, this.typeName, dataObj));\n    }\n\n    protected informListenersOfDelete(dataObj: any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.delete(this, this.typeName, dataObj));\n    }\n\n    protected abstract _startNewObject(): boolean; // return false, if the creation was cancelled\n\n}","import {KeyType} from \"../ui/ConfigurationTypes\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {ValidationRule} from \"../ui/form/validation/ValidationTypeDefs\";\n\nexport enum FieldType {\n    id = 'Id',\n    uuid = 'UUID',\n    text = 'Text',\n    integer = 'Integer',\n    float = 'Number',\n    money = 'Money',\n    date = 'Date',\n    time = 'Time',\n    shortTime = 'Short Time',\n    datetime = 'Datetime',\n    email = 'Email',\n    password = 'Password',\n    boolean = 'True/False',\n    userId = 'User',\n    choice = 'Choice',\n    limitedChoice = 'Limited Choice',\n    largeText = 'TextArea',\n    collection = 'Collection',\n    duration = 'Duration'\n}\n\nexport interface FieldValueGenerator {\n    generate(field: FieldDefinition, isCreate: boolean): string;\n}\n\n\nexport type FieldDefinition = {\n    id: string,\n    isKey: boolean,\n    idType: KeyType,\n    type: FieldType,\n    displayName: string,\n    mandatory: boolean,\n    displayOnly?: boolean,\n    description?: string,\n    collectionOfDataObjectId?: string,\n    generator?: {\n        onCreation: boolean,\n        onModify: boolean,\n        generator: FieldValueGenerator\n    },\n    dataSource?: FieldValueOptions\n}\n\nexport type DataObjectDefinition = {\n    id: string,\n    displayName: string,\n    fields: FieldDefinition[],\n    rules?: ValidationRule\n}\n\n\n\n","import {FieldDefinition, FieldValueGenerator} from \"./DataObjectTypeDefs\";\n\nexport class DefaultValueGenerator implements FieldValueGenerator{\n    private defaultValue: string;\n\n    constructor(defaultValue:string) {\n        this.defaultValue = defaultValue;\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        if (isCreate) {\n            result = this.defaultValue;\n        }\n        return result;\n    }\n\n}","import {DataObjectDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {BasicObjectDefinitionFactory, FIELD_ID} from \"./BasicObjectDefinitionFactory\";\nimport debug from \"debug\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\n\nconst logger = debug('object-definition-registry');\n\nexport class ObjectDefinitionRegistry {\n    private static _instance: ObjectDefinitionRegistry;\n    protected definitions: DataObjectDefinition[];\n\n    private constructor() {\n        this.definitions = [];\n    }\n\n    public static getInstance(): ObjectDefinitionRegistry {\n        if (!(ObjectDefinitionRegistry._instance)) {\n            ObjectDefinitionRegistry._instance = new ObjectDefinitionRegistry();\n        }\n        return ObjectDefinitionRegistry._instance;\n    }\n\n    public findDefinition(id: string): DataObjectDefinition | null {\n        let result: DataObjectDefinition | null = null;\n        const index = this.definitions.findIndex((definition) => definition.id === id);\n        if (index >= 0) {\n            result = this.definitions[index];\n        }\n        return result;\n    }\n\n    public addDefinition(id: string, displayName: string, hasDataId: boolean, dataIdIsUUID: boolean, createModifierFields: boolean = true, idFieldName: string = FIELD_ID): DataObjectDefinition {\n        logger(`Adding definition for ${id} with name ${displayName}`);\n        let result: DataObjectDefinition | null = this.findDefinition(id);\n        if (result) {\n            return result;\n        } else {\n            let definition = BasicObjectDefinitionFactory.getInstance().createBasicObjectDefinition(id, displayName, hasDataId, dataIdIsUUID, createModifierFields, idFieldName);\n            this.definitions.push(definition);\n            return definition;\n        }\n    }\n\n    public createInstanceFromDef(definition: DataObjectDefinition): any {\n        logger(`Creating instance for definition ${definition.displayName}`);\n        let result: any = {};\n        const fieldOps = new BasicFieldOperations();\n\n        definition.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n\n                switch (fieldDef.type) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        break;\n                    }\n                    default: {\n                        fieldValue = fieldOps.formatValue(fieldDef, fieldValue);\n                        break;\n                    }\n                }\n\n                logger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                result[fieldDef.id] = fieldValue;\n            }\n            if (fieldDef.type === FieldType.collection) {\n                result[fieldDef.id] = [];\n            }\n        });\n        return result;\n    }\n\n\n    public createInstance(id: string): any {\n        logger(`Creating instance for definition ${id}`);\n        let result: any = {};\n\n        const definition: DataObjectDefinition | null = this.findDefinition(id);\n\n        if (definition) {\n            result = this.createInstanceFromDef(definition);\n        }\n        return result;\n    }\n}","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import {RequestCallBackFunction} from \"./Types\";\nimport debug from \"debug\";\n\nconst logger = debug('callback-registry');\n\ntype CallBack = {\n    id: string,\n    fn: RequestCallBackFunction\n}\n\nexport class CallbackRegistry {\n    private static _instance: CallbackRegistry;\n    private callbacks: CallBack[] = [];\n\n    private constructor() {\n    }\n\n    public static getInstance(): CallbackRegistry {\n        if (!(CallbackRegistry._instance)) {\n            CallbackRegistry._instance = new CallbackRegistry();\n        }\n        return CallbackRegistry._instance;\n    }\n\n    public addRegisterCallback(id: string, fn: RequestCallBackFunction): void {\n        logger(`Adding callback function with id ${id}`);\n        this.callbacks.push({id: id, fn: fn});\n    }\n\n    public getCallbackById(id: string): RequestCallBackFunction {\n        const defaultFn = function (data: any, status: number, associatedStateName: string): void {\n            console.error(`Callback received with status ${status}, state name ${associatedStateName} where the callback was never registered`);\n        }\n\n        const foundIndex = this.callbacks.findIndex((callback) => callback.id === id);\n        if (foundIndex >= 0) {\n            return this.callbacks[foundIndex].fn;\n        }\n        return defaultFn;\n    }\n}","import apiUtil from './ApiUtil';\nimport {v4} from 'uuid';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestType} from \"./Types\";\n\nimport debug from 'debug';\nimport {CallbackRegistry} from \"./CallbackRegistry\";\nimport {OfflineManager} from \"./OfflineManager\";\n\nconst logger = debug('api-ts');\n\nclass DownloadManager {\n    private static _instance: DownloadManager;\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n\n    public processOfflineItems() {\n        logger(`Checking for offline items`);\n        OfflineManager.getInstance().processQueuedResults();\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callbackId: string, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callbackId: callbackId,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callbackId: string, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callbackId: callbackId,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public async addApiRequest(jsonRequest: jsonRequest, isPriority = false, wasOffline: boolean = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = v4();\n        logger(`Adding Queue Request ${requestId}`);\n        logger(jsonRequest);\n\n        // are we currently offline?\n        if (OfflineManager.getInstance().areWeOffline()) {\n            logger(`We are offline, queueing request for when server back online.`);\n            OfflineManager.getInstance().addOfflineRequest(jsonRequest);\n            // let the callback function know, with a custom code to let the receiver know there was a problem\n            CallbackRegistry.getInstance().getCallbackById(jsonRequest.callbackId)(jsonRequest.params, 500, jsonRequest.associatedStateName, false);\n            return;\n        }\n\n        // we are online (hopefully), continue for now, we will catch offline errors later\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n                wasOffline: wasOffline\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n                wasOffline: wasOffline\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            logger(`processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        logger(`received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            logger(queueItem);\n\n            // are we offline http status of 500\n            if (httpStatus === 500) {\n                logger(`queue item ${queueItem.requestId} - server offline, queueing for later`);\n                OfflineManager.getInstance().addOfflineRequest(queueItem.originalRequest);\n                // let the callback function know, with a custom code to let the receiver know there was a problem\n                CallbackRegistry.getInstance().getCallbackById(queueItem.originalRequest.callbackId)(queueItem.originalRequest.params, httpStatus, queueItem.originalRequest.associatedStateName, queueItem.wasOffline);\n            } else {\n                logger(`finished for queue item ${queueItem.requestId} with possible offline id of ${queueItem.originalRequest._id}`);\n                // let the callback function know\n                CallbackRegistry.getInstance().getCallbackById(queueItem.originalRequest.callbackId)(jsonData, httpStatus, queueItem.originalRequest.associatedStateName, queueItem.wasOffline);\n            }\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        logger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        logger(item);\n        switch (item.originalRequest.type) {\n            case RequestType.POST: {\n                apiUtil.apiFetchJSONWithPost(item);\n                break;\n            }\n            case RequestType.GET: {\n                apiUtil.apiFetchJSONWithGet(item);\n                break;\n            }\n            case RequestType.DELETE: {\n                apiUtil.apiFetchJSONWithDelete(item);\n                break;\n            }\n            case RequestType.PUT: {\n                apiUtil.apiFetchJSONWithPut(item);\n                break;\n            }\n        }\n    }\n}\n\nexport default DownloadManager;\n","import {jsonRequest} from \"./Types\";\nimport {Poller} from \"./Poller\";\nimport IndexedDBStateManager from \"../state/IndexedDBStateManager\";\nimport {v4} from \"uuid\";\nimport DownloadManager from \"./DownloadManager\";\nimport {isSameMongo} from \"../util/EqualityFunctions\";\nimport NotificationManager, {NotificationType} from \"../notification/NotificationManager\";\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport AsynchronousStateManager from \"../state/AsynchronousStateManager\";\nimport debug from \"debug\";\n\nconst logger = debug('offline-manager');\n\nexport class OfflineManager implements StateChangeListener {\n    private static _instance: OfflineManager;\n    private static DB_NAME = 'offline.manager.db';\n    private static OBJECT_STORE = 'offline.manager.db.requests';\n    private persistence: AsynchronousStateManager;\n\n    constructor() {\n        this.serverBackOnline = this.serverBackOnline.bind(this);\n        const indexedDB = new IndexedDBStateManager();\n        indexedDB.initialise(OfflineManager.DB_NAME, [{name: OfflineManager.OBJECT_STORE, keyField: '_id'}]);\n        this.persistence = indexedDB;\n        this.persistence.addChangeListenerForName(OfflineManager.OBJECT_STORE, this);\n    }\n\n    public static getInstance(): OfflineManager {\n        if (!(OfflineManager._instance)) {\n            OfflineManager._instance = new OfflineManager();\n        }\n        return OfflineManager._instance;\n    }\n\n    public processQueuedResults() {\n        // find any requests in the persistence\n        this.persistence.getStateByName(OfflineManager.OBJECT_STORE);\n    }\n\n    public serverBackOnline() {\n        NotificationManager.getInstance().show('Server', 'Server is back online.');\n        this.processQueuedResults();\n    }\n\n    public areWeOffline(): boolean {\n        return Poller.getInstance().isPolling();\n    }\n\n    public addOfflineRequest(jsonRequest: jsonRequest) {\n        if (!Poller.getInstance().isPolling()) {\n            Poller.getInstance().startPolling(this.serverBackOnline);\n            NotificationManager.getInstance().show('Server', 'Server is offline, queueing local changes for when server is available', NotificationType.warning);\n        }\n        // save the request with an id\n        jsonRequest._id = v4();\n        logger('Adding offline request');\n        logger(jsonRequest);\n\n        this.persistence.addNewItemToState(OfflineManager.OBJECT_STORE, jsonRequest, false);\n    }\n\n    getListenerName(): string {\n        return \"Offline manager\";\n    }\n\n    stateChanged(managerName: string, name: string, offlineResults: any): void {\n        if (offlineResults && offlineResults.length > 0) {\n            NotificationManager.getInstance().show('Queued Changes', `There are ${offlineResults.length} queued changes, sending to server.`, NotificationType.warning);\n            offlineResults.forEach((request: jsonRequest) => {\n                this.persistence.removeItemFromState(OfflineManager.OBJECT_STORE, request, isSameMongo, false);\n                logger(`Processing offline request with priority and from offline`);\n                logger(request);\n                DownloadManager.getInstance().addApiRequest(request, true, true);\n            });\n        }\n        this.persistence.forceResetForGet(OfflineManager.OBJECT_STORE);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n\n}","import debug from \"debug\";\n\nconst logger = debug('poller');\n\nexport type serverAvailable = () => void;\n\nexport class Poller {\n    private static _instance: Poller;\n    private static INTERVAL_DEFAULT = 10000; // 30 seconds\n    private static URL_CALL = '/ping';\n    private interval: any | null = null;\n    private isPollingBool: boolean = false;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Poller {\n        if (!(Poller._instance)) {\n            Poller._instance = new Poller();\n        }\n        return Poller._instance;\n    }\n\n    startPolling(callback: serverAvailable, delay: number = Poller.INTERVAL_DEFAULT): void {\n        this.isPollingBool = true;\n        this.interval = setInterval(() => {\n            logger(`Checking for server availability`)\n            fetch(Poller.URL_CALL, {method: 'GET'}).then((response) => {\n                logger(`Response code was ${response.status} - server is now available`);\n                this.stopPolling();\n                callback();\n            }).catch((error) => {\n                logger(error);\n            });\n        }, delay);\n    }\n\n    isPolling(): boolean {\n        return this.isPollingBool;\n    }\n\n    stopPolling() {\n        if (this.interval) clearInterval(this.interval);\n        this.interval = null;\n        this.isPollingBool = false;\n    }\n\n\n}","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callbackId: string,\n    associatedStateName: string,\n    _id?: string\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType,\n    wasOffline: boolean\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string, wasOffline?: boolean) => void;","import Notification from './Notification';\nimport {NotificationManager, NotificationType} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: NotificationType, duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case NotificationType.info: {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case NotificationType.warning: {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case NotificationType.message: {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case NotificationType.priority: {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager, NotificationType} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: NotificationType, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport enum NotificationType {\n    info,\n    warning,\n    message,\n    priority\n}\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: NotificationType = NotificationType.info, duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nexport default NotificationManager;\n","import debug from \"debug\";\n\nconst logger = debug('security-manager');\n\nexport class SecurityManager {\n    private static _instance: SecurityManager;\n    private hash: string | null = null;\n    private logoutEl: HTMLElement | null = null;\n\n    private constructor() {\n    }\n\n    public static getInstance(): SecurityManager {\n        if (!(SecurityManager._instance)) {\n            SecurityManager._instance = new SecurityManager();\n        }\n        return SecurityManager._instance;\n    }\n\n    public onDocumentLoaded(logoutElementId: string) {\n        this.logoutEl = document.getElementById(logoutElementId);\n\n        // find the secret hash for the current user (if any)\n        const username = this.getLoggedInUsername();\n        if (username && username.trim().length > 0) {\n            logger(`found user ${username}`);\n            this.hash = localStorage.getItem(username);\n            if (this.hash) {\n                sessionStorage.setItem(username, this.hash);\n            } else {\n                this.hash = sessionStorage.getItem(username);\n            }\n            localStorage.removeItem(username);\n            logger(`found user ${username} hash ${this.hash} - removed from local storage`);\n        }\n\n        if (this.logoutEl) {\n            this.logoutEl.addEventListener('click', (event) => {\n                localStorage.removeItem(username);\n                sessionStorage.removeItem(username);\n            });\n        }\n    }\n\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        logger(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        logger(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n\n    public encryptString(value: string): string {\n        let result = value;\n        if (this.hash) {\n            // @ts-ignore\n            result = CryptoJS.AES.encrypt(value, this.hash).toString();\n        }\n        return result;\n    }\n\n    public decryptString(value: string): string {\n        let result = value;\n        if (this.hash) {\n            // @ts-ignore\n            result = CryptoJS.AES.decrypt(value, this.hash).toString(CryptoJS.enc.Utf8);\n        }\n        return result;\n    }\n\n    public encryptObject(dataObj: any): string {\n        return this.encryptString(JSON.stringify(dataObj));\n    }\n\n    public decryptObject(value: string): any {\n        return JSON.parse(this.decryptString(value));\n    }\n}","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n\n    protected constructor(managerName: string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: stateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: stateValue): void;\n\n    public abstract _getState(name: string): stateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item, testForEqualityFunction);\n        // remove the item from the state\n        smLogger(`State Manager: Found item - removing, is persisted ${isPersisted}`);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item, testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {StateManager, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private static _instance: AggregateStateManager;\n    private stateManagers: managerWithFilters[];\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","import {stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name} is persisted ${isPersisted}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n    getListenerName(): string {\n        return \"Async Manager\";\n    }\n\n}","import debug from 'debug';\nimport {IDBPDatabase, IDBPObjectStore, IDBPTransaction, openDB} from \"idb\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateEventType, stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nconst logger = debug('indexeddb-ts');\n\nexport type collection = {\n    name: string,\n    keyField: string\n};\n\nclass IndexedDBStateManager implements AsynchronousStateManager {\n    private static instance: IndexedDBStateManager;\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n    protected dbName: string;\n    protected collections: collection[];\n\n    public constructor() {\n        this.dbName = 'default';\n        this.delegate = new StateChangedDelegate('indexeddb');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n        this.collections = [];\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n\n    }\n\n    public static getInstance(): IndexedDBStateManager {\n        if (!IndexedDBStateManager.instance) {\n            IndexedDBStateManager.instance = new IndexedDBStateManager();\n        }\n        return IndexedDBStateManager.instance;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public async initialise(dbName: string, collections: collection[]) {\n        logger(`opening database for ${dbName} with collections`);\n        logger(collections);\n        this.dbName = dbName;\n        this.collections = collections;\n\n        let runsComplete: boolean[] = [];\n        this.collections.forEach((collection) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n\n\n        await openDB(dbName, 1, {\n            upgrade(db, oldVersion, newVersion, transaction) {\n                collections.forEach((collection) => {\n                    logger(`creating collection for ${collection.name} with key ${collection.keyField}`)\n                    db.createObjectStore(collection.name, {keyPath: collection.keyField, autoIncrement: false});\n                });\n            },\n            blocked() {\n                // …\n            },\n            blocking() {\n                // …\n            },\n            terminated() {\n                // …\n            },\n        });\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n    }\n\n    public _getState(name: string): stateValue {\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            logger(`getting state ${name}`);\n            this.getWithCollectionKey(name, this.getKeyFieldForKey(name));\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n    } // should be present with initialise\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let fn = async () => {\n            logger(`replacing item in storage ${state.name}`);\n            logger(state.value);\n            await this.removeAllItemsFromCollectionKey(state.name, this.getKeyFieldForKey(state.name));\n            await this.saveWithCollectionKey(state.name, state.value, this.getKeyFieldForKey(state.name));\n        }\n        fn();\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return;\n        this.addNewItemToCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return;\n        this.removeItemFromCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return;\n        this.updateItemInCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        let fn = async () => {\n            logger(`saving state ${name}`);\n            await this.removeAllItemsFromCollectionKey(name, this.getKeyFieldForKey(name));\n            await this.saveWithCollectionKey(name, stateObj, this.getKeyFieldForKey(name));\n        }\n        fn();\n    }\n\n    public async saveWithCollectionKey(key: string, saveData: any[], keyField: string = 'id') {\n        logger(`Saving array with key ${key}`);\n        logger(saveData);\n        let db: IDBPDatabase = await openDB(this.dbName, 1,);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key], \"readwrite\");\n        transaction.oncomplete = function (ev) {\n            logger('Success');\n            logger(ev);\n        };\n        transaction.onerror = function (ev) {\n            logger('Error');\n            logger(ev);\n        };\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await this.saveItemsToCollection(objectStore, saveData, keyField);\n    }\n\n    /* add a new item to the local storage if not already there */\n    public async addNewItemToCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            logger(`Adding with key ${key}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).add(item);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            this.callbackForAddItem(item, key);\n        }\n    }\n\n    public async removeItemFromCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            logger(`Removing with key ${key} item ${item[keyField]}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).delete(item[keyField]);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            await transaction.done;\n            this.callbackForRemoveItem(item, key);\n\n        }\n    }\n\n    public async updateItemInCollection(key: string, item: any, keyField: string = 'id') {\n        if (item) {\n            logger(`Updating item in storage ${key}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).put(item);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            // @ts-ignore\n            await transaction.done;\n            this.callbackForUpdateItem(item, key);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        logger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        logger(item);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n        this._replaceNamedStateInStorage({name: name, value: stateObjectForName});\n        if (informListeners) this.delegate.informChangeListenersForStateWithName(name, stateObjectForName, stateEventType.StateChanged, null);\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    public async getWithCollectionKey(key: string, keyField: string = 'id') {\n        let savedResults: any[] = [];\n        logger(`Loading with key ${key}`);\n        let db: IDBPDatabase = await openDB(this.dbName, 1);\n        await this.checkForObjectStore(db, key, keyField);\n\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key]);\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        let cursor: IDBPCursor = await objectStore.openCursor();\n\n        while (cursor) {\n            // @ts-ignore\n            savedResults.push(cursor.value);\n            // @ts-ignore\n            cursor = await cursor.continue();\n        }\n\n        logger(savedResults);\n        this.callbackForGetItems(savedResults, key);\n\n    }\n\n    getConfiguredStateNames(): string[] {\n        let result: string[] = [];\n        this.collections.forEach((collection) => {\n            result.push(collection.name);\n        })\n        return result;\n    }\n\n    protected getKeyFieldForKey(key: string): string {\n        let result = '_id';\n        const foundIndex = this.collections.findIndex((collection) => collection.name === key);\n        if (foundIndex >= 0) {\n            result = this.collections[foundIndex].keyField;\n        }\n        return result;\n    }\n\n    protected async checkForObjectStore(db: IDBPDatabase, key: string, keyField: string) {\n        logger(`Checking for collection ${key}`);\n        if (!db.objectStoreNames.contains(key)) {\n            // @ts-ignore\n            logger(`Checking for collection ${key} - NOT found, creating`);\n            await db.createObjectStore(key, {keyPath: keyField, autoIncrement: false});\n        }\n    }\n\n    protected async saveItemsToCollection(objectStore: IDBPObjectStore, saveData: any[], keyField: string = 'id') {\n        logger(`Saving items to collection`);\n        saveData.forEach((data) => {\n            // @ts-ignore\n            objectStore.add(data);\n        });\n    }\n\n    protected async removeAllItemsFromCollectionKey(key: string, keyField: string = 'id') {\n        logger(`Clearing collection ${key}`);\n        let db: IDBPDatabase = await openDB(this.dbName, 1,);\n        await this.checkForObjectStore(db, key, keyField);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key], \"readwrite\");\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await objectStore.clear();\n    }\n\n    protected async callbackForRemoveItem(data: any, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName}  - not forwarded`);\n        logger(data);\n    }\n\n    protected async callbackForUpdateItem(data: any, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName}  - not forwarded`);\n        logger(data);\n    }\n\n    protected callbackForGetItems(data: any, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} - FORWARDING`);\n        logger(data);\n        this.setCompletedRun(associatedStateName);\n        this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged, null);\n    }\n\n    protected async callbackForAddItem(data: any, associatedStateName: string) {\n        logger(`callback for add item for state ${associatedStateName}  - FORWARDING`);\n        logger(data);\n        this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n    }\n\n\n}\n\nexport default IndexedDBStateManager;","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: stateValue[];\n\n    public constructor() {\n        super('memory');\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public static getInstance() {\n        if (!(MemoryBufferStateManager._instance)) {\n            MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n        }\n        return MemoryBufferStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: stateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): stateValue {\n        // @ts-ignore\n        let state: stateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport DownloadManager from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {CallbackRegistry} from \"../network/CallbackRegistry\";\n\n\nconst logger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean,\n    idField?: string\n\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n    private static FUNCTION_ID_ADD_ITEM = 'rest.api.state.manager.add.item';\n    private static FUNCTION_ID_REMOVE_ITEM = 'rest.api.state.manager.remove.item';\n    private static FUNCTION_ID_UPDATE_ITEM = 'rest.api.state.manager.update.item';\n    private static FUNCTION_ID_GET_ITEMS = 'rest.api.state.manager.get.items';\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_ADD_ITEM, this.callbackForAddItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_REMOVE_ITEM, this.callbackForRemoveItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_UPDATE_ITEM, this.callbackForUpdateItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_GET_ITEMS, this.callbackForGetItems);\n\n    }\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        logger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callbackId: RESTApiStateManager.FUNCTION_ID_GET_ITEMS,\n                    associatedStateName: name\n                };\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                logger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        logger(`Adding item to ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callbackId: RESTApiStateManager.FUNCTION_ID_ADD_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        logger(`Removing item from ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        let identifier = stateObj.id;\n        if (config.idField) {\n            identifier = stateObj[config.idField];\n        }\n\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: identifier\n                },\n                callbackId: RESTApiStateManager.FUNCTION_ID_REMOVE_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        logger(`Updating item in ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callbackId: RESTApiStateManager.FUNCTION_ID_UPDATE_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        logger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        logger(item);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string, wasOffline?: boolean) {\n        logger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            if (!wasOffline) {\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n            } else {\n                logger('Item was added offline, update the current data');\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemUpdated, null);\n            }\n\n        }\n        // did the call fail? (server loss)\n        if (status === 500) {\n            logger(`Item adding - offline, but will be queued later`);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.forEach((listener) => {\n                smLogger(`State Manager: Found state listener of ${name} with name ${listener.getListenerName()} - informing`);\n                try {\n                    switch (eventType) {\n                        case (stateEventType.StateChanged): {\n                            listener.stateChanged(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemAdded): {\n                            listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemUpdated): {\n                            listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemDeleted): {\n                            listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                    }\n                } catch (err) {\n                    console.log(err);\n                }\n\n            });\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()} with index ${foundIndex}`);\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: stateValue): void;\n\n    _getState(name: string): stateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: stateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n}","export type Attribute = {\n    name: string,\n    value: string\n}\n\nexport type ModifierClasses = {\n    normal: string,\n    inactive: string,\n    active: string,\n    warning: string\n}\n\nexport type IconClasses = {\n    normal: string,\n    inactive?: string,\n    active?: string,\n    warning?: string,\n}\n\nexport type BasicButtonElement = {\n    buttonClasses: string,\n    buttonText?: string,\n    iconClasses?: string,\n    attributes?: Attribute[]\n\n}\n\nexport type BasicElement = {\n    elementType: string,\n    elementAttributes?: Attribute[],\n    elementClasses: string,\n    innerHTML?: string\n}\n\nexport const DRAGGABLE_KEY_ID: string = 'text/plain';\nexport const DRAGGABLE_TYPE: string = 'draggedType';\nexport const DRAGGABLE_FROM: string = 'draggedFrom';\n\nexport type Draggable = {\n    type: string,\n    from: string\n}\n\nexport type Droppable = {\n    acceptTypes: string[];\n    acceptFrom?: string[];\n}\n\nexport type getIcons = (name: string, item: any) => string[];\n\nexport type ContentDetail = {\n    containerClasses: string,\n    textElementType: string,\n    textElementClasses: string,\n    select: boolean,\n    quickDelete?: boolean,\n    icons?: getIcons,\n    badge?: BasicElement,\n    delete?: BasicButtonElement,\n    drag?: Draggable,\n    background?: BasicElement,\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME: string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name: string,\n    buttonClasses: string,\n    buttonText?: string,\n    iconClasses: string,\n    attributes?: Attribute[]\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport enum KeyType {\n    number,\n    string,\n    boolean,\n    collection\n}\n\nexport type ViewDOMConfig = {\n    resultsContainerId: string,\n    dataSourceId: string,\n    drop?: Droppable\n}\n\nexport type CollectionViewDOMConfig = {\n    viewConfig: ViewDOMConfig,\n    resultsElementType: string,\n    resultsElementAttributes?: [Attribute],\n    resultsClasses: string,\n    keyId: string,\n    keyType: KeyType,\n    modifiers?: ModifierClasses,\n    icons?: IconClasses,\n    detail: ContentDetail,\n    extraActions?: ExtraAction[],\n}\n\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\n\nexport type SidebarPrefs = {\n    id: string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId: string\n}\n\nexport type ViewPrefs = {\n    sidebar?: SidebarPrefs\n}\n\nexport enum RowPosition {\n    first,\n    last\n}\n\nexport type CarouselDOMConfig = {\n    itemsPerRow: {\n        small: number,\n        medium: number,\n        large: number,\n        xlarge: number,\n    },\n    rowContainer: BasicElement,\n    activeRow: BasicElement,\n    activeRowPosition: RowPosition,\n    row: BasicElement,\n    multipleItemsPerRowContainer?: BasicElement,\n    actionContainer: BasicElement,\n    collectionConfig: CollectionViewDOMConfig\n}\n\nexport const SCREEN_WIDTH_LARGE = 992;\nexport const SCREEN_WIDTH_MEDIUM = 769;\nexport const SCREEN_WIDTH_SMALL = 415;\n\n\n","export enum AlertType {\n    cancelled,\n    confirmed\n}\n\nexport type AlertEvent = {\n    outcome: AlertType,\n    context?: any\n}\n\nexport interface AlertListener {\n    completed(event: AlertEvent): void;\n}","import {AlertListener, AlertType} from \"./AlertListener\";\nimport debug from 'debug';\n\nconst ALERT_MODAL_ID = 'alert';\nconst ALERT_TITLE = 'alert-title';\nconst ALERT_CONTENT = 'alert-content';\nconst ALERT_CANCEL = 'alert-cancel';\nconst ALERT_CONFRIM = 'alert-confirm';\n\nconst ALERT_hideClass = \"d-none\";\nconst ALERT_showClass = \"d-block\";\n\nconst logger = debug('alert');\n\nexport class AlertManager {\n    private static _instance: AlertManager;\n    private alertDiv: HTMLDivElement;\n    private alertTitle: HTMLHeadingElement;\n    private alertContent: HTMLParagraphElement;\n    private cancelButton: HTMLButtonElement;\n    private confirmButton: HTMLButtonElement;\n\n    private constructor() {\n        this.alertDiv = <HTMLDivElement>document.getElementById(ALERT_MODAL_ID);\n        this.alertTitle = <HTMLHeadingElement>document.getElementById(ALERT_TITLE);\n        this.alertContent = <HTMLParagraphElement>document.getElementById(ALERT_CONTENT);\n        this.cancelButton = <HTMLButtonElement>document.getElementById(ALERT_CANCEL);\n        this.confirmButton = <HTMLButtonElement>document.getElementById(ALERT_CONFRIM);\n    }\n\n    public static getInstance(): AlertManager {\n        if (!(AlertManager._instance)) {\n            AlertManager._instance = new AlertManager();\n        }\n        return AlertManager._instance;\n    }\n\n    public startAlert(listener: AlertListener, title: string, content: string, context?: any) {\n        this.alertTitle.innerHTML = title;\n        this.alertContent.innerHTML = content;\n        // @ts-ignore\n        this.alertDiv.classList.remove(ALERT_hideClass);\n        // @ts-ignore\n        this.alertDiv.classList.add(ALERT_showClass);\n\n        const confirmHandler = (event: MouseEvent) => {\n            logger(`Handling confirm event from alert`);\n            listener.completed({outcome: AlertType.confirmed, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click', confirmHandler);\n        }\n\n        const cancelHandler = (event: MouseEvent) => {\n            logger(`Handling cancel event from alert`);\n            listener.completed({outcome: AlertType.cancelled, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click', cancelHandler);\n        }\n\n        this.confirmButton.addEventListener('click', confirmHandler);\n        this.cancelButton.addEventListener('click', cancelHandler);\n    }\n\n}","import {View} from \"../view/interface/View\";\nimport {BasicElement, EXTRA_ACTION_ATTRIBUTE_NAME} from \"../ConfigurationTypes\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport debug from 'debug';\nimport {AbstractCollectionView} from \"../view/implementation/AbstractCollectionView\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst logger = debug('context-helper');\n\nexport type getIdentifier = (type: string, item: any) => string;\nexport type getDescription = (type: string, item: any) => string;\n\nexport type actionHandler = (event: MouseEvent) => void;\nexport type hasActionPermission = (actionName: string, type: string, item: any) => boolean;\n\nexport type ContextTypeAction = {\n    actionName: string,\n    displayName: string,\n    elementDefinition: BasicElement,\n    iconClasses?: string,\n    handler: actionHandler,\n    hasPermission?: hasActionPermission\n}\n\nexport type ContextDefinitionType = {\n    internalType: string,\n    displayName: string,\n    identifier: getIdentifier,\n    description: getDescription,\n    actions: ContextTypeAction[]\n}\n\nexport type ContextDefinition = {\n    source: string,\n    view?: View,\n    defaultType: ContextDefinitionType,\n    extraTypes?: ContextDefinitionType[]\n}\n\nexport type ContextDetails = {\n    source: string,\n    internalType: string,\n    displayName: string,\n    identifier: string,\n    description: string\n}\n\nexport enum TogglePlacement {\n    top,\n    bottom,\n    right,\n    left\n}\n\nconst defaultIdentifier = function (name: string, item: any) {\n    return '';\n}\n\n\nexport class ContextualInformationHelper {\n    private static _instance: ContextualInformationHelper;\n\n    private static SOURCE: string = 'context-source';\n    private static TYPE: string = 'context-type';\n    private static DISPLAYNAME: string = 'context-display-name';\n    private static IDENTIFIER: string = 'context-id';\n    private static DESCRIPTION: string = 'title';\n\n    private static BOOTSTRAP_TOGGLE = 'data-toggle';\n    private static BOOTSTRAP_PLACEMENT = 'data-placement'\n    private static BOOTSTRAP_TOOLTIP_VALUE = 'tooltip';\n    private static BOOTSTRAP_POPOVER_VALUE = 'popover';\n\n    private static BOOTSTRAP_TOGGLE_HTML = 'data-html';\n    private static BOOTSTRAP_TOGGLE_HTML_VALUE = 'true';\n\n\n    private static BOOTSTRAP_PLACEMENT_TOP = 'top'\n    private static BOOTSTRAP_PLACEMENT_BOTTOM = 'bottom'\n    private static BOOTSTRAP_PLACEMENT_RIGHT = 'right'\n    private static BOOTSTRAP_PLACEMENT_LEFT = 'left'\n    private registry: ContextDefinition[] = [];\n    private menuDivEl: HTMLDivElement | null = null;\n    private menuContentEl: HTMLUListElement | null = null;\n\n    private constructor() {\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        this.hideContextMenu = this.hideContextMenu.bind(this);\n    }\n\n    public static getInstance(): ContextualInformationHelper {\n        if (!(ContextualInformationHelper._instance)) {\n            ContextualInformationHelper._instance = new ContextualInformationHelper();\n        }\n        return ContextualInformationHelper._instance;\n    }\n\n    public onDocumentLoaded() {\n        // @ts-ignore\n        document.addEventListener('click', this.hideContextMenu);\n\n        this.menuDivEl = <HTMLDivElement | null>document.getElementById('contextmenu');\n        this.menuContentEl = <HTMLUListElement | null>document.getElementById('contextMenuItems');\n    }\n\n    public addContextFromView(view: View, internalType: string, displayName: string): ContextDefinition {\n        let context: ContextDefinition = this.ensureInRegistry(view.getName());\n        context.view = view;\n        context.defaultType.internalType = internalType;\n        context.defaultType.displayName = displayName;\n        context.defaultType.identifier = view.getItemId;\n        context.defaultType.description = view.getItemDescription;\n        return context;\n    }\n\n    public addContextToElement(source: string, type: string, item: any, element: HTMLElement, addTooltip: boolean = false, placement: TogglePlacement = TogglePlacement.bottom): void {\n        const context: ContextDefinition = this.ensureInRegistry(source);\n        element.setAttribute(ContextualInformationHelper.SOURCE, context.source);\n        element.setAttribute(ContextualInformationHelper.TYPE, context.defaultType.internalType);\n        element.setAttribute(ContextualInformationHelper.DISPLAYNAME, context.defaultType.displayName);\n        element.setAttribute(ContextualInformationHelper.IDENTIFIER, context.defaultType.identifier(type, item));\n        element.setAttribute(ContextualInformationHelper.DESCRIPTION, context.defaultType.description(type, item));\n        if (addTooltip) {\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE, ContextualInformationHelper.BOOTSTRAP_TOOLTIP_VALUE);\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML, ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML_VALUE);\n            switch (placement) {\n                case TogglePlacement.bottom: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_BOTTOM);\n                    break;\n                }\n                case TogglePlacement.top: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_TOP);\n                    break;\n                }\n                case TogglePlacement.left: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_LEFT);\n                    break;\n                }\n                case TogglePlacement.right: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_RIGHT);\n                    break;\n                }\n            }\n            // @ts-ignore\n            $('[data-toggle=\"tooltip\"]').tooltip({html: true});\n        }\n    }\n\n    public findContextFromEvent(event: Event): ContextDetails | null {\n        let result: ContextDetails | null = null;\n\n        if (event.target) {\n            let target = event.target;\n            // @ts-ignore\n            result = this.findContextFromElement(event.target);\n        }\n        return result;\n    }\n\n    public addActionToContext(context: ContextDefinition, actionName: string, displayName: string, handler: actionHandler, icon?: string, permissionCheck?: hasActionPermission) {\n        let action: ContextTypeAction = {\n            actionName: actionName,\n            displayName: displayName,\n            handler: handler,\n            hasPermission: permissionCheck,\n            elementDefinition: {\n                elementType: 'a',\n                elementAttributes: [{name: 'href', value: '#'}],\n                elementClasses: 'list-group-item list-group-item-action bg-dark text-white',\n            },\n            iconClasses: icon\n        };\n        this.addContextActionToContext(context, action);\n    }\n\n    public handleContextMenu(event: MouseEvent): any {\n        logger('Right click')\n        logger(event.target);\n        // are we over a context sensitive item?\n        // find a context if possible\n        // @ts-ignore\n        const context: ContextDetails | null = this.findContextFromElement(event.target);\n        logger(context);\n        if (context && this.buildContextMenu(context)) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.showContextMenu(event);\n            return false;\n        }\n\n        // otherwise let the default behaviour happen\n        return true;\n    }\n\n    private ensureInRegistry(source: string): ContextDefinition {\n        let result: ContextDefinition;\n        let foundIndex = this.registry.findIndex((context) => context.source === source);\n        if (foundIndex < 0) {\n            result = {\n                source: source,\n                defaultType: {\n                    internalType: '',\n                    displayName: '',\n                    identifier: defaultIdentifier,\n                    description: defaultIdentifier,\n                    actions: []\n                }\n            }\n            this.registry.push(result);\n        } else {\n            result = this.registry[foundIndex];\n        }\n        return result;\n    }\n\n    private findContextFromElement(element: HTMLElement): ContextDetails | null {\n        // do we have context information in this element?\n        let result: ContextDetails | null = null;\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n\n            // @ts-ignore\n            result = {source: source, internalType: type, displayName: name, identifier: id, description: desc};\n        } else {\n            const parent = element.parentElement;\n            if (parent) {\n                result = this.findContextFromElement(parent);\n            }\n        }\n        return result;\n    }\n\n    private findAllContextsFromElement(element: HTMLElement, contexts: ContextDetails[]): void {\n        // do we have context information in this element?\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n            // @ts-ignore\n            if (type && name && id && desc) {\n                let result: ContextDetails = {\n                    source: source,\n                    internalType: type,\n                    displayName: name,\n                    identifier: id,\n                    description: desc\n                };\n                contexts.push(result);\n            }\n        }\n        const parent = element.parentElement;\n        if (parent) {\n            this.findAllContextsFromElement(parent, contexts);\n        }\n    }\n\n    private addContextActionToContext(context: ContextDefinition, action: ContextTypeAction) {\n        logger(`Adding action to context ${context.source}`);\n        logger(action);\n        context.defaultType.actions.push(action);\n    }\n\n    private buildContextMenu(context: ContextDetails): boolean {\n        logger(`building context menu`);\n        let result = false;\n\n        // find the context for these details\n        const contextDef: ContextDefinition | null = this.ensureInRegistry(context.source);\n\n        let selectedItem: any | null = null;\n\n        if (contextDef && contextDef.view && (contextDef.view instanceof AbstractCollectionView)) {\n            logger(`collection view context - finding item with identifier ${context.identifier}`);\n            let collectionView = <CollectionView>(contextDef.view);\n            let compareWith = {};\n            // @ts-ignore\n            compareWith[collectionView.getCollectionUIConfig().keyId] = context.identifier;\n\n            selectedItem = collectionView.getItemInNamedCollection(context.internalType, compareWith);\n        }\n\n        logger(`found item for context menu`);\n        logger(selectedItem);\n\n        if (contextDef.defaultType.actions.length > 0) {\n            if (this.menuContentEl && this.menuContentEl) {\n                browserUtil.removeAllChildren(this.menuContentEl);\n\n                contextDef.defaultType.actions.forEach((action) => {\n                    logger('Adding action');\n                    logger(action);\n\n                    if ((selectedItem && action.hasPermission && action.hasPermission(action.actionName, contextDef.defaultType.internalType, selectedItem)) ||\n                        !(action.hasPermission)) {\n                        let itemEl = document.createElement(action.elementDefinition.elementType);\n                        if (itemEl && this.menuContentEl) {\n                            browserUtil.addAttributes(itemEl, action.elementDefinition.elementAttributes);\n                            browserUtil.addRemoveClasses(itemEl, action.elementDefinition.elementClasses);\n\n                            itemEl.setAttribute(ContextualInformationHelper.SOURCE, context.source);\n                            itemEl.setAttribute(ContextualInformationHelper.TYPE, context.internalType);\n                            itemEl.setAttribute(ContextualInformationHelper.DISPLAYNAME, context.displayName);\n                            itemEl.setAttribute(ContextualInformationHelper.IDENTIFIER, context.identifier);\n                            itemEl.setAttribute(ContextualInformationHelper.DESCRIPTION, context.description);\n                            itemEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, action.actionName);\n\n                            itemEl.addEventListener('click', (event: MouseEvent) => {\n                                this.hideContextMenu(event);\n                                action.handler(event);\n                            });\n                            itemEl.innerHTML = `${action.displayName}`;\n                            if (action.iconClasses) {\n                                itemEl.innerHTML += `&nbsp;&nbsp;<i class=\"${action.iconClasses}\"></i>`;\n                            }\n                            this.menuContentEl.appendChild(itemEl);\n                            logger('new menu element is ');\n                            logger(this.menuContentEl);\n                            result = true;\n                        }\n                    }\n\n\n                });\n            }\n        } else {\n            logger(`building context menu - no actions for ${context.source}`);\n        }\n        return result;\n    }\n\n    private hideContextMenu(event: MouseEvent): any {\n        if (this.menuDivEl) {\n            browserUtil.addRemoveClasses(this.menuDivEl, 'd-none');\n        }\n    }\n\n    private showContextMenu(event: MouseEvent) {\n        if (this.menuDivEl) {\n            logger(`Showing context menu at ${event.pageX},${event.pageY}`);\n            browserUtil.addRemoveClasses(this.menuDivEl, 'd-none', false);\n            this.menuDivEl.style.left = event.pageX + 'px';\n            this.menuDivEl.style.top = event.pageY + 'px';\n        }\n    }\n\n\n}","import {Form} from \"./Form\";\nimport {FormEvent, FormEventType, FormListener} from \"./FormListener\";\nimport {FieldListener} from \"./field/FieldListener\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {AttributeFieldMapItem, DisplayOrder, FieldUIConfig, FormUIDefinition} from \"./FormUITypeDefs\";\nimport {Field} from \"./field/Field\";\n\nimport debug from 'debug';\nimport {RuleCheck, ValidationManager} from \"./validation/ValidationManager\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\nimport {ConditionResponse} from \"./validation/ValidationTypeDefs\";\nimport {v4} from \"uuid\";\n\nconst logger = debug('abstract-form');\nconst dlogger = debug('abstract-form-detail');\nconst vlogger = debug('abstract-form-detail-validation');\n\n\nexport abstract class AbstractForm implements Form, FormListener, AlertListener, FieldListener {\n    protected formListeners: FormListener[] = [];\n    protected fieldListeners: FieldListener[] = [];\n    protected currentDataObj: any;\n    protected dataObjDef: DataObjectDefinition;\n    protected containerEl: HTMLElement | null;\n    protected uiDef: FormUIDefinition | null = null;\n    protected isVisible: boolean = false;\n    protected fields: Field[] = [];\n    protected map: AttributeFieldMapItem[];\n    protected isInitialised: boolean = false;\n    protected hasChangedBoolean: boolean = false;\n    protected isDisplayOnly: boolean = false;\n    protected id: string;\n\n\n    protected constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        this.containerEl = document.getElementById(containerId);\n        if (!(this.containerEl)) throw new Error(`container ${containerId} for form ${dataObjDef.id} does not exist`);\n\n        this.map = [];\n        this.dataObjDef = dataObjDef;\n        this.currentDataObj = {};\n        this.id = v4();\n        // sub-classes need to create the form and it's fields\n\n        // listen to ourselves\n        this.addFormListener(this);\n    }\n\n    public hasChanged(): boolean {\n        return this.hasChangedBoolean;\n    }\n\n    getName(): string {\n        return this.dataObjDef.displayName;\n    }\n\n    valueChanged(formId: String, field: FieldDefinition, newValue: string | null): void {\n        this.hasChangedBoolean = true;\n        this.setUnsavedMessage();\n        logger(`Form has changed`);\n    }\n\n    failedValidation(formId: String, field: FieldDefinition, currentValue: string, message: string): void {\n        this.hasChangedBoolean = true;\n        logger(`Form has changed`);\n    }\n\n    public abstract getFormattedDataObject(): any;\n\n    public initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): void {\n        if (this.isInitialised) return;\n        this.isInitialised = true;\n        this._initialise(displayOrder, hasDeleteButton, hideModifierFields);\n    }\n\n    public addFieldListener(listener: FieldListener): void {\n        this.fieldListeners.push(listener);\n    }\n\n    public addFormListener(listener: FormListener): void {\n        this.formListeners.push(listener);\n    }\n\n    public reset(): void {\n        logger(`Resetting form`);\n        this.clearUnsavedMessage();\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n\n        // inform the listeners\n        if (this.uiDef) {\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: FormEventType.RESETTING\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.currentDataObj = {};\n        this._reset();\n        // reset all the fields\n        this.fields.forEach((field) => {\n            field.reset();\n        });\n        this.hasChangedBoolean = false;\n    }\n\n    public setIsVisible(isVisible: boolean): void {\n        logger(`Changing visibility to ${isVisible}`);\n        this.isVisible = isVisible;\n        if (this.uiDef) {\n            let eventType = FormEventType.HIDDEN;\n            if (this.isVisible) {\n                this._visible();\n                eventType = FormEventType.SHOWN;\n            } else {\n                this._hidden();\n            }\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        if (isVisible && !this.isDisplayOnly) this.checkFormValidationOnDisplay();\n        if (isVisible && this.isDisplayOnly) this.checkForVisualValidationForDisplayOnly();\n    }\n\n    public startCreateNew(): any {\n        this.clearUnsavedMessage();\n        logger(`Starting create new`);\n        this.reset();\n        this.currentDataObj = {};\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        if (this.uiDef) {\n            let eventType = FormEventType.CREATING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startCreate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n        return this.currentDataObj;\n    }\n\n    public startUpdate(objectToEdit: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting modify existing on `);\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        logger(objectToEdit);\n        this.currentDataObj = {...objectToEdit}; // take a copy\n\n        if (this.uiDef) {\n            let eventType = FormEventType.MODIFYING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startUpdate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n    }\n\n    displayOnly(objectToView: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting display only `);\n        logger(objectToView);\n        this.isDisplayOnly = true;\n        this.hasChangedBoolean = false;\n        this.currentDataObj = {...objectToView}; // take a copy\n\n        if (this.uiDef) {\n            this._displayOnly();\n        }\n        this.setReadOnly();\n    }\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        let shouldCancelChange = false;\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                if (this.hasChangedBoolean && !this.isDisplayOnly) {\n                    if (this.uiDef) {\n                        AlertManager.getInstance().startAlert(this, this.uiDef.displayName, `Lose any unsaved changes?`, FormEventType.CANCELLING);\n                    }\n                } else {\n                    if (this.uiDef) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                }\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                // user cancelled the form, will become invisible\n                this.isDisplayOnly = true;\n                this.reset(); // reset the form state\n                this.setReadOnly();\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                if (this.uiDef) {\n                    AlertManager.getInstance().startAlert(this, this.uiDef.displayName, `Are you sure you want to delete this information?`, FormEventType.DELETING);\n                }\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                // user is deleting the object, will become invisible\n                this.reset();\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                this._saveFinishedOrAborted();\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                this._saveFinishedOrAborted();\n                logger(`Form is saved with data`);\n                logger(formValues);\n                this.isDisplayOnly = false;\n                this.hasChangedBoolean = false;\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving, checking validation and storing values`);\n                this._saveIsActive();\n                if (this.uiDef) {\n                    let allFieldsValid: boolean = true;\n\n                    // user attempting to save the form, lets check the field validation\n                    this.fields.forEach((field) => {\n                        const currentValue = field.getValue();\n                        if (!field.isValid()) {\n                            vlogger(`Field ${field.getId()} is invalid`);\n                            field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n                            allFieldsValid = false;\n                        } else {\n                            // does the field fulfil any rules from the Validation manager\n                            // @ts-ignore\n                            const response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(), ConditionResponse.invalid);\n                            if (response.ruleFailed) {\n                                // @ts-ignore\n                                field.setInvalid(response.message);\n                                vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                                allFieldsValid = false;\n                            } else {\n                                this.setFieldValueToDataObject(this.currentDataObj, field, currentValue);\n                            }\n                        }\n                    });\n\n                    // is every field valid?\n                    if (!allFieldsValid) {\n                        logger(`Form is saving, checking validation - FAILED`);\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.SAVE_ABORTED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                        shouldCancelChange = true;\n                    } else {\n                        logger(`formatted data object is`);\n                        const formattedDataObject = this.getFormattedDataObject();\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.SAVED\n                        }\n                        this.informFormListeners(formEvent, formattedDataObject);\n                    }\n                    break;\n                }\n            }\n        }\n        return shouldCancelChange;\n    }\n\n    getId(): string {\n        return this.id;\n    }\n\n    getFieldFromDataFieldId(dataFieldId: string): Field | undefined {\n        let result: Field | undefined = undefined;\n        dlogger(`Finding field for attribute ${dataFieldId} `);\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === dataFieldId);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId}`);\n            // find the field with that id\n            result = this.fields.find((field) => field.getId() === mapItem.attributeId);\n        }\n\n        return result;\n    }\n\n    completed(event: AlertEvent): void {\n        logger(`Handling alert completed`);\n        logger(event);\n        if (event.context && this.uiDef) {\n            switch (event.context) {\n                case (FormEventType.CANCELLING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    } else {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLING_ABORTED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                    break;\n                }\n                case (FormEventType.DELETING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.DELETED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    } else {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.DELETE_ABORTED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                    break;\n                }\n            }\n\n        }\n    }\n\n    clearReadOnly(): void {\n        this.fields.forEach((field) => {\n            field.clearReadOnly();\n        });\n    }\n\n    setReadOnly(): void {\n        this.fields.forEach((field) => {\n            field.setReadOnly();\n        });\n    }\n\n    isDisplayingItem(dataObj: any): boolean {\n        if (this.currentDataObj) {\n            return this._isSameObjectAsDisplayed(dataObj);\n        }\n        return false;\n    }\n\n    isReadOnly(): boolean {\n        return this.isDisplayOnly;\n    }\n\n    /* methods to be implemented in the subclass */\n    protected abstract _startUpdate(): void;\n\n    protected abstract _startCreate(): void;\n\n    protected abstract _reset(): void;\n\n    protected abstract _visible(): void;\n\n    protected abstract _hidden(): void;\n\n    protected abstract _initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean): void;\n\n    protected abstract _displayOnly(): void;\n\n    protected abstract _isSameObjectAsDisplayed(dataObj: any): boolean;\n\n    protected abstract setFieldValueToDataObject(dataObj: any, field: Field, currentValue: string | null): void;\n\n    protected abstract _saveFinishedOrAborted(): void;\n\n    protected abstract _saveIsActive(): void;\n\n    protected abstract clearUnsavedMessage(): void;\n\n    protected abstract setUnsavedMessage(): void;\n\n    protected informFormListeners(formEvent: FormEvent, dataObj?: any) {\n        this.formListeners.forEach((listener) => listener.formChanged(formEvent, dataObj));\n    }\n\n    protected findFieldUiConfig(fieldDef: FieldDefinition): FieldUIConfig | null | undefined {\n        dlogger(`Finding field UI Config for field ${fieldDef.displayName}`);\n        let result: FieldUIConfig | null | undefined = null;\n        if (this.uiDef) {\n            let index = 0;\n            while (index < this.uiDef.fieldGroups.length) {\n                const fieldGroup = this.uiDef.fieldGroups[index];\n                result = fieldGroup.fields.find((uiConfig) => uiConfig.field.id === fieldDef.id);\n                if (result) {\n                    dlogger(`Finding field UI Config for field ${fieldDef.displayName} - Found`);\n                    break;\n                }\n                index++;\n            }\n        }\n        return result;\n    }\n\n    protected checkForVisualValidationForDisplayOnly() {\n        logger(`Checking display validation for display only`);\n        this.fields.forEach((field) => {\n            field.show();\n            // @ts-ignore\n            let response = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(), ConditionResponse.hide);\n            if (response.ruleFailed) {\n                // @ts-ignore\n                field.hide();\n                vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n            }\n\n        });\n    }\n\n    protected checkFormValidationOnDisplay() {\n        logger(`Checking display validation`);\n\n        this.fields.forEach((field) => {\n            field.show();\n            const currentValue = field.getValue();\n            if (!field.isValid()) {\n                logger(`Field ${field.getId()} is invalid`);\n                field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n            } else {\n                // does the field fulfil any rules from the Validation manager\n                // @ts-ignore\n                let response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(), ConditionResponse.invalid);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.setInvalid(response.message);\n                    vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                }\n                // @ts-ignore\n                response = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(), ConditionResponse.hide);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.hide();\n                    vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n                }\n            }\n        });\n\n    }\n\n\n}","import {AttributeFieldMapItem, DATA_ID_ATTRIBUTE, DisplayOrder, FieldUIConfig, UIFieldType} from \"./FormUITypeDefs\";\nimport {AbstractForm} from \"./AbstractForm\";\nimport {BootstrapFormConfigHelper} from \"../helper/BootstrapFormConfigHelper\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {Field} from \"./field/Field\";\nimport {FormElementFactory, FormFactoryResponse} from \"./factory/FormElementFactory\";\nimport debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport {TextAreaField} from \"./field/TextAreaField\";\nimport {RadioButtonGroupField} from \"./field/RadioButtonGroupField\";\nimport {SelectField} from \"./field/SelectField\";\nimport {InputField} from \"./field/InputField\";\n\nconst logger = debug('basic-form');\nconst dlogger = debug('basic-form-detail');\n\nexport class BasicFormImplementation extends AbstractForm {\n\n    protected factoryElements: FormFactoryResponse | null = null;\n\n\n    public constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        super(containerId, dataObjDef);\n    }\n\n    getFormattedDataObject(): any {\n        logger(`Getting current formatted data`);\n        let formattedResult: any = {};\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            formattedResult[fieldDef.id] = this.getFormattedFieldValue(fieldDef)\n        });\n        logger(formattedResult);\n        return formattedResult;\n    }\n\n    public clearReadOnly() {\n        super.clearReadOnly();\n        this.enableButtons();\n    }\n\n    public setReadOnly() {\n        super.setReadOnly();\n        this.disableButtons();\n    }\n\n    protected _hidden(): void {\n        if (this.factoryElements) this.containerEl?.removeChild(this.factoryElements.form);\n    }\n\n    protected setupFieldObject(fieldEl: HTMLElement, subElements: HTMLInputElement[] = []) {\n        // get the data-id field from the field element\n        const dataId: string | null = fieldEl.getAttribute(DATA_ID_ATTRIBUTE);\n        const fieldId: string | null = fieldEl.getAttribute('id');\n        dlogger(`Converting field input element ${fieldId} with data-id of ${dataId}`);\n        if (dataId && fieldId) {\n            // find the corresponding field definition\n            const index = this.dataObjDef.fields.findIndex((value) => value.id === dataId);\n            const fieldDef: FieldDefinition | undefined = this.dataObjDef.fields.find((value) => value.id === dataId);\n            if (fieldDef) {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is`);\n                logger(fieldDef);\n\n                // find the corresponding ui definition\n                const fieldUIConfig: FieldUIConfig | null | undefined = this.findFieldUiConfig(fieldDef);\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field ui config is`);\n                logger(fieldUIConfig);\n                if (fieldUIConfig) {\n                    if (this.uiDef) {\n                        let field: Field;\n                        switch (fieldUIConfig.elementType) {\n                            case UIFieldType.textarea: {\n                                field = new TextAreaField(this.id, fieldUIConfig, fieldDef, <HTMLTextAreaElement>fieldEl);\n                                break;\n                            }\n                            case UIFieldType.radioGroup: {\n                                field = new RadioButtonGroupField(this.id, fieldUIConfig, fieldDef, fieldEl, subElements);\n                                break;\n                            }\n                            case UIFieldType.select: {\n                                field = new SelectField(this.id, fieldUIConfig, fieldDef, <HTMLSelectElement>fieldEl);\n                                break;\n                            }\n                            default: {\n                                field = new InputField(this.id, fieldUIConfig, fieldDef, <HTMLInputElement>fieldEl);\n                                break;\n                            }\n                        }\n                        this.fields.push(field);\n                        field.addFieldListener(this);\n                        this.map.push({attributeId: dataId, fieldId: fieldId});\n                    }\n                }\n            } else {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is NOT FOUND`);\n\n            }\n        }\n    }\n\n    protected clearUnsavedMessage() {\n        if (this.factoryElements) this.factoryElements.unsavedMessage.innerHTML = '';\n    }\n\n    protected setUnsavedMessage() {\n        if (this.factoryElements && this.uiDef && this.uiDef.unsavedChanges.innerHTML) {\n            this.factoryElements.unsavedMessage.innerHTML = this.uiDef.unsavedChanges.innerHTML;\n        } else if (this.factoryElements) {\n            this.factoryElements.unsavedMessage.innerHTML = 'Pending changes to save';\n        }\n    }\n\n    protected _initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): void {\n        logger(`Initialising`);\n\n        // ok, so given a Data Object definition we are going to create the form ui config\n        this.uiDef = BootstrapFormConfigHelper.getInstance().generateFormConfig(this.dataObjDef, displayOrder, hasDeleteButton, hideModifierFields);\n        logger(this.uiDef);\n        // now we need to create all the form elements from the ui definition\n        this.factoryElements = FormElementFactory.getInstance().createFormElements(this, this.formListeners, this.uiDef, this.fieldListeners);\n        logger(this.factoryElements);\n        // create field elements for each field element, and the basic map\n        logger(`Converting field input elements to Field objects`);\n        this.factoryElements.fields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup', (event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field text area elements to Field objects`);\n        this.factoryElements.textFields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup', (event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field select elements to Field objects`);\n        this.factoryElements.selectFields.forEach((fieldEl) => {\n            dlogger(`key up in form ${this.getName()}`);\n        });\n\n        logger(`Converting field rbg elements to Field objects`);\n        this.factoryElements.radioButtonGroups.forEach((rbg) => {\n            this.setupFieldObject(rbg.container, rbg.radioButtons);\n        });\n\n\n        logger(`field/data map is `);\n        logger(this.map);\n        logger('fields are');\n        logger(this.fields);\n    }\n\n    protected _reset(): void {\n        this.clearUnsavedMessage();\n    }\n\n    protected validateField(fieldDef: FieldDefinition) {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        if (field) field.validate();\n    }\n\n    protected renderField(fieldDef: FieldDefinition, currentValue: string): string {\n        let result: string = currentValue;\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n\n        if (field) {\n            result = field.render(result);\n        }\n        return result;\n    }\n\n    protected _startCreate(): void {\n        this.clearUnsavedMessage();\n\n        // we have a new object, there might be some values to generate\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n                dlogger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) {\n                fieldValue = this.renderField(fieldDef, fieldValue);\n                this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            }\n\n            // run the validation to let the user know what is required\n            this.validateField(fieldDef);\n        });\n\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n\n    }\n\n    protected _startUpdate(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onModify) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, false);\n                dlogger(`Setting default modified values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            this.validateField(fieldDef);\n        });\n        // delete button make visible again\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.removeAttributes(this.factoryElements.deleteButton, ['style']);\n    }\n\n    protected _displayOnly(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n        });\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) if (this.factoryElements) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n    }\n\n    protected _visible(): void {\n        if (this.factoryElements) this.containerEl?.appendChild(this.factoryElements.form);\n    }\n\n    protected setFieldValueToDataObject(dataObj: any, field: Field, currentValue: string | null): void {\n        // find the attribute id from the map\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === field.getId());\n        if (mapItem) {\n            dlogger(`Mapped field ${mapItem.fieldId} to attribute ${mapItem.attributeId} with value ${currentValue}`);\n            this.currentDataObj[mapItem.attributeId] = currentValue;\n        } else {\n            logger(`Mapped field ${field.getId()} to attribute NOT FOUND`);\n\n        }\n    }\n\n    protected setFieldValueFromDataObject(fieldDef: FieldDefinition, currentValue: string | null): void {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        // find the field id from the map\n        if (field) {\n            if (currentValue) {\n                field.setValue(currentValue);\n            } else {\n                field.clearValue();\n            }\n        }\n    }\n\n    protected getFormattedFieldValue(fieldDef: FieldDefinition): any | null {\n        let result: any | null = null;\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === fieldDef.id);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId} with for getting formatted value`);\n            // find the field with that id\n            const field: Field | undefined = this.fields.find((field) => field.getId() === mapItem.attributeId);\n            if (field) {\n                result = field.getFormattedValue();\n            }\n        }\n        return result;\n    }\n\n    protected _isSameObjectAsDisplayed(dataObj: any): boolean {\n        // we can only be sure for objects with keys\n        let isSameObject = false;\n        dlogger(`is same object as current`);\n        dlogger(dataObj);\n        dlogger(this.currentDataObj);\n\n        this.dataObjDef.fields.every((field) => {\n            if (field.isKey) {\n                const currentObjId = this.getFieldFromDataFieldId(field.id)?.getValue();\n                const suppliedObjId = dataObj[field.id];\n                dlogger(`is same object id ${suppliedObjId} as current ${currentObjId}`);\n                if ((currentObjId && !suppliedObjId) || (currentObjId && !suppliedObjId)) {\n                    isSameObject = false;\n                }\n                if ((currentObjId && suppliedObjId) && (currentObjId == suppliedObjId)) {\n                    isSameObject = true;\n                }\n                return false;\n            }\n            return true;\n        });\n        return isSameObject;\n    }\n\n    protected enableButtons() {\n        if (this.factoryElements && this.uiDef) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.removeAttribute('disabled');\n            }\n            this.factoryElements.cancelButton.removeAttribute('disabled');\n            this.factoryElements.submitButton.removeAttribute('disabled');\n            // @ts-ignore\n            this.factoryElements.submitButton.innerHTML = this.uiDef.submitButton.buttonText;\n        }\n    }\n\n    protected disableButtons() {\n        if (this.factoryElements) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.setAttribute('disabled', 'true');\n            }\n            this.factoryElements.cancelButton.setAttribute('disabled', 'true');\n            this.factoryElements.submitButton.setAttribute('disabled', 'true');\n        }\n    }\n\n    protected _saveFinishedOrAborted(): void {\n        dlogger(`save is finished or aborted`);\n        this.enableButtons();\n        this.clearUnsavedMessage();\n    }\n\n    protected _saveIsActive(): void {\n        dlogger(`save is active`);\n        this.disableButtons();\n        if (this.factoryElements && this.uiDef) {\n            if (this.uiDef.activeSave) {\n                dlogger(`save is active ${this.uiDef.activeSave}`);\n                // @ts-ignore\n                this.factoryElements.submitButton.innerHTML = this.uiDef.activeSave + this.uiDef.submitButton.buttonText;\n            }\n        }\n    }\n\n\n}","import {Form} from \"./Form\";\n\nexport enum FormEventType {\n    SHOWN = 'shown',\n    HIDDEN = 'hidden',\n    CANCELLING = 'cancelling',\n    CANCELLING_ABORTED = 'cancelling-aborted',\n    CANCELLED = 'cancelled',\n    SAVING = 'saving',\n    SAVE_ABORTED = 'save-aborted',\n    SAVED = 'saved',\n    DELETING = 'deleting',\n    DELETE_ABORTED = 'delete-aborted',\n    DELETED = 'deleted',\n    CREATING = 'creating',\n    MODIFYING = 'modifying',\n    RESETTING = 'reset',\n}\n\n\nexport type FormEvent = {\n    target: Form,\n    formId: string,\n    eventType: FormEventType,\n}\n\nexport interface FormListener {\n    formChanged(event: FormEvent, formValues?: any): boolean; // return true to cancel the action\n}","import {Attribute, BasicButtonElement, BasicElement} from \"../ConfigurationTypes\";\nimport {FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"../../model/CommonTypes\";\n\nexport type ValidationResponse = {\n    isValid: boolean,\n    message?: string,\n    resetOnFailure: boolean\n}\n\nexport interface FieldValidator {  // is the current value valid (includes manndatory checks)\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse;\n\n    setSubElements(elements: HTMLInputElement[]): void;\n}\n\nexport interface FieldFormatter { // final value for the field on \"saving\" the form\n    formatValue(field: FieldDefinition, currentValue: string): any;\n\n    setSubElements(elements: HTMLInputElement[]): void;\n}\n\nexport interface FieldRenderer { // renders during user changes\n    renderValue(field: FieldDefinition, currentValue: string): string | null;\n\n    setSubElements(elements: HTMLInputElement[]): void;\n}\n\nexport interface FieldEditor { // allows for an \"editor\" component\n    editValue(field: FieldDefinition, currentValue: string): string;\n}\n\nexport interface ConditionalField { // a field may not be visible based on other field values\n    shouldBeVisible(field: FieldDefinition, formValues: string[]): boolean;\n}\n\nexport enum UIFieldType {\n    checkbox,\n    email,\n    hidden,\n    number,\n    password,\n    text,\n    textarea,\n    select,\n    radioGroup\n}\n\nexport type FieldLabel = {\n    label: string,\n    attributes?: Attribute[],\n    classes?: string\n}\n\nexport type DescriptionText = {\n    message: string,\n    elementType: string,\n    elementClasses: string,\n}\n\nexport type DisplayOrder = {\n    fieldId: string,\n    displayOrder: number\n}\n\nexport type FieldUIConfig = {\n    field: FieldDefinition,\n    displayOrder: number,\n    elementType: UIFieldType,\n    elementAttributes?: Attribute[],\n    elementClasses?: string,\n    subElement?: {\n        container?: BasicElement,\n        label?: FieldLabel,\n        element: BasicElement,\n    },// for radio and selection options\n    label?: FieldLabel,\n    describedBy?: DescriptionText,\n    containedBy?: BasicElement,\n    textarea?: {\n        rows: number,\n        cols: number\n    },\n    validator?: {\n        validator: FieldValidator, // on blur\n        messageDisplay: BasicElement,\n        validClasses?: string,\n        invalidClasses?: string,\n    }\n    renderer?: FieldRenderer, // on change\n    editor?: FieldEditor, // on focus\n    formatter?: FieldFormatter // used by form when saving\n    conditionalDisplay?: ConditionalField // used to determine if the is visible\n    datasource?: FieldValueOptions\n}\n\nexport type FieldGroup = {\n    containedBy?: BasicElement,\n    fields: FieldUIConfig[]\n}\n\nexport type FormUIDefinition = {\n    id: string,\n    displayName: string,\n    classes?: string,\n    unsavedChanges: BasicElement,\n    fieldGroups: FieldGroup[],\n    buttonsContainedBy?: BasicElement\n    deleteButton?: BasicButtonElement,// should be clickable\n    cancelButton: BasicButtonElement,// should be clickable\n    submitButton: BasicButtonElement  // should be clickable\n    activeSave?: string\n}\n\nexport enum FormMode {\n    unset = -1,\n    create,\n    update\n}\n\nexport type AttributeFieldMapItem = {\n    fieldId: string,\n    attributeId: string\n}\n\nexport const DATA_ID_ATTRIBUTE: string = 'data-id';\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class EditingEventListener {\n    private formId: string;\n    private fieldConfig: FieldUIConfig;\n    private listeners: FieldListener[];\n\n    constructor(formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[]) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    handleEvent(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        if (this.fieldConfig.editor) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            const newValue: string = this.fieldConfig.editor.editValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                this.listeners.forEach((listener) => listener.valueChanged(this.formId, field, newValue));\n\n            }\n        }\n    }\n}","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class RenderingEventListener {\n    private formId: string;\n    private fieldConfig: FieldUIConfig;\n    private listeners: FieldListener[];\n    private subElements: HTMLInputElement[] | null;\n\n    constructor(formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    processRendering(fieldElement: HTMLInputElement): string {\n        let newValue: string | null = '';\n        if (this.fieldConfig.renderer) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            if (this.subElements) this.fieldConfig.renderer.setSubElements(this.subElements);\n            newValue = this.fieldConfig.renderer.renderValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.valueChanged(field, newValue));\n            }\n        }\n        if (newValue) {\n            return newValue;\n        } else {\n            return '';\n        }\n    }\n\n    handleEvent(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processRendering(fieldElement);\n\n    }\n}","import {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class ValidationEventHandler {\n    private formId: string;\n    private fieldConfig: FieldUIConfig;\n    private listeners: FieldListener[];\n    private subElements: HTMLInputElement[] | null;\n\n    constructor(formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    public setValidationStatusAndMessage(fieldElement: HTMLElement, isValid: boolean, value: string, message: string | undefined = undefined, resetOnFailure: boolean = false) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            let validationElementTarget = fieldElement; // we are providing user feedback on the field element, unless...\n            if (this.subElements) { // sub elements change the validation target\n                this.fieldConfig.validator.validator.setSubElements(this.subElements);\n                if (this.fieldConfig.subElement) { // should be targetting the parentelement\n                    let parentEl = fieldElement.parentElement;\n                    if (parentEl) {\n                        validationElementTarget = parentEl;\n                        if (this.fieldConfig.subElement.container) { // another layer up required\n                            parentEl = parentEl.parentElement;\n                            if (parentEl) {\n                                validationElementTarget = parentEl;\n                            }\n                        }\n                    }\n                }\n            }\n            const errorMessageDiv = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error`);\n            const errorMessageEl = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error.message`);\n\n            // clear any previous message\n            errorMessageDiv?.setAttribute('style', 'display:none');\n            if (errorMessageEl) errorMessageEl.innerHTML = '';\n\n            if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses, false);\n            if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses);\n\n            if (!isValid) {\n                if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses);\n                if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses, false);\n\n                if (!message) {\n                    message = `${field.displayName} does not have a valid value.`;\n                }\n                // show the error message\n                errorMessageDiv?.setAttribute('style', 'display:block')\n                if (errorMessageEl) errorMessageEl.innerHTML = message;\n\n                if (resetOnFailure) {\n                    switch (field.type) {\n                        case (FieldType.boolean): {\n                            // @ts-ignore\n                            fieldElement.checked = false;\n                            break;\n                        }\n                        case (FieldType.integer): {\n                            // @ts-ignore\n                            fieldElement.value = '0';\n                            break;\n                        }\n                        case (FieldType.float): {\n                            // @ts-ignore\n                            fieldElement.value = '0.0';\n                            break;\n                        }\n                        default: {\n                            // @ts-ignore\n                            fieldElement.value = '';\n                            break;\n                        }\n                    }\n                }\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.failedValidation(this.formId, field, value, message));\n            }\n        }\n\n    }\n\n    processValidation(fieldElement: HTMLElement) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            // @ts-ignore\n            let value: string = fieldElement.value;\n            // checkboxes store values differently\n            if (this.fieldConfig.elementType === UIFieldType.checkbox) { // @ts-ignore\n                value = '' + fieldElement.checked;\n            }\n            if (this.subElements) {\n                value = '';\n                this.subElements.forEach((subElement) => {\n                    if (subElement.checked) {\n                        value = subElement.value;\n                    }\n\n                });\n            }\n\n            const validationResp: ValidationResponse = this.fieldConfig.validator.validator.isValidValue(field, value);\n            this.setValidationStatusAndMessage(fieldElement, validationResp.isValid, value, validationResp.message, validationResp.resetOnFailure);\n        }\n    }\n\n    handleEvent(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processValidation(fieldElement);\n\n    }\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {DATA_ID_ATTRIBUTE, FieldUIConfig, UIFieldType} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {EditingEventListener} from \"../event-handlers/EditingEventListener\";\nimport {FieldValueOptionsListener, ValueOption} from \"../../../model/CommonTypes\";\nimport {FieldType} from \"../../../model/DataObjectTypeDefs\";\n\nclass DefaultFieldOptionsListener implements FieldValueOptionsListener {\n    private formId: string;\n    private parentElement: HTMLElement;\n    private fieldUIConfig: FieldUIConfig;\n\n    constructor(formId: string, parentElement: HTMLElement, fieldUIConfig: FieldUIConfig) {\n        this.formId = formId;\n        this.parentElement = parentElement;\n        this.fieldUIConfig = fieldUIConfig;\n    }\n\n    optionsChanged(newOptions: ValueOption[]): void {\n        browserUtil.removeAllChildren(this.parentElement);\n        let subEls: HTMLElement[] = FieldInputElementFactory.createSubElements(this.formId, this.parentElement, this.fieldUIConfig, newOptions);\n\n    }\n\n}\n\nexport class FieldInputElementFactory {\n\n    private static _instance: FieldInputElementFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): FieldInputElementFactory {\n        if (!(FieldInputElementFactory._instance)) {\n            FieldInputElementFactory._instance = new FieldInputElementFactory();\n        }\n        return FieldInputElementFactory._instance;\n    }\n\n    public static initialiseFieldElementAndEventHandlers(fieldElement: HTMLElement, formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements: HTMLInputElement[] | null = null): void {\n        fieldElement.setAttribute('id', `${formId}.field.${fieldConfig.field.id}`);\n        fieldElement.setAttribute(DATA_ID_ATTRIBUTE, fieldConfig.field.id);\n        fieldElement.setAttribute('name', fieldConfig.field.id);\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(fieldElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(fieldElement, fieldConfig.elementClasses);\n\n        // readonly field?\n        if (fieldConfig.field.displayOnly) {\n            browserUtil.addAttributes(fieldElement, [{name: 'disabled', value: 'true'}, {\n                name: 'readonly',\n                value: 'true'\n            }])\n        }\n        /*\n        setup event handlers\n        */\n        if (fieldConfig.validator) { // is the value in the field valid\n            const eventHandler = new ValidationEventHandler(formId, fieldConfig, listeners, subElements);\n            if (subElements) { // event for the subelements\n                subElements.forEach((subElement) => {\n                    subElement.addEventListener('blur', eventHandler);\n                });\n\n            } else {\n                fieldElement.addEventListener('blur', eventHandler);\n            }\n\n        }\n\n        if (fieldConfig.editor) { // render the value when the field gains focus\n            fieldElement.addEventListener('focus', new EditingEventListener(formId, fieldConfig, listeners));\n        } // care for endless loops here, renderer needs to return null if no changes\n\n        // date picker for date fields\n        if (fieldConfig.field.type === FieldType.date) {\n            $(fieldElement).datepicker();\n            $(fieldElement).datepicker(\"option\", \"dateFormat\", 'dd/mm/yy');\n        }\n\n    }\n\n\n    public static createFieldComponentsAndContainer(fieldElement: HTMLElement, formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): void {\n\n        // if the field has a validator, then we need a div for error messages\n        let errorMessageDivEl: HTMLElement | null = null;\n\n        if (fieldConfig.validator) {\n            errorMessageDivEl = document.createElement('div');\n            errorMessageDivEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error`);\n            errorMessageDivEl.setAttribute('style', 'display: none'); // default to not visible\n            browserUtil.addRemoveClasses(errorMessageDivEl, fieldConfig.validator.messageDisplay.elementClasses);\n            let messageEl = document.createElement(fieldConfig.validator.messageDisplay.elementType);\n            if (messageEl) {\n                messageEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error.message`);\n                if (fieldConfig.validator.messageDisplay.elementAttributes) browserUtil.addAttributes(messageEl, fieldConfig.validator.messageDisplay.elementAttributes);\n                errorMessageDivEl.appendChild(messageEl);\n            }\n        }\n\n\n        // ok, so is the field contained?\n        if (fieldConfig.containedBy) {\n            // we need to create a container for the field and option label and description text\n            let containedByEl = document.createElement(fieldConfig.containedBy.elementType);\n            if (containedByEl) {\n                browserUtil.addRemoveClasses(containedByEl, fieldConfig.containedBy.elementClasses);\n                containedByEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.container`);\n\n                if (fieldConfig.containedBy.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.containedBy.elementAttributes);\n                // do we have a label also?\n                if (fieldConfig.label) {\n                    let labelEl: HTMLLabelElement = document.createElement('label');\n                    labelEl.setAttribute('for', `${formId}.field.${fieldConfig.field.id}`);\n                    labelEl.innerHTML = fieldConfig.field.displayName;\n                    if (fieldConfig.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.label.attributes);\n                    if (fieldConfig.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.label.classes);\n                    containedByEl.appendChild(labelEl);\n                }\n                if (fieldConfig.describedBy) {\n                    let descEl: HTMLElement = document.createElement(fieldConfig.describedBy.elementType);\n                    if (descEl) {\n                        // link the field and the description\n                        descEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.field.description) descEl.innerHTML = fieldConfig.field.description;\n                        fieldElement.setAttribute('aria-describedby', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.describedBy.elementClasses) browserUtil.addRemoveClasses(descEl, fieldConfig.describedBy.elementClasses);\n                        containedByEl.appendChild(fieldElement);\n                        containedByEl.appendChild(descEl);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    } else { // description failure, add the field\n                        containedByEl.appendChild(fieldElement);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    }\n                } else { // no description, add field to container\n                    containedByEl.appendChild(fieldElement);\n                    if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                }\n                containerEl.appendChild(containedByEl);\n            } else { // errors should keep making something!\n                containerEl.appendChild(fieldElement);\n                if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n            }\n        } else {\n            containerEl.appendChild(fieldElement);\n            if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n        }\n\n    }\n\n    public static createSubElements(formId: string, parentEl: HTMLElement, fieldConfig: FieldUIConfig, valueOptions: ValueOption[]): HTMLElement[] {\n        let results: HTMLElement[] = [];\n\n        valueOptions.forEach((valueOption, index) => {\n            if (fieldConfig.subElement) {\n                let containerEl: HTMLElement = parentEl;\n                // is there a container?\n                if (fieldConfig.subElement.container) {\n                    containerEl = document.createElement(fieldConfig.subElement.container.elementType);\n                    browserUtil.addRemoveClasses(containerEl, fieldConfig.subElement.container.elementClasses);\n                    if (fieldConfig.subElement.container.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.subElement.container.elementAttributes);\n                    parentEl.appendChild(containerEl);\n                }\n                let valueEl: HTMLElement = document.createElement(fieldConfig.subElement.element.elementType);\n                valueEl.setAttribute('value', valueOption.value);\n                valueEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.${index}`);\n                valueEl.setAttribute('name', `${formId}.field.${fieldConfig.field.id}`);\n\n                browserUtil.addRemoveClasses(valueEl, fieldConfig.subElement.element.elementClasses);\n                if (fieldConfig.subElement.element.elementAttributes) browserUtil.addAttributes(valueEl, fieldConfig.subElement.element.elementAttributes);\n\n                containerEl.appendChild(valueEl);\n\n                if (fieldConfig.subElement.label) {\n                    let labelEl = document.createElement('label');\n                    if (fieldConfig.subElement.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.subElement.label.classes);\n                    if (fieldConfig.subElement.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.subElement.label.attributes);\n                    labelEl.innerHTML = valueOption.name;\n                    containerEl.appendChild(labelEl);\n                } else {\n                    valueEl.innerHTML = valueOption.name;\n                }\n                results.push(valueEl);\n            }\n        });\n        return results;\n    }\n\n    public createInputFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLInputElement { // return the input element\n        let fieldElement: HTMLInputElement = document.createElement('input');\n\n        switch (fieldConfig.elementType) {\n            case UIFieldType.checkbox: {\n                fieldElement.setAttribute('type', 'checkbox');\n                fieldElement.setAttribute('value', fieldConfig.field.id);\n                break;\n            }\n            case UIFieldType.email: {\n                fieldElement.setAttribute('type', 'email');\n                break;\n            }\n            case UIFieldType.hidden: {\n                fieldElement.setAttribute('type', 'hidden');\n                break;\n            }\n            case UIFieldType.number: {\n                fieldElement.setAttribute('type', 'number');\n                break;\n            }\n            case UIFieldType.password: {\n                fieldElement.setAttribute('type', 'password');\n                break;\n            }\n            case UIFieldType.text: {\n                fieldElement.setAttribute('type', 'text');\n                break;\n            }\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createTAFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLTextAreaElement { // return the input element\n        let fieldElement: HTMLTextAreaElement = document.createElement('textarea');\n        if (fieldConfig.textarea) {\n            fieldElement.setAttribute('rows', `${fieldConfig.textarea.rows}`);\n            fieldElement.setAttribute('cols', `${fieldConfig.textarea.cols}`);\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createSelectFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLSelectElement { // return the input element\n        let fieldElement: HTMLSelectElement = document.createElement('select');\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            FieldInputElementFactory.createSubElements(formId, fieldElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, fieldElement, fieldConfig));\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createRadioGroupFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]):\n        {\n            container: HTMLElement,\n            radioButtons: HTMLInputElement[]\n        } {\n        // create a div for each option in the source\n        // create the div for the radio group\n        let radioGroupElement: HTMLDivElement = document.createElement('div');\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(radioGroupElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(radioGroupElement, fieldConfig.elementClasses);\n\n        let subElements: HTMLInputElement[] = [];\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            // we should get the radio buttons back\n            subElements = <HTMLInputElement[]>FieldInputElementFactory.createSubElements(formId, radioGroupElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, radioGroupElement, fieldConfig));\n            // setup the subelements for the validator, formatter, and renderer\n            if (fieldConfig.validator) fieldConfig.validator.validator.setSubElements(subElements);\n            if (fieldConfig.renderer) fieldConfig.renderer.setSubElements(subElements);\n            if (fieldConfig.formatter) fieldConfig.formatter.setSubElements(subElements);\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(radioGroupElement, formId, fieldConfig, listeners, subElements);\n        FieldInputElementFactory.createFieldComponentsAndContainer(radioGroupElement, formId, containerEl, fieldConfig, listeners);\n        return {\n            container: radioGroupElement,\n            radioButtons: subElements\n        };\n\n    }\n\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldInputElementFactory} from \"./FieldInputElementFactory\";\nimport {BasicButtonElement} from \"../../ConfigurationTypes\";\nimport {Form} from \"../Form\";\nimport {FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../FormUITypeDefs\";\nimport {FormEvent, FormEventType, FormListener} from \"../FormListener\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport type FormFactoryResponse = {\n    form: HTMLFormElement,\n    unsavedMessage: HTMLElement,\n    fields: HTMLInputElement[],\n    textFields: HTMLTextAreaElement[],\n    selectFields: HTMLSelectElement[],\n    radioButtonGroups: {\n        container: HTMLElement,\n        radioButtons: HTMLInputElement[]\n    }[],\n    deleteButton?: HTMLButtonElement,\n    cancelButton: HTMLButtonElement,\n    submitButton: HTMLButtonElement,\n}\n\nexport class FormElementFactory {\n\n    private static _instance: FormElementFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): FormElementFactory {\n        if (!(FormElementFactory._instance)) {\n            FormElementFactory._instance = new FormElementFactory();\n        }\n        return FormElementFactory._instance;\n    }\n\n    public createFormElements(form: Form, formListeners: FormListener[], formConfig: FormUIDefinition, fieldListeners: FieldListener[]): FormFactoryResponse {\n        let formEl: HTMLFormElement = document.createElement('form');\n        formEl.setAttribute('id', formConfig.id);\n        formEl.setAttribute('name', formConfig.displayName);\n\n        if (formConfig.classes) browserUtil.addRemoveClasses(formEl, formConfig.classes);\n        // create each of the fields and collect them\n        let formInputElements: HTMLInputElement[] = [];\n        let formTAElements: HTMLTextAreaElement[] = [];\n        let formRBGElements: {\n            container: HTMLElement,\n            radioButtons: HTMLInputElement[]\n        }[] = [];\n        let formSelectElements: HTMLSelectElement[] = [];\n\n        let unsavedMessage: HTMLElement = document.createElement(formConfig.unsavedChanges.elementType);\n        browserUtil.addRemoveClasses(unsavedMessage, formConfig.unsavedChanges.elementClasses);\n        if (formConfig.unsavedChanges.elementAttributes) browserUtil.addAttributes(unsavedMessage, formConfig.unsavedChanges.elementAttributes);\n\n        formEl.appendChild(unsavedMessage);\n\n        formConfig.fieldGroups.forEach((group: FieldGroup) => {\n            // if the group has a container make that, otherwise the form is the container\n            let containerEl = formEl;\n            if (group.containedBy) {\n                // @ts-ignore\n                containerEl = document.createElement(group.containedBy.elementType);\n                if (containerEl) {\n                    if (group.containedBy.elementAttributes) browserUtil.addAttributes(containerEl, group.containedBy.elementAttributes);\n                    if (group.containedBy.elementClasses) browserUtil.addRemoveClasses(containerEl, group.containedBy.elementClasses);\n                    formEl.appendChild(containerEl);\n                }\n            }\n            group.fields.forEach((field: FieldUIConfig) => {\n                switch (field.elementType) {\n                    case (UIFieldType.textarea): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createTAFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formTAElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.select): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createSelectFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formSelectElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.radioGroup): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createRadioGroupFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formRBGElements.push(fieldEl);\n                        break;\n                    }\n                    default: {\n                        const fieldEl = FieldInputElementFactory.getInstance().createInputFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formInputElements.push(fieldEl);\n                    }\n                }\n            });\n        });\n\n        /* setup the buttons */\n        let buttonContainer: HTMLElement = formEl;\n\n        if (formConfig.buttonsContainedBy) {\n            buttonContainer = document.createElement(formConfig.buttonsContainedBy.elementType);\n            if (buttonContainer) {\n                if (formConfig.buttonsContainedBy.elementAttributes) browserUtil.addAttributes(buttonContainer, formConfig.buttonsContainedBy.elementAttributes);\n                browserUtil.addRemoveClasses(buttonContainer, formConfig.buttonsContainedBy.elementClasses);\n                formEl.appendChild(buttonContainer);\n            } else {\n                buttonContainer = formEl; // couldn't create the button container, use the form\n            }\n        }\n\n        let deleteButtonEl: HTMLButtonElement | undefined = undefined;\n        if (formConfig.deleteButton) {\n            deleteButtonEl = this.createFormButton(form, formConfig, formListeners, formConfig.deleteButton, FormEventType.DELETING);\n            buttonContainer.appendChild(deleteButtonEl);\n        }\n\n        let cancelButtonEl: HTMLButtonElement = this.createFormButton(form, formConfig, formListeners, formConfig.cancelButton, FormEventType.CANCELLING);\n        buttonContainer.appendChild(cancelButtonEl);\n\n        let submitButtonEl: HTMLButtonElement = this.createFormButton(form, formConfig, formListeners, formConfig.submitButton, FormEventType.SAVING);\n        buttonContainer.appendChild(submitButtonEl);\n\n        let result: FormFactoryResponse = {\n            form: formEl,\n            unsavedMessage: unsavedMessage,\n            fields: formInputElements,\n            selectFields: formSelectElements,\n            radioButtonGroups: formRBGElements,\n            textFields: formTAElements,\n            deleteButton: deleteButtonEl,\n            cancelButton: cancelButtonEl,\n            submitButton: submitButtonEl\n        }\n\n        return result;\n    }\n\n    private createFormButton(form: Form, formConfig: FormUIDefinition, formListeners: FormListener[], buttonDef: BasicButtonElement, eventType: FormEventType): HTMLButtonElement {\n        let buttonEl: HTMLButtonElement = document.createElement('button');\n        browserUtil.addRemoveClasses(buttonEl, buttonDef.buttonClasses);\n        buttonEl.setAttribute('id', `${formConfig.id}.${eventType}`);\n        if (buttonDef.buttonText) {\n            buttonEl.innerText = buttonDef.buttonText;\n        }\n        if (buttonDef.iconClasses) {\n            let iconEl = document.createElement('i');\n            if (iconEl) {\n                browserUtil.addRemoveClasses(iconEl, buttonDef.iconClasses);\n                buttonEl.appendChild(iconEl);\n            }\n        }\n        /* setup the event handler for the button */\n        buttonEl.addEventListener('click', (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            let formEvent: FormEvent = {\n                target: form,\n                formId: formConfig.id,\n                eventType: eventType\n            }\n            formListeners.forEach((listener) => listener.formChanged(formEvent));\n        });\n        return buttonEl;\n    }\n}","import {Field} from \"./Field\";\nimport {FieldUIConfig, FieldValidator, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {FieldListener} from \"./FieldListener\";\nimport {RenderingEventListener} from \"../event-handlers/RenderingEventListener\";\n\nimport debug from 'debug';\n\nconst logger = debug('abstract-field');\n\n\nexport class AbstractField implements Field, FieldListener {\n    protected formId: string;\n    protected config: FieldUIConfig | null = null;\n    protected definition: FieldDefinition;\n    protected element: HTMLElement;\n    protected subElements: HTMLInputElement[] = [];\n    protected validationHandler: ValidationEventHandler;\n    protected renderingHandler: RenderingEventListener;\n    protected listeners: FieldListener[] = [];\n    private hidden: boolean = false;\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.config = config;\n        this.definition = fieldDef;\n        this.element = element;\n        if (subElements) this.subElements = subElements;\n        this.validationHandler = new ValidationEventHandler(formId, config, [this], subElements);\n        this.renderingHandler = new RenderingEventListener(formId, config, [this], subElements);\n\n        // listen for our own change events\n        this.handleChangeEvent = this.handleChangeEvent.bind(this);\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.addEventListener('change', this.handleChangeEvent);\n            });\n        } else {\n            this.element.addEventListener('change', this.handleChangeEvent);\n        }\n\n    }\n\n    isHidden(): boolean {\n        return this.hidden;\n    }\n\n    addFieldListener(listener: FieldListener): void {\n        logger(`${this.getName()} - adding listener ${listener.getName()}`);\n        // don't duplicate listeners\n        let index = this.listeners.findIndex((listenerInList) => listenerInList.getName() === listener.getName());\n        if (index < 0) {\n            this.listeners.push(listener);\n        } else {\n            logger(`${this.getName()} - duplicate listener ${listener.getName()} ignored`);\n        }\n\n    }\n\n    getFieldDefinition(): FieldDefinition {\n        return this.definition;\n    }\n\n    setInvalid(message: string): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element, false, '', message, false);\n        // @ts-ignore\n        this.listeners.forEach((listener) => listener.failedValidation(this.formId, this.definition, this.getValue(), message));\n    }\n\n    public initialise(): void {\n    }\n\n    getValue(): string | null {\n        let result: string | null = null;\n        if (this.config && this.element) {\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    logger(`${this.definition.id} - getting value - rbg`);\n\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.checked) {\n                                logger(`${this.definition.id} - getting value - rbg - checked ${subElement.value}`);\n                                result = subElement.value;\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    result = '' + this.element.checked;\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    result = this.element.value;\n                    break;\n                }\n            }\n        }\n        logger(`${this.definition.id} - getting value - ${result}`);\n        return result;\n    }\n\n    getFormattedValue(): any | null {\n        let result: any | null = null;\n        if (this.config && this.element) {\n            // @ts-ignore\n            result = this.element.value;\n            if (this.config.elementType === UIFieldType.checkbox) { // @ts-ignore\n                result = '' + this.element.checked;\n            }\n            if (this.config.formatter) {\n                result = this.config.formatter.formatValue(this.definition, result);\n            }\n        }\n        return result;\n    }\n\n    isValid(): boolean {\n        let result = true;\n        if (this.config && this.element) {\n            if (this.config.validator) {\n                if (this.config.validator.validator) {\n                    const validator: FieldValidator = this.config.validator.validator;\n                    const response: ValidationResponse = validator.isValidValue(this.definition, this.getValue());\n                    result = response.isValid;\n                }\n            }\n        }\n        return result;\n    }\n\n    getId(): string {\n        return this.definition.id;\n    }\n\n    setValue(newValue: string): void {\n        newValue = '' + newValue;\n        if (this.element && this.config) {\n            // @ts-ignore\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.value === newValue) {\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    this.element.checked = (newValue.toLowerCase() === 'true');\n                    break;\n                }\n                case (UIFieldType.select): {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    const selectEl: HTMLSelectElement = <HTMLSelectElement>this.element;\n                    let selectedIndex = -1;\n                    for (let index = 0; index < selectEl.options.length; index++) {\n                        // @ts-ignore\n                        const option: HTMLOptionElement = selectEl.options.item(index);\n                        logger(`${this.definition.id} - option value - ${option.value}`);\n                        if (option.value === newValue) {\n                            logger(`${this.definition.id} - option value - ${option.value} - SELECTED`);\n                            option.selected = true;\n                            selectedIndex = index;\n                        }\n                    }\n                    logger(`${this.definition.id} - selected index ${selectedIndex}`);\n                    selectEl.selectedIndex = selectedIndex;\n                    break;\n                }\n                default: {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    // @ts-ignore\n                    this.element.value = newValue;\n                    break;\n                }\n            }\n        }\n    }\n\n    reset(): void {\n        if (this.element) {\n            switch (this.definition.type) {\n                case (FieldType.boolean): {\n                    // @ts-ignore\n                    this.element.checked = false;\n                    break;\n                }\n                case (FieldType.integer): {\n                    // @ts-ignore\n                    this.element.value = '0';\n                    break;\n                }\n                case (FieldType.float): {\n                    // @ts-ignore\n                    this.element.value = '0.0';\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            subElement.checked = false;\n                        });\n                    }\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    this.element.value = '';\n                    break;\n                }\n            }\n        }\n        this.show();\n    }\n\n    clearValue(): void {\n        this.reset();\n    }\n\n    validate(): void {\n        if (this.element) {\n            this.validationHandler.processValidation(this.element);\n        }\n    }\n\n    render(currentValue: string): string {\n        let result = currentValue;\n        if (this.config?.renderer) {\n            let value = this.config.renderer.renderValue(this.definition, currentValue);\n            if (value) result = value;\n        }\n        return result;\n    }\n\n    failedValidation(formId: string, field: FieldDefinition, currentValue: string, message: string): void {\n    }\n\n    valueChanged(formId: string, field: FieldDefinition, newValue: string | null): void {\n    }\n\n    getName(): string {\n        return this.definition.displayName;\n    }\n\n    hide(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.setAttribute('style', 'display:none');\n                }\n\n            } else {\n                this.setReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n    setValid(): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element, true, '');\n    }\n\n    show(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.removeAttribute('style');\n                }\n\n            } else {\n                this.clearReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n    clearReadOnly(): void {\n        if (this.definition.displayOnly) return;\n        this.element.removeAttribute('readonly');\n        this.element.removeAttribute('disabled');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.removeAttribute('readonly');\n                subElement.removeAttribute('disabled');\n            });\n        }\n\n    }\n\n    setReadOnly(): void {\n        this.element.setAttribute('readonly', 'true');\n        this.element.setAttribute('disabled', 'true');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.setAttribute('readonly', 'true');\n                subElement.setAttribute('disabled', 'true');\n            });\n        }\n    }\n\n    protected handleChangeEvent(event: Event) {\n        logger(`Handling change event`);\n        if (this.config) {\n            let value: string | null = this.getValue();\n            logger(`Handling change event - informing listeners`);\n            this.listeners.forEach((listener) => listener.valueChanged(this.formId, this.definition, value));\n        }\n    }\n}\n\n","import {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {AbstractField} from \"./AbstractField\";\n\n\nexport class InputField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLInputElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n\n","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\nexport class RadioButtonGroupField extends AbstractField {\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[]) {\n        super(formId, config, fieldDef, element, subElements);\n    }\n\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\n\nexport class SelectField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLSelectElement) {\n        super(formId, config, fieldDef, element);\n    }\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\n\nexport class TextAreaField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLTextAreaElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n","import {ComparisonType, ConditionResponse, ValidationRule} from \"./ValidationTypeDefs\";\nimport {Form} from \"../Form\";\nimport {Field} from \"../field/Field\";\nimport debug from 'debug';\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nconst logger = debug('validation-manager');\nconst flogger = debug('validation-manager-rule-failure');\n\n\nexport type RuleCheck = {\n    ruleFailed: boolean,\n    message?: string\n}\n\nexport type RuleResponse = {\n    field: Field,\n    ruleFailed: boolean,\n    response: ConditionResponse,\n    message?: string\n}\n\n\ntype _ValueCondition = {\n    values: string,\n    comparison: ComparisonType\n};\n\ntype _FieldCondition = {\n    sourceField: Field,\n    comparison: ComparisonType,\n    values?: string,\n};\n\ntype _ValidationRule = {\n    targetField: Field,\n    response: ConditionResponse,\n    fieldConditions: _FieldCondition[],\n    valueConditions: _ValueCondition[],\n}\n\ntype FormRuleSet = {\n    form: Form,\n    rules: _ValidationRule[]\n}\n\nexport class ValidationManager implements FieldListener {\n\n    private static _instance: ValidationManager;\n    private formRules: FormRuleSet[];\n\n    private constructor() {\n        this.formRules = [];\n    }\n\n    public static getInstance(): ValidationManager {\n        if (!(ValidationManager._instance)) {\n            ValidationManager._instance = new ValidationManager();\n        }\n        return ValidationManager._instance;\n    }\n\n    public getName(): string {\n        return \"Validation Manager\";\n    }\n\n    public addRuleToForm(form: Form, rule: ValidationRule): boolean { // returns whether the rule was added\n        logger(`Adding rule on form ${form.getId()} for target field ${rule.targetDataFieldId}`);\n        /*\n         validate the rule\n         1. does the rule have a comparison field or static for each condition?\n         2. do the fields exist?\n         3. are the comparisons valid types to compare?\n        */\n        let targetField: Field | undefined = form.getFieldFromDataFieldId(rule.targetDataFieldId);\n        if (!targetField) {\n            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - NOT FOUND in form`);\n            return false;\n        }\n\n        let convertedRule: _ValidationRule = {\n            targetField: targetField,\n            response: rule.response,\n            fieldConditions: [],\n            valueConditions: []\n        }\n\n\n        rule.conditions.forEach((condition) => {\n            // do we have one of values or source field?\n            if (!(condition.values) && !(condition.sourceDataFieldId)) {\n                flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - a condition is missing both values and source field`);\n                return false;\n            }\n            // is this a target field value comparison?\n            if ((condition.values) && (condition.sourceDataFieldId)) {\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} with values ${condition.values}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                convertedRule.fieldConditions.push({\n                    sourceField: sourceField,\n                    comparison: condition.comparison,\n                    values: condition.values\n                });\n                sourceField.addFieldListener(this);\n            } else if ((condition.values) && !(condition.sourceDataFieldId)) { // is this a value comparison?\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - values ${condition.values}`);\n                // add a new value rule to the internal structure\n                convertedRule.valueConditions.push({values: condition.values, comparison: condition.comparison});\n                // @ts-ignore\n                targetField.addFieldListener(this);\n            } else if ((condition.sourceDataFieldId) && (!condition.values)) { // is this a field vs field comparison\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                /*\n                   are we comparing two fields that can be compared?\n                   allowed combinations are:\n                   date|datetime vs date|datetime\n                   time|short time vs time|short time\n                   boolean vs boolean\n                   integer|float vs number|float\n                   any other vs any other\n                 */\n                let sourceType = sourceField.getFieldDefinition().type;\n                // @ts-ignore\n                let targetType = targetField.getFieldDefinition().type;\n\n                switch (targetType) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        if ((sourceType !== FieldType.datetime) &&\n                            (sourceType !== FieldType.date)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is date(time), source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.time):\n                    case (FieldType.shortTime): {\n                        if ((sourceType !== FieldType.time) &&\n                            (sourceType !== FieldType.shortTime)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is time, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.boolean): {\n                        if ((sourceType !== FieldType.boolean)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is boolean, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.integer):\n                    case (FieldType.float): {\n                        if ((sourceType !== FieldType.integer) &&\n                            (sourceType !== FieldType.float)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is number, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                }\n                convertedRule.fieldConditions.push({sourceField: sourceField, comparison: condition.comparison});\n                sourceField.addFieldListener(this);\n            }\n        });\n        logger(`Converted rule to `);\n        logger(convertedRule);\n\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === form.getId());\n        let formRuleSet: FormRuleSet;\n        // store the rules for later execution\n        if (index < 0) {\n            formRuleSet = {\n                form: form,\n                rules: []\n            }\n            formRuleSet.rules.push(convertedRule);\n            this.formRules.push(formRuleSet)\n        } else {\n            formRuleSet = this.formRules[index];\n            formRuleSet.rules.push(convertedRule);\n        }\n        logger(`Current set of rules for form ${form.getId()}`);\n        logger(formRuleSet);\n\n        return true;\n    }\n\n    public failedValidation(formId: string, field: FieldDefinition, currentValue: string, message: string): void {\n    } // ignored, we might be causing\n\n    public applyRulesToTargetField(formId: string, field: FieldDefinition, onlyRulesOfType: ConditionResponse | null): RuleCheck {\n        logger(`Checking rules for form ${formId}, data field ${field.id} of type ${onlyRulesOfType}`);\n        // which rules apply?\n        let rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id, false);\n\n        let result: RuleCheck = {\n            ruleFailed: false\n        }\n\n        // get the rules for the field, filtered by the condition response type\n        if (onlyRulesOfType) {\n            let ruleSubset: _ValidationRule[] = [];\n            rules.forEach((rule) => {\n                if (rule.response === onlyRulesOfType) {\n                    ruleSubset.push(rule);\n                }\n            });\n            rules = ruleSubset;\n        }\n\n\n        rules.forEach((rule) => { // we only want rules that make a field hidden\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                flogger(`Rule failed for form ${formId} with field ${field.displayName} with message ${response.message}`);\n                result.ruleFailed = true;\n                result.message = response.message;\n            }\n        });\n        return result;\n    }\n\n    public valueChanged(formId: string, field: FieldDefinition, newValue: string | null): void {\n        logger(`Handling field change - form ${formId}, data field ${field.id}, value ${newValue}`);\n        // a field we are listening to has changed\n        // which rules apply?\n        const rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id, true);\n        // execute each rule and collect the responses\n        let failedResponses: RuleResponse[] = [];\n\n        rules.forEach((rule) => {\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                failedResponses.push(response);\n            }\n        });\n\n        logger(`Have ${failedResponses.length} failed rules - applying each`);\n        // for each failed response let the target field know based on the response type\n        failedResponses.forEach((response) => {\n            switch (response.response) {\n                case ConditionResponse.hide: {\n                    logger(`Apply hide ${response.field.getId()}`);\n                    response.field.hide();\n                    break;\n                }\n                case ConditionResponse.show: {\n                    logger(`Apply show ${response.field.getId()}`);\n                    response.field.show();\n                    break;\n                }\n                case ConditionResponse.invalid: {\n                    logger(`Apply invalid ${response.field.getId()}`);\n                    if (response.message) response.field.setInvalid(response.message);\n                    break;\n                }\n                case ConditionResponse.valid: {\n                    logger(`Apply valid ${response.field.getId()}`);\n                    response.field.setValid();\n                    break;\n                }\n            }\n        })\n    }\n\n    private areTwoFieldsEqual(targetField: Field, sourceField: Field): RuleCheck {\n        if (targetField.getValue() !== sourceField.getValue()) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be equal to ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private compareTwoValuesWithTypes(targetType: FieldType, targetValue: string | null, sourceType: FieldType, sourceValue: string | null, comparison: ComparisonType): boolean {\n        if (!(targetValue) || !(sourceValue)) return false;  // no null comparisons\n\n        switch (targetType) {\n            case (FieldType.date): {\n                targetValue += ' 00:00:00';\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.datetime): {\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.time): {\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n            case (FieldType.shortTime): {\n                targetValue += ':00';\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n        }\n\n        logger(`Comparing ${targetValue} of type ${targetType} against ${sourceValue} of type ${sourceType}`);\n\n        switch (comparison) {\n            case ComparisonType.lessThan: {\n                return (targetValue < sourceValue);\n            }\n            case ComparisonType.lessThanEqual: {\n                return (targetValue <= sourceValue);\n            }\n            case ComparisonType.greaterThanEqual: {\n                return (targetValue >= sourceValue);\n            }\n            case ComparisonType.greaterThan: {\n                return (targetValue > sourceValue);\n            }\n            case ComparisonType.equals: {\n                return (targetValue === sourceValue);\n            }\n        }\n        return false;\n    }\n\n    private isTargetLessThanSource(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.lessThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be less than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetLessThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetLessThanSource(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be less than or equal to ${sourceField.getName()}`,\n                };\n\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetGreaterThan(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.greaterThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be greater than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isSourceNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((targetValue) && (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private isSourceNotNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((!targetValue) || (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must not be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private doesFieldHaveValue(field: Field, values: string): RuleCheck {\n        let targetValue = field.getValue();\n        logger(`does field ${field.getId()} have value from ${values} - current value is ${targetValue}`);\n        if (targetValue) {\n            // split the values by commas\n            let splits: string[] = values.split(',');\n            let foundInValue: boolean = false;\n            splits.forEach((split) => {\n                if (targetValue === split) {\n                    logger(`does field ${field.getId()} have value from ${values} - current value is ${targetValue} - found in value(s)`);\n                    foundInValue = true;\n                }\n            });\n            if (foundInValue) {\n                return {ruleFailed: false};\n            }\n        }\n        return {\n            ruleFailed: true,\n            message: `${field.getName()} must be have a value in ${values}`,\n        };\n    }\n\n    private doesSourceFieldHaveValue(field: Field, values: string): RuleCheck {\n        return this.doesFieldHaveValue(field, values);\n    }\n\n    private isTargetGreaterThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetGreaterThan(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be greater than or equal to ${sourceField.getName()}`,\n                };\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n    private compareFields(targetField: Field, sourceField: Field, comparison: ComparisonType, value: string): RuleCheck {\n        switch (comparison) {\n            case ComparisonType.equals: {\n                return this.areTwoFieldsEqual(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThan: {\n                return this.isTargetLessThanSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThanEqual: {\n                return this.isTargetLessThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThan: {\n                return this.isTargetGreaterThan(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThanEqual: {\n                return this.isTargetGreaterThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.isNull: {\n                return this.isSourceNull(sourceField);\n                break;\n            }\n            case ComparisonType.isNotNull: {\n                return this.isSourceNotNull(sourceField);\n                break;\n            }\n            case ComparisonType.hasValue: {\n                return this.doesSourceFieldHaveValue(sourceField, value);\n                break;\n            }\n        }\n    }\n\n    private executeRule(rule: _ValidationRule): RuleResponse {\n        let response: RuleResponse = {\n            field: rule.targetField,\n            ruleFailed: false,\n            response: rule.response,\n        }\n        // run each field comparison\n        logger(`Executing rule for target ${rule.targetField.getId()}`);\n        logger(rule);\n        rule.fieldConditions.every((condition) => {\n            logger('field condition rule');\n            logger(condition);\n            let values = (condition.values) ? condition.values : '';\n            let ruleCheck: RuleCheck = this.compareFields(rule.targetField, condition.sourceField, condition.comparison, values);\n            if (ruleCheck.ruleFailed) {\n                flogger('field condition rule FAILED');\n                response.ruleFailed = true;\n                // only need messages for invalid responses\n                response.message = ruleCheck.message;\n                return false;\n            }\n            flogger('field condition rule PASSED');\n            return true;\n        });\n        // run each value comparison if we haven't already failed\n        if (!response.ruleFailed) {\n            rule.valueConditions.forEach((condition) => {\n                logger('value condition rule');\n                logger(condition);\n                let ruleCheck: RuleCheck = this.compareFields(rule.targetField, rule.targetField, ComparisonType.hasValue, condition.values);\n                if (ruleCheck.ruleFailed) {\n                    flogger('value condition rule FAILED');\n                    response.ruleFailed = true;\n                    response.message = ruleCheck.message;\n                    return false;\n                }\n                flogger('value condition rule PASSED');\n                return true;\n            });\n        }\n        return response;\n    }\n\n    private getRulesForFieldChange(formId: string, dataFieldId: string, includeSourceFields: boolean): _ValidationRule[] {\n        let rules: _ValidationRule[] = [];\n        // lets go through the rules for the form\n        logger(`Finding rules for form ${formId} and data field ${dataFieldId}`);\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === formId);\n        if (index >= 0) {\n            const ruleSet: FormRuleSet = this.formRules[index];\n\n            // the dataFieldId could be the target or one of the sources\n            ruleSet.rules.forEach((rule) => {\n                if (rule.targetField.getId() === dataFieldId) {\n                    logger(`Found rule where data field ${dataFieldId} is target`);\n                    if (rule.targetField.isValid()) {\n                        rules.push(rule);\n                    } else {\n                        flogger(`Found rule where data field ${dataFieldId} is target but value is not currently valid`);\n                    }\n                } else {\n                    if (includeSourceFields) {\n                        rule.fieldConditions.every((value: { sourceField: Field, comparison: ComparisonType }) => {\n                            if (value.sourceField.getId() === dataFieldId) {\n                                logger(`Found rule where data field ${dataFieldId} is source`);\n                                if (value.sourceField.isValid()) {\n                                    rules.push(rule);\n                                } else {\n                                    flogger(`Found rule where data field ${dataFieldId} is source but value is not currently valid`);\n                                }\n                                return false;\n                            }\n                            return true;\n                        });\n                    }\n                }\n            });\n        }\n        return rules;\n    }\n\n\n}","export enum ComparisonType {\n    equals,\n    lessThan,\n    lessThanEqual,\n    greaterThan,\n    greaterThanEqual,\n    isNull,\n    isNotNull,\n    hasValue\n}\n\nexport enum ConditionResponse {\n    show,\n    hide,\n    invalid,\n    valid\n}\n\nexport type ValidationCondition = {\n    comparison: ComparisonType,\n    sourceDataFieldId?: string,\n    values?: string\n}\n\nexport type ValidationRule = {\n    targetDataFieldId: string,\n    response: ConditionResponse,\n    conditions: ValidationCondition[]\n}\n","import {BasicFieldOperations} from \"../../model/BasicFieldOperations\";\nimport {DataObjectDefinition, FieldType} from \"../../model/DataObjectTypeDefs\";\nimport {DisplayOrder, FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../form/FormUITypeDefs\";\n\nimport debug from 'debug';\nimport {RBGFieldOperations} from \"./RBGFieldOperations\";\nimport {FIELD_CreatedOn, FIELD_ModifiedOn} from \"../../model/BasicObjectDefinitionFactory\";\n\nconst logger = debug('bootstrap-form-config-helper');\n\nexport class BootstrapFormConfigHelper {\n\n    private static _instance: BootstrapFormConfigHelper;\n\n    private constructor() {\n    }\n\n    public static getInstance(): BootstrapFormConfigHelper {\n        if (!(BootstrapFormConfigHelper._instance)) {\n            BootstrapFormConfigHelper._instance = new BootstrapFormConfigHelper();\n        }\n        return BootstrapFormConfigHelper._instance;\n    }\n\n    public generateFormConfig(dataObjDef: DataObjectDefinition, displayOrders: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): FormUIDefinition {\n        let fieldOperations: BasicFieldOperations = new BasicFieldOperations();\n        let rbgFieldOperation: RBGFieldOperations = new RBGFieldOperations();\n\n        // create the Field UI config for each field\n        let fieldUIConfigs: FieldUIConfig[] = [];\n        dataObjDef.fields.forEach((fieldDef, index) => {\n\n            let fieldType: UIFieldType = UIFieldType.text;\n            switch (fieldDef.type) {\n                case (FieldType.time):\n                case (FieldType.text):\n                case (FieldType.date):\n                case (FieldType.shortTime):\n                case (FieldType.duration): {\n                    break;\n                }\n                case (FieldType.datetime): {\n                    // is this the created or modified date\n                    if (hideModifierFields) {\n                        if (fieldDef.id === FIELD_CreatedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                        if (fieldDef.id === FIELD_ModifiedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                    }\n                    break;\n                }\n                case (FieldType.userId): {\n                    if (hideModifierFields) {\n                        fieldType = UIFieldType.hidden;\n                    } else {\n                        fieldType = UIFieldType.text;\n                    }\n                    break;\n                }\n                case (FieldType.uuid):\n                case (FieldType.id): {\n                    fieldType = UIFieldType.hidden;\n                    break;\n                }\n                case (FieldType.integer):\n                case (FieldType.float): {\n                    fieldType = UIFieldType.number;\n                    break;\n                }\n                case (FieldType.email): {\n                    fieldType = UIFieldType.email;\n                    break;\n                }\n                case (FieldType.password): {\n                    fieldType = UIFieldType.password;\n                    break;\n                }\n                case (FieldType.boolean): {\n                    fieldType = UIFieldType.checkbox;\n                    break;\n                }\n                case (FieldType.largeText): {\n                    fieldType = UIFieldType.textarea;\n                    break;\n                }\n                case (FieldType.choice): {\n                    fieldType = UIFieldType.select;\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    fieldType = UIFieldType.radioGroup;\n                    break;\n                }\n            }\n\n            // see if the field was supplied with a display order\n            const displayOrder: DisplayOrder | undefined = displayOrders.find((value) => value.fieldId === fieldDef.id);\n            let displayOrderValue: number = index;\n            if (displayOrder) {\n                displayOrderValue = displayOrder.displayOrder;\n            }\n\n            // construct the field ui config\n            let fieldUIConfig: FieldUIConfig = {\n                field: fieldDef,\n                displayOrder: displayOrderValue,\n                elementType: fieldType,\n                elementClasses: 'form-control col-sm-9',\n                renderer: fieldOperations,\n                formatter: fieldOperations,\n            }\n\n            if ((fieldDef.type !== FieldType.id) && (fieldDef.type !== FieldType.uuid) && (fieldType !== UIFieldType.hidden)) { // no labels, descriptions, container for id,uuid\n                fieldUIConfig.containedBy = {\n                    elementType: 'div',\n                    elementClasses: 'form-group row'\n                };\n\n                fieldUIConfig.label = {\n                    label: fieldDef.displayName,\n                    classes: 'col-md-12 col-lg-3 col-form-label'\n                };\n                if (fieldDef.description) { // descriptions if the field has one\n                    fieldUIConfig.describedBy = {\n                        message: fieldDef.description,\n                        elementType: 'small',\n                        elementClasses: 'text-muted col-md-12 col-lg-9 offset-lg-3 mt-1'\n                    }\n                }\n                if (!fieldDef.displayOnly) { // no validator for readonly items\n                    fieldUIConfig.validator = {\n                        validator: fieldOperations,\n                        messageDisplay: {\n                            elementType: 'div',\n                            elementClasses: 'invalid-feedback col-md-12 col-lg-9 offset-lg-3'\n                        },\n                        validClasses: 'is-valid',\n                        invalidClasses: 'is-invalid',\n                    };\n                }\n            }\n\n            // text areas\n            if (fieldDef.type === FieldType.largeText) {\n                fieldUIConfig.textarea = {\n                    rows: 5,\n                    cols: 20\n                }\n            }\n            // select\n            if (fieldDef.type === FieldType.choice) { // subelements are options, with no classes, no labels, and no other container\n                fieldUIConfig.subElement = {\n                    element: {elementType: 'option', elementClasses: ''},\n                };\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n            // radio button group\n            if (fieldDef.type === FieldType.limitedChoice) {\n                fieldUIConfig.subElement = {\n                    element: {\n                        elementType: 'input',\n                        elementClasses: 'form-check-input',\n                        elementAttributes: [{name: 'type', value: 'radio'}]\n                    },\n                    container: {\n                        elementType: 'div',\n                        elementClasses: 'form-check form-check-inline'\n                    },\n                    label: {\n                        label: 'label',\n                        classes: 'form-check-label',\n                    },\n                }\n                fieldUIConfig.renderer = rbgFieldOperation;\n                if (fieldUIConfig.validator) fieldUIConfig.validator.validator = rbgFieldOperation;\n                fieldUIConfig.formatter = rbgFieldOperation;\n\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n\n\n            fieldUIConfigs.push(fieldUIConfig);\n        });\n        // create a form with a single group and button container with Bootstrap styles\n        const fieldGroup: FieldGroup = {\n            containedBy: {\n                elementType: 'div',\n                elementClasses: 'col-sm-12',\n            },\n            fields: fieldUIConfigs\n        }\n\n        const formConfig: FormUIDefinition = {\n            id: dataObjDef.id,\n            displayName: dataObjDef.displayName,\n            fieldGroups: [fieldGroup],\n            unsavedChanges: {\n                elementType: 'div',\n                elementClasses: 'invalid-feedback text-right col-md-12 col-lg-9 offset-lg-3',\n                elementAttributes: [{name: 'style', value: 'display:block'}],\n                innerHTML: `Pending changes to ${dataObjDef.displayName}`,\n            },\n            buttonsContainedBy: {\n                elementType: 'div',\n                elementClasses: 'd-flex w-100 justify-space-between',\n            },\n            cancelButton: {\n                buttonText: 'Cancel  ',\n                buttonClasses: 'btn-info rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-ban'\n            },\n            submitButton: {\n                buttonText: 'Save  ',\n                buttonClasses: 'btn-primary rounded p-1 mt-2 w-100',\n                iconClasses: 'fas fa-save'\n            },\n            activeSave: '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>&nbsp;',\n        }\n        // sort the fields into display order\n\n        formConfig.fieldGroups.forEach((group) => {\n            group.fields.sort((a, b) => {\n                return (a.displayOrder - b.displayOrder);\n            })\n\n        });\n\n        if (hasDeleteButton) {\n            formConfig.deleteButton = {\n                buttonText: 'Delete  ',\n                buttonClasses: 'btn-warning rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-trash-alt'\n            };\n\n        }\n\n\n        logger(formConfig);\n        return formConfig;\n    }\n}","import {CollectionView} from \"../view/interface/CollectionView\";\nimport {DetailView} from \"../view/interface/DetailView\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {View} from \"../view/interface/View\";\nimport {DetailViewListener} from \"../view/interface/DetailViewListener\";\n\nimport debug from 'debug';\nimport {DataObjectController} from \"../../model/DataObjectController\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\n\nconst logger = debug('linked-controller');\nconst dlogger = debug('linked-controller-detail');\n\nclass ChildViewListenerDelegate implements DetailViewListener {\n    protected controller: DetailViewListener;\n\n    constructor(controller: DetailViewListener) {\n        this.controller = controller;\n    }\n\n    addView(view: DetailView) {\n        view.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    cancelled(view: DetailView, dataObj: any): void {\n        this.controller.cancelled(view, dataObj);\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        this.controller.deletedItem(view, dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        this.controller.saveNewItem(view, dataObj);\n    }\n\n\n    updateItem(view: DetailView, dataObj: any): void {\n        this.controller.updateItem(view, dataObj);\n    }\n}\n\nexport class ChangeDataObjectDelegate implements AlertListener {\n    protected callback: any;\n\n    constructor(callback: any) {\n        this.callback = callback;\n    }\n\n    public shouldDiscardChanges() {\n        AlertManager.getInstance().startAlert(this, 'Discard Changes', 'There are unsaved changes.  Discard?', {});\n\n    }\n\n\n    completed(event: AlertEvent): void {\n        if (event.outcome === AlertType.confirmed) {\n            this.callback();\n        }\n    }\n\n}\n\nexport class LinkedCollectionDetailController extends DataObjectController implements CollectionViewListener, DetailViewListener {\n    protected parentView: CollectionView;\n    protected children: DetailView[] = [];\n    protected delegate: ChildViewListenerDelegate;\n\n    constructor(typeName: string, parentView: CollectionView) {\n        super(typeName);\n        logger(`Starting with parent view ${parentView.getName()}`);\n        this.parentView = parentView;\n        this.delegate = new ChildViewListenerDelegate(this);\n        this.parentView.addEventListener(this);\n    }\n\n    public addLinkedDetailView(childView: DetailView) {\n        logger(`Adding child view ${childView.getName()}`);\n        this.children.push(childView);\n        this.delegate.addView(childView); // this delegate will only pass us the unique detail view events (save, new, etc)\n    }\n\n    public initialise(): void { // call when all views are ready\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Handling delete item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        return this.parentView.hasPermissionToDeleteItemInNamedCollection('', selectedItem);\n    }\n\n    documentLoaded(view: View): void {\n        logger(`Handling document loaded view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n            childView.onDocumentLoaded();\n        });\n    }\n\n    hideRequested(view: View): void {\n        // let the children know\n        logger(`Handling hide  from view ${view.getName()}`);\n        this.children.forEach((childView) => {\n            childView.hidden();\n        });\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        logger(`Handling item action ${actionName} from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.handleActionItem(actionName, selectedItem);\n        });\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        logger(`Handling item deleted from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        logger(`Handling item deselected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void { // nothing to do here\n    }\n\n    itemDropped(view: View, droppedItem: any): void { // nothing to do here\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        logger(`Handling item selected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.displayItem(selectedItem);\n        });\n    }\n\n    showRequested(view: View): void {\n        logger(`Handling show from view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n            childView.show();\n        });\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        logger(`Handling can select item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        // are we currently in the middle of creating a new object?\n        if (this.isCreatingNew) return false;\n\n        // prevent selection if the children views have modified this item\n        let canProceedWithSelection: boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithSelection = false;\n            }\n        });\n        if (!canProceedWithSelection) {\n            canProceedWithSelection = confirm(`${view.getName()} - unsaved changes.  Discard them?`);\n        }\n        return canProceedWithSelection;\n    }\n\n\n    cancelled(view: DetailView, dataObj: any): void {\n        logger(`Handling cancelled from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.isCreatingNew = false;\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        logger(`Handling deleted from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfDelete(dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        logger(`Handling save new from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfCreate(dataObj);\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        logger(`Handling update from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfUpdate(dataObj);\n    }\n\n    protected _startNewObject(): boolean {\n        logger(`Handling start new object`);\n        // assume the first detail view will create the object for us\n        let canProceedWithCreateNew: boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithCreateNew = false;\n            }\n        });\n        if (!canProceedWithCreateNew) {\n            canProceedWithCreateNew = confirm(`There are unsaved changes.  Discard them?`);\n        }\n\n        if (this.children.length > 0) {\n            logger(`Handling start new object with child view ${this.children[0].getName()}`);\n            let dataObj = this.children[0].createItem();\n            if (dataObj) {\n                canProceedWithCreateNew = true;\n                this.children[0].show();\n            }\n        }\n        return canProceedWithCreateNew;\n    }\n\n}","import {FieldFormatter, FieldValidator, ValidationResponse} from \"../form/FormUITypeDefs\";\nimport {FieldDefinition, FieldValueGenerator} from \"../../model/DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class RBGFieldOperations implements FieldFormatter, FieldValidator, FieldValueGenerator {\n    private radioButtons: HTMLInputElement[] = [];\n\n    public constructor() {\n    }\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for RBG ${field.displayName} with value ${currentValue}`);\n        let result: any = currentValue;\n        // find the current selected radio button\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.checked) {\n                result = radioButton.value;\n                if (field.idType === KeyType.number) {\n                    result = parseInt(result);\n                }\n            }\n        });\n\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: false,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            this.radioButtons.forEach((radioButton) => {\n                if (radioButton.checked) {\n                    response.isValid = true;\n                }\n            });\n            if (!response.isValid) {\n                response.message = `${field.displayName} is required. Please select one of the values.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n        } else {\n            response.isValid = true;\n        }\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.value === currentValue) radioButton.checked = true;\n        });\n        return null;\n    }\n\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        return '';\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n        this.radioButtons = elements;\n    }\n\n\n}","import {FieldValueOptions, FieldValueOptionsListener, ValueOption} from \"../../model/CommonTypes\";\n\nexport class SimpleValueDataSource implements FieldValueOptions { // static value list\n    private options: ValueOption[];\n    private listeners: FieldValueOptionsListener[];\n\n    constructor(options: ValueOption[]) {\n        this.options = options;\n        this.listeners = [];\n    }\n\n    public addValueOption(name: string, value: string) {\n        this.options.push({name, value});\n        this.listeners.forEach((listener) => listener.optionsChanged(this.options));\n    }\n\n    addListener(listener: FieldValueOptionsListener): void {\n        this.listeners.push(listener);\n    }\n\n    getOptions(): ValueOption[] {\n        return this.options;\n    }\n\n}","import {AbstractView} from \"../implementation/AbstractView\";\nimport {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType\n} from \"../../ConfigurationTypes\";\nimport {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport debug from \"debug\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {AlertEvent, AlertType} from \"../../alert/AlertListener\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\n\nconst logger = debug('collection-view-event-handler-delegate');\n\nexport type ItemContext = {\n    itemId: string,\n    dataSource: string;\n}\n\n\nexport class CollectionViewEventHandlerDelegate implements CollectionViewEventDelegate {\n    protected view: CollectionView;\n    protected selectedItem: any | null = null;\n    protected eventForwarder: CollectionViewListenerForwarder;\n\n    constructor(view: CollectionView, forwarder: CollectionViewListenerForwarder) {\n        this.view = view;\n        this.eventForwarder = forwarder;\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    getDragData(event: DragEvent): any {\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n\n        let selectedItem = {};\n\n        selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n\n        if (selectedItem) {\n            // @ts-ignore\n            selectedItem[DRAGGABLE_TYPE] = this.view.getCollectionUIConfig().detail.drag?.type;\n            // @ts-ignore\n            selectedItem[DRAGGABLE_FROM] = this.view.getCollectionUIConfig().detail.drag?.from;\n        }\n        return selectedItem;\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        logger(`view ${this.view.getName()}: drag start`);\n        logger(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        logger(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n        (<CollectionViewListenerForwarder>(this.eventForwarder)).itemDragStarted(this.view, data);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        logger(selectedItem);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting selected from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                (<CollectionViewListenerForwarder>(this.eventForwarder)).itemSelected(this.view, selectedItem);\n            }\n        }\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldDelete = this.eventForwarder.canDeleteItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource} - ${shouldDelete}`);\n            if (shouldDelete) {\n                // do we need to confirm?\n                if (this.view.getCollectionUIConfig().detail.quickDelete) {\n                    this.selectedItem = null;\n                    this.eventForwarder.itemDeleted(this.view, selectedItem);\n                } else {\n                    AlertManager.getInstance().startAlert(this, this.view.getName(), `Are you sure you want to delete this information?`, selectedItem);\n                }\n\n            }\n        }\n    }\n\n    eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                this.eventForwarder.itemAction(this.view, actionName, selectedItem);\n            }\n        }\n    }\n\n    completed(event: AlertEvent): void {\n        logger(event.context);\n        if (event.outcome === AlertType.confirmed) {\n            this.selectedItem = null;\n            this.eventForwarder.itemDeleted(this.view, event.context);\n        }\n    }\n\n    protected getItemContext(event: Event): ItemContext {\n        // @ts-ignore\n        const itemId = event.target.getAttribute(this.view.getCollectionUIConfig().keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        let context: ItemContext = {\n            itemId: itemId,\n            dataSource: dataSource\n        }\n\n        return context;\n    }\n\n}","import {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandlerDelegate, ItemContext} from \"./CollectionViewEventHandlerDelegate\";\nimport {ContextDetails, ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\n\nexport class CollectionViewEventHandlerDelegateUsingContext extends CollectionViewEventHandlerDelegate {\n\n    constructor(view: CollectionView, forwarder: CollectionViewListenerForwarder) {\n        super(view, forwarder);\n    }\n\n    protected getItemContext(event: Event): ItemContext {\n\n        const contextDetail: ContextDetails | null = ContextualInformationHelper.getInstance().findContextFromEvent(event);\n\n        let context: ItemContext;\n\n        if (contextDetail) {\n            context = {\n                itemId: contextDetail.identifier,\n                dataSource: contextDetail.source\n            }\n        } else {\n            context = {\n                itemId: '',\n                dataSource: this.view.getName(),\n            }\n        }\n\n\n        return context;\n    }\n\n}","import {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {ViewListenerForwarder} from \"./ViewListenerForwarder\";\n\nexport class CollectionViewListenerForwarder extends ViewListenerForwarder implements CollectionViewListener {\n    protected collectionViewListeners: CollectionViewListener[];\n\n\n    public constructor() {\n        super();\n        this.collectionViewListeners = [];\n    }\n\n    public addListener(listener: CollectionViewListener) {\n        super.addListener(listener);\n        this.collectionViewListeners.push(listener);\n    }\n\n\n    itemDragStarted(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDragStarted(view, selectedItem));\n        }\n    }\n\n    itemSelected(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemSelected(view, selectedItem));\n        }\n    }\n\n    itemDeselected(view: CollectionView, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDeselected(view, deselectedItem));\n        }\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => {\n                if (!(listener.canSelectItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n}","import {ViewListenerForwarder} from \"./ViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DetailView} from \"../interface/DetailView\";\n\nexport class DetailViewListenerForwarder extends ViewListenerForwarder implements DetailViewListener {\n    protected detailViewListeners: DetailViewListener[];\n\n\n    public constructor() {\n        super();\n        this.detailViewListeners = [];\n    }\n\n    public addListener(listener: DetailViewListener) {\n        super.addListener(listener);\n        this.detailViewListeners.push(listener);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.saveNewItem(view, dataObj));\n        }\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.updateItem(view, dataObj));\n        }\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.deletedItem(view, dataObj));\n        }\n    }\n\n    cancelled(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.cancelled(view, dataObj));\n        }\n    }\n}","import {ViewListener} from \"../interface/ViewListener\";\nimport {View} from \"../interface/View\";\n\nexport class ViewListenerForwarder {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener: ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view, selectedItem));\n        }\n    }\n\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view, actionName, selectedItem));\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.canDeleteItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view, droppedItem));\n        }\n    }\n}\n","import {CollectionView} from \"../interface/CollectionView\";\nimport {AbstractView} from \"./AbstractView\";\nimport {CollectionViewDOMConfig, Modifier} from \"../../ConfigurationTypes\";\nimport {isSame} from \"../../../util/EqualityFunctions\";\nimport debug from \"debug\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionViewListenerForwarder} from \"../delegate/CollectionViewListenerForwarder\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionViewEventHandlerDelegate} from \"../delegate/CollectionViewEventHandlerDelegate\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\nconst avLogger = debug('collection-view-ts');\nconst avLoggerDetails = debug('collection-view-ts-detail');\n\n\nexport abstract class AbstractCollectionView extends AbstractView implements CollectionView, CollectionViewEventHandler {\n    protected collectionName: string;\n    protected renderer: CollectionViewRenderer | null;\n    protected selectedItem: any | null;\n    protected collectionUIConfig: CollectionViewDOMConfig;\n    protected eventHandlerDelegate: CollectionViewEventDelegate\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, collectionName: string) {\n        super(uiConfig.viewConfig);\n        this.collectionUIConfig = uiConfig;\n        this.collectionName = collectionName;\n        this.renderer = null;\n        let forwarder = new CollectionViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegate(this, forwarder);\n\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        this.eventHandlerDelegate.eventStartDrag(event);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventClickItem(event);\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventDeleteClickItem(event);\n    }\n\n    eventActionClicked(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventActionClicked(event);\n    }\n\n    public getCollectionName(): string {\n        return this.collectionName;\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from, item);\n    }\n\n    abstract getItemDescription(from: string, item: any): string;\n    abstract hasActionPermission(actionName:string, from:string, item:any):boolean;\n\n    getCollectionUIConfig(): CollectionViewDOMConfig {\n        return this.collectionUIConfig;\n    }\n\n    addEventCollectionListener(listener: CollectionViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        super.setContainedBy(container);\n        if (this.uiConfig.drop) {\n            avLoggerDetails(`view ${this.getName()}: Adding dragover events to ${this.uiConfig.dataSourceId}`)\n            avLoggerDetails(container);\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        if (this.renderer) this.renderer.onDocumentLoaded();\n    }\n\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n    }\n\n    abstract getIdForItemInNamedCollection(name: string, item: any): string;\n\n    abstract getItemInNamedCollection(name: string, compareWith: any): any;\n\n    abstract renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void;\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSame(item1, item2);\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    public getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        return '';\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        if (this.viewEl && this.renderer) {\n            this.renderer.setDisplayElementsForCollectionInContainer(this.viewEl, name, newState);\n        }\n    }\n\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return true;\n    }\n\n    setRenderer(renderer: CollectionViewRenderer): void {\n        this.renderer = renderer;\n    }\n\n\n}\n","import StateChangeListener from \"../../../state/StateChangeListener\";\nimport {StateManager} from \"../../../state/StateManager\";\nimport {CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {AbstractCollectionView} from \"./AbstractCollectionView\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {View} from \"../interface/View\";\nimport {CollectionView} from \"../interface/CollectionView\";\n\nimport debug from 'debug';\n\nconst logger = debug('ab-stateful-collection-view');\n\nexport default abstract class AbstractStatefulCollectionView extends AbstractCollectionView implements StateChangeListener, CollectionViewListener {\n\n    protected stateManager: StateManager;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, stateManager: StateManager, stateName: string) {\n        super(uiConfig, stateName);\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // setup state listener\n        this.stateManager.addChangeListenerForName(this.collectionName, this);\n    }\n\n    public getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    public hasActionPermission(actionName:string, from:string, item:any):boolean {\n        return true;\n    }\n\n\n    public onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n    public getItemInNamedCollection(name: string, compareWith: any): any {\n        return this.stateManager.findItemInState(name, compareWith, this.compareItemsForEquality);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`handling state ${name} changed`);\n        logger(newValue);\n        this.updateViewForNamedCollection(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        logger(`handling state ${name} new item added`);\n        logger(itemAdded);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        logger(`handling state ${name} new item removed`);\n        logger(itemRemoved);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        logger(`handling state ${name} new item updated`);\n        logger(itemNewValue);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    render(): void {\n        this.updateViewForNamedCollection(this.collectionName, this.stateManager.getStateByName(this.collectionName))\n    }\n\n    show(): void {\n    }\n\n    hidden(): void {\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        this.stateManager.removeItemFromState(this.collectionName, selectedItem, this.compareItemsForEquality, false);\n    }\n\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return this.getName();\n    }\n\n\n}\n","import {DRAGGABLE_FROM, DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {View} from \"../interface/View\";\nimport debug from \"debug\";\nimport {ViewListenerForwarder} from \"../delegate/ViewListenerForwarder\";\nimport {ViewListener} from \"../interface/ViewListener\";\n\nconst avLogger = debug('abstract-view-ts');\nconst avLoggerDetails = debug('abstract-view-ts-detail');\n\n\nexport abstract class AbstractView implements View {\n\n    public static DATA_SOURCE = 'data-source';\n\n\n    protected uiConfig: ViewDOMConfig;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement | null = null;\n    protected viewEl: HTMLElement | null;\n\n\n    protected constructor(uiConfig: ViewDOMConfig) {\n        this.uiConfig = uiConfig;\n        this.viewEl = null;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n    }\n\n    getItemId(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getItemDescription(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        throw new Error(\"Not implemented\");\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        return this.uiConfig;\n    }\n\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        this.eventForwarder.documentLoaded(this);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n    }\n\n\n    getName(): string {\n        return this.uiConfig.dataSourceId;\n    }\n\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    getDataSourceKeyId(): string {\n        return AbstractView.DATA_SOURCE;\n    }\n\n    abstract hidden(): void\n\n    abstract show(): void;\n\n    abstract render(): void;\n\n    public handleDrop(event: Event): void {\n        avLogger(`view ${this.getName()}: drop event`);\n        avLoggerDetails(event.target);\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`view ${this.getName()}: drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.drop) {\n            const acceptType = (this.uiConfig.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`view ${this.getName()}: accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this, draggedObject);\n                }\n            }\n        }\n    }\n\n}\n","import {ObjectPermissionChecker} from \"../interface/ObjectPermissionChecker\";\n\nexport class DefaultPermissionChecker implements ObjectPermissionChecker {\n    private canDelete: boolean;\n    private canUpdate: boolean;\n\n    constructor(canUpdate:boolean, canDelete:boolean) {\n        this.canUpdate = canUpdate;\n        this.canDelete = canDelete;\n    }\n\n    hasPermissionToUpdateItem(item: any): boolean {\n        return this.canUpdate;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        return this.canDelete;\n    }\n}","import {AbstractView} from \"./AbstractView\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nexport class DetailViewImplementation extends AbstractView implements DetailView {\n    protected currentItem: any | null = null;\n    protected renderer: DetailViewRenderer;\n\n    constructor(uiConfig: ViewDOMConfig, renderer: DetailViewRenderer) {\n        super(uiConfig);\n        this.renderer = renderer;\n        const forwarder = new DetailViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.renderer.setView(this);\n        this.renderer.setEventForwarder(forwarder);\n    }\n\n    addEventDetailListener(listener: DetailViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    public getItemId(name: string, item: any) {\n        return '';\n    }\n\n    public getItemDescription(name: string, item: any): string {\n        return '';\n    }\n\n    public hasActionPermission(actionName:string, from:string, item:any):boolean {\n        return true;\n    }\n\n    public getItem(from:string,identifier:string):any {\n        return this.currentItem;\n    }\n\n    public clearDisplay(): void {\n        this.renderer.reset();\n    }\n\n    public clearReadOnly(): void {\n        this.renderer.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        this.renderer.setReadOnly();\n    }\n\n    public isReadOnly(): boolean {\n        return this.renderer.isReadOnly();\n    }\n\n    public createItem(): any {\n        return this.renderer.createItem();\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n\n        if (this.renderer.hasPermissionToUpdateItem(dataObj)) {\n            this.renderer.displayItem(dataObj);\n        } else {\n            this.renderer.displayItemReadonly(dataObj);\n        }\n        this.show();\n    }\n\n\n    public hidden(): void {\n        this.renderer.hidden();\n    }\n\n    public show(): void {\n        this.renderer.show();\n    }\n\n    public render(): void {\n        this.displayItem(this.currentItem);\n    }\n\n    public onDocumentLoaded() {\n        this.renderer.onDocumentLoaded();\n        super.onDocumentLoaded();\n    }\n\n    public hasPermissionToDeleteItem(item: any): boolean {\n        return this.renderer.hasPermissionToDeleteItem(item);\n    }\n\n    public hasPermissionToUpdateItem(item: any): boolean {\n        return this.renderer.hasPermissionToUpdateItem(item);\n    }\n\n    public handleActionItem(actionName: string, selectedItem: any): void {\n        this.renderer.handleActionItem(actionName, selectedItem);\n    }\n\n    public isDisplayingItem(dataObj: any): boolean {\n        return this.renderer.isDisplayingItem(dataObj);\n    }\n\n    public hasChanged(): boolean {\n        return this.renderer.hasChanged();\n    }\n\n    initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): void {\n        this.renderer.initialise(displayOrder, hasDeleteButton, hideModifierFields)\n    }\n}","import {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DataObjectDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {Form} from \"../../form/Form\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {BasicFormImplementation} from \"../../form/BasicFormImplementation\";\nimport {FormEvent, FormEventType, FormListener} from \"../../form/FormListener\";\nimport debug from 'debug';\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewListener} from \"../interface/ViewListener\";\nimport {ObjectPermissionChecker} from \"../interface/ObjectPermissionChecker\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nconst logger = debug('form-detail-view-renderer')\n\nexport class FormDetailViewRenderer implements DetailViewRenderer, FormListener {\n    protected objDef: DataObjectDefinition;\n    protected form: Form | null = null;\n    protected currentItem: any;\n    protected isNewItem: boolean;\n    protected containerId: string;\n    protected forwarder: DetailViewListenerForwarder | null;\n    protected view: DetailView | null;\n    protected permissionChecker: ObjectPermissionChecker;\n\n    constructor(containerId: string, objDef: DataObjectDefinition, permissionChecker: ObjectPermissionChecker) {\n        this.containerId = containerId;\n        this.objDef = objDef;\n        this.currentItem = {};\n        this.isNewItem = false;\n        this.forwarder = null;\n        this.view = null;\n        this.permissionChecker = permissionChecker;\n    }\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    setEventForwarder(forwarder: DetailViewListenerForwarder): void {\n        this.forwarder = forwarder;\n    }\n\n    public setView(view: DetailView): void {\n        this.view = view;\n    }\n\n    onDocumentLoaded(): void {\n        this.form = new BasicFormImplementation(this.containerId, this.objDef);\n        this.form.addFormListener(this);\n    }\n\n    reset(): void {\n        if (this.form) this.form.reset();\n    }\n\n    initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean): void {\n        if (this.form) this.form.initialise(displayOrder, hasDeleteButton, hideModifierFields);\n    }\n\n    displayItemReadonly(dataObject: any): void {\n        this.isNewItem = false;\n        if (this.form) this.form.displayOnly(dataObject);\n    }\n\n    getName(): string {\n        return this.objDef.displayName;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addEventListener(listener: ViewListener): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    hasChanged(): boolean {\n        let result = false;\n        if (this.form) result = this.form.hasChanged();\n        return result;\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getDataSourceKeyId(): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public clearDisplay(): void {\n        this.isNewItem = false;\n        if (this.form) this.form.reset();\n    }\n\n    public clearReadOnly(): void {\n        if (this.form) this.form.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        if (this.form) this.form.setReadOnly();\n    }\n\n    public isReadOnly(): boolean {\n        let result = false;\n        if (this.form) result = this.form.isReadOnly();\n        return result;\n    }\n\n    public createItem(): any {\n        this.currentItem = {};\n        logger(`Creating new item with form ${this.form?.getId()}`);\n        if (this.form) {\n            this.isNewItem = true;\n            this.currentItem = this.form.startCreateNew();\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n        return this.currentItem;\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n        this.isNewItem = false;\n\n        if (this.hasPermissionToUpdateItem(dataObj)) {\n            if (this.form) this.form.startUpdate(dataObj);\n        } else {\n            if (this.form) this.form.displayOnly(dataObj);\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n\n    public hidden(): void {\n        if (this.form) this.form.setIsVisible(false);\n    }\n\n    public show(): void {\n        if (this.form) this.form.setIsVisible(true);\n    }\n\n    render(): void {\n        this.displayItem(this.currentItem);\n        this.show();\n    }\n\n\n    public hasPermissionToDeleteItem(item: any): boolean {\n        return this.permissionChecker.hasPermissionToDeleteItem(item);\n    }\n\n    public hasPermissionToUpdateItem(item: any): boolean {\n        return this.permissionChecker.hasPermissionToUpdateItem(item);\n    }\n\n    public getForm() {\n        return this.form;\n    }\n\n    handleActionItem(actionName: string, selectedItem: any): void {\n\n    }\n\n    isDisplayingItem(dataObj: any): boolean {\n        let result = false;\n        if (this.currentItem) {\n            if (this.form) {\n                result = this.form.isDisplayingItem(dataObj);\n            }\n        }\n        return result;\n    }\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.cancelled(this.view, this.currentItem);\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.deletedItem(this.view, this.currentItem);\n                // user is deleting the object, will become invisible\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                logger(`Form is saved with data`);\n                if (this.form) {\n                    let formattedObj = this.form?.getFormattedDataObject();\n                    if (this.isNewItem) {\n                        if (this.forwarder && this.view) this.forwarder.saveNewItem(this.view, formattedObj);\n                    } else {\n                        if (this.forwarder && this.view) this.forwarder.updateItem(this.view, formattedObj);\n                    }\n                    this.isNewItem = false;\n                }\n\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving`);\n                break;\n            }\n        }\n        return false;\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n}","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewDOMConfig, EXTRA_ACTION_ATTRIBUTE_NAME, Modifier} from \"../../ConfigurationTypes\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\nconst avLogger = debug('list-view-renderer-with-context');\n\nexport class ListViewRendererUsingContext implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const canDeleteItem: boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName, item);\n        const uiConfig: CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElementAttributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n\n\n            textEl = document.createElement(uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl, uiConfig.detail.textElementClasses);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name, collectionName, item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                        browserUtil.addAttributes(action, extraAction.attributes);\n                        if (extraAction.buttonText) {\n                            action.innerHTML = extraAction.buttonText;\n                        }\n                        if (extraAction.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        buttonsEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                browserUtil.addAttributes(deleteButtonEl, uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n\n            }\n        }\n\n\n        // add the key ids for selection\n        this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n        // add icons\n        if (uiConfig.detail.icons) {\n            const icons: string[] = uiConfig.detail.icons(collectionName, item);\n            icons.forEach((icon) => {\n                let iconEl = document.createElement('i');\n                browserUtil.addRemoveClasses(iconEl, icon);\n                textEl.appendChild(iconEl);\n            });\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName, item)}`);\n            containerEl.appendChild(childEl);\n\n            ContextualInformationHelper.getInstance().addContextToElement(this.view.getName(), collectionName, item, childEl, true);\n            childEl.addEventListener('contextmenu', ContextualInformationHelper.getInstance().handleContextMenu);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n}","import {Attribute} from \"../ui/ConfigurationTypes\";\n\nclass BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string, isAdding: boolean = true): void {\n        const classes = classesText.split(' ');\n        classes.forEach((classValue) => {\n            if (classValue.trim().length > 0) {\n                if (isAdding) {\n                    element.classList.add(classValue);\n                } else {\n                    element.classList.remove(classValue);\n                }\n            }\n        });\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n    removeAttributes(element: HTMLElement, attributes: string[]) {\n        attributes.forEach((attribute: string) => {\n            element.removeAttribute(attribute);\n        });\n    }\n\n    allElementsFromPoint(x: number, y: number) {\n        var element, elements = [];\n        var old_visibility = [];\n        while (true) {\n            element = document.elementFromPoint(x, y);\n            if (!element || element === document.documentElement) {\n                break;\n            }\n            elements.push(element);\n            // @ts-ignore\n            old_visibility.push(element.style.visibility);\n            // @ts-ignore\n            element.style.visibility = 'hidden'; // Temporarily hide the element (without changing the layout)\n        }\n        for (var k = 0; k < elements.length; k++) {\n            // @ts-ignore\n            elements[k].style.visibility = old_visibility[k];\n        }\n        elements.reverse();\n        return elements;\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1: any, item2: any) => boolean;\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1: any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.ts\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["localStorage","debug","console","logger","BudgetBalance","totalEl","onDocumentLoaded","document","ELEMENT","Controller","STATE_NAMES","getListenerName","stateChanged","balance","newValue","value","parseFloat","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","App","window","getInstance","onDocumentLoad","ContextualInformationHelper","$","transactions","API_Config","transaction","VIEW_NAME","budgetSummary","VIEW_CONTAINER","transactionDetail","BUTTON","createNew","total","cLogger","cLoggerDetail","connectToApplication","restSM","RESTApiStateManager","stateName","serverURL","api","isActive","aggregateSM","AggregateStateManager","memorySM","MemoryBufferStateManager","asyncSM","DownloadManager","getStateManager","create","delete","update","setupDataObjectDefinitions","exerciseTypeDefinition","ObjectDefinitionRegistry","BasicObjectDefinitionFactory","FieldType","name","avLogger","BudgetSummaryRenderer","currentChart","BudgetSummaryView","DOMConfig","viewConfig","resultsContainerId","dataSourceId","resultsElementType","resultsClasses","keyId","keyType","KeyType","detail","containerClasses","textElementType","textElementClasses","select","canDeleteItem","compareItemsForEquality","isSameMongo","getIdForItemInNamedCollection","item","renderDisplayForItemInNamedCollection","hasPermissionToDeleteItemInNamedCollection","hasPermissionToActionItemInNamedCollection","renderBackgroundForItemInNamedCollection","TransactionsCompositeView","transactionsView","transactionDef","transactionDetailViewRenderer","transactionDetailView","viewLinker","startingDisplayOrder","detailForm","addTransactionButton","TransactionsView","resultsElementAttributes","modifiers","normal","inactive","active","warning","icons","getItemDescription","buffer","dateDisplay","moment","getModifierForItemInNamedCollection","Modifier","containerEl","hasPermissionToUpdateItemInNamedCollection","itemAction","flogger","vlogger","glogger","rlogger","BasicFieldOperations","dateRegex","emailRegex","shortTimeRegex","timeRegex","dateTimeRegex","basicPasswordRegex","integerRegex","floatRegexp","moneyRegexp","booleanRegexp","durationRegexp","setSubElements","formatValue","field","result","currentValue","parseInt","parsed","isNaN","isValidValue","response","isValid","resetOnFailure","renderValue","generate","index","fieldValue","id","v4","SecurityManager","FIELD_ID","FIELD_CreatedBy","FIELD_ModifiedBy","FIELD_CreatedOn","FIELD_ModifiedOn","FIELD_CreatedBy_Desc","FIELD_ModifiedBy_Desc","FIELD_CreatedOn_Desc","FIELD_ModifiedOn_Desc","dataObjDef","order","fieldId","fieldDef","displayOrder","createModifierFields","idFieldName","objDef","displayName","fields","ops","fieldType","isKey","idType","type","mandatory","generator","onModify","onCreation","isMandatory","description","datasource","def","displayOnly","foundIndex","generatorDef","DataObjectController","isCreatingNew","listener","DefaultValueGenerator","definition","fieldOps","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","query","fetch","apiFetchJSONWithPost","request","JSON","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","fetchJSON","callback","apiUtil","CallbackRegistry","callbacks","fn","defaultFn","processOfflineItems","OfflineManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","url","RequestType","params","variables","callbackId","associatedStateName","state","addQLMutationRequest","mutation","addApiRequest","wasOffline","requestId","jsonRequest","managerRequest","originalRequest","queueType","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","callbackForQueueRequest","queueId","element","httpStatus","initiateFetchForQueueItem","DB_NAME","OBJECT_STORE","indexedDB","keyField","NotificationManager","Poller","NotificationType","offlineResults","INTERVAL_DEFAULT","URL_CALL","interval","isPollingBool","startPolling","delay","setInterval","isPolling","stopPolling","clearInterval","BootstrapNotification","Notification","show","topOffset","duration","containerId","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","setTimeout","NotificationFactory","createNotification","notificationFactory","context","info","notification","notificationNode","parentEl","hash","logoutEl","username","sessionStorage","isLoggedIn","loggedInUser","CryptoJS","smLogger","AbstractStateManager","forceSaves","managerName","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","stateEventType","StateChanged","previousObjValue","addChangeListenerForName","stateObjForName","getStateByName","stateValueObj","setStateByName","informListeners","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","updateItemInState","aggLogger","filters","mWF","manager","stateManager","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","filter","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","IndexedDBStateManager","hasCompletedRun","collection","setCompletedRun","forceResetForGet","initialise","runsComplete","openDB","upgrade","collections","db","keyPath","autoIncrement","blocked","blocking","terminated","saveWithCollectionKey","objectStore","addNewItemToCollection","removeItemFromCollection","updateItemInCollection","Error","stateObjectForName","getWithCollectionKey","savedResults","cursor","getConfiguredStateNames","getKeyFieldForKey","checkForObjectStore","saveItemsToCollection","saveData","removeAllItemsFromCollectionKey","callbackForRemoveItem","callbackForUpdateItem","callbackForGetItems","callbackForAddItem","msManager","valueIndex","FUNCTION_ID_ADD_ITEM","FUNCTION_ID_REMOVE_ITEM","FUNCTION_ID_UPDATE_ITEM","FUNCTION_ID_GET_ITEMS","configuration","results","config","identifier","stateObj","status","StateChangedDelegate","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","DRAGGABLE_KEY_ID","DRAGGABLE_TYPE","DRAGGABLE_FROM","EXTRA_ACTION_ATTRIBUTE_NAME","SidebarLocation","RowPosition","SCREEN_WIDTH_LARGE","SCREEN_WIDTH_MEDIUM","SCREEN_WIDTH_SMALL","AlertType","ALERT_MODAL_ID","ALERT_TITLE","ALERT_CONTENT","ALERT_CANCEL","ALERT_CONFRIM","ALERT_hideClass","ALERT_showClass","AlertManager","confirmHandler","outcome","event","cancelHandler","TogglePlacement","defaultIdentifier","SOURCE","TYPE","DISPLAYNAME","IDENTIFIER","DESCRIPTION","BOOTSTRAP_TOGGLE","BOOTSTRAP_PLACEMENT","BOOTSTRAP_TOOLTIP_VALUE","BOOTSTRAP_POPOVER_VALUE","BOOTSTRAP_TOGGLE_HTML","BOOTSTRAP_TOGGLE_HTML_VALUE","BOOTSTRAP_PLACEMENT_TOP","BOOTSTRAP_PLACEMENT_BOTTOM","BOOTSTRAP_PLACEMENT_RIGHT","BOOTSTRAP_PLACEMENT_LEFT","registry","menuDivEl","menuContentEl","view","addTooltip","placement","bottom","html","target","action","actionName","handler","hasPermission","elementDefinition","elementType","elementAttributes","elementClasses","iconClasses","icon","source","defaultType","internalType","actions","desc","parent","contexts","contextDef","selectedItem","collectionView","compareWith","browserUtil","itemEl","dlogger","AbstractForm","formListeners","fieldListeners","uiDef","isVisible","isInitialised","hasChangedBoolean","isDisplayOnly","getName","valueChanged","failedValidation","hideModifierFields","formEvent","formId","FormEventType","RESETTING","shouldCancelChange","CANCELLED","allFieldsValid","ValidationManager","ConditionResponse","SAVE_ABORTED","formattedDataObject","SAVED","getId","getFieldFromDataFieldId","mapItem","completed","CANCELLING_ABORTED","DELETED","DELETE_ABORTED","clearReadOnly","setReadOnly","isDisplayingItem","isReadOnly","fieldGroup","uiConfig","BasicFormImplementation","factoryElements","getFormattedDataObject","formattedResult","subElements","dataId","fieldEl","fieldUIConfig","UIFieldType","attributeId","BootstrapFormConfigHelper","FormElementFactory","rbg","isSameObject","currentObjId","suppliedObjId","dataObj","FormMode","DATA_ID_ATTRIBUTE","EditingEventListener","handleEvent","fieldElement","RenderingEventListener","processRendering","ValidationEventHandler","message","undefined","validationElementTarget","errorMessageDiv","errorMessageEl","processValidation","subElement","validationResp","DefaultFieldOptionsListener","optionsChanged","subEls","FieldInputElementFactory","fieldConfig","eventHandler","errorMessageDivEl","messageEl","containedByEl","labelEl","descEl","valueOptions","valueEl","valueOption","radioGroupElement","container","radioButtons","formEl","formConfig","formInputElements","formTAElements","formRBGElements","formSelectElements","unsavedMessage","group","buttonContainer","deleteButtonEl","cancelButtonEl","submitButtonEl","form","selectFields","radioButtonGroups","textFields","deleteButton","cancelButton","submitButton","buttonEl","buttonDef","iconEl","AbstractField","hidden","isHidden","addFieldListener","listenerInList","getFieldDefinition","setInvalid","getValue","getFormattedValue","validator","setValue","selectEl","selectedIndex","option","reset","clearValue","validate","render","hide","setValid","InputField","RadioButtonGroupField","SelectField","TextAreaField","rule","targetField","convertedRule","fieldConditions","valueConditions","condition","sourceField","comparison","values","sourceType","targetType","formRule","formRuleSet","rules","ruleFailed","ruleSubset","failedResponses","targetValue","sourceValue","ComparisonType","check","splits","foundInValue","ruleCheck","ruleSet","fieldOperations","rbgFieldOperation","fieldUIConfigs","displayOrderValue","renderer","formatter","label","classes","messageDisplay","validClasses","invalidClasses","rows","cols","containedBy","fieldGroups","unsavedChanges","innerHTML","buttonsContainedBy","buttonText","buttonClasses","activeSave","a","b","ChildViewListenerDelegate","addView","documentLoaded","hideRequested","itemDeleted","itemDropped","showRequested","cancelled","deletedItem","saveNewItem","updateItem","ChangeDataObjectDelegate","LinkedCollectionDetailController","children","parentView","childView","itemDeselected","itemDragStarted","itemSelected","canSelectItem","canProceedWithSelection","confirm","canProceedWithCreateNew","RBGFieldOperations","radioButton","SimpleValueDataSource","addListener","getOptions","CollectionViewEventHandlerDelegate","getDragData","itemId","dataSource","eventStartDrag","data","eventClickItem","shouldSelect","eventDeleteClickItem","shouldDelete","eventActionClicked","AbstractView","CollectionViewEventHandlerDelegateUsingContext","contextDetail","CollectionViewListenerForwarder","DetailViewListenerForwarder","ViewListenerForwarder","avLoggerDetails","AbstractCollectionView","forwarder","getItemId","getCollectionUIConfig","addEventCollectionListener","setContainedBy","isSame","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","updateViewForNamedCollection","setRenderer","AbstractStatefulCollectionView","hasActionPermission","getItemInNamedCollection","DATA_SOURCE","getUIConfig","addEventListener","hasChanged","getDataSourceKeyId","draggedObjectJSON","draggedObject","droppedObjectType","droppedObjectFrom","acceptType","objectType","acceptFrom","from","DefaultPermissionChecker","hasPermissionToUpdateItem","hasPermissionToDeleteItem","DetailViewImplementation","currentItem","addEventDetailListener","FormDetailViewRenderer","setEventForwarder","displayItemReadonly","handleActionItem","formattedObj","ListViewRendererUsingContext","resultDataKeyId","childEl","textEl","contentEl","imgEl","buttonsEl","badgeValue","badgeEl","hasPermissionForAction","extraAction","modifier","secondModifier","newState","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classesText","classValue","addAttributes","attributes","attribute","removeAttributes","allElementsFromPoint","elements","old_visibility","k","item1","item2"],"sourceRoot":""}